%import common.WS_INLINE
%import common.INT
// %import common.NEWLINE -> NEWLINE

NEWLINE: "\n"

%ignore WS_INLINE

// Start rule
start: ps_game

ps_game: prelude objects_section legend_section sounds_section collisionlayers_section rules_section winconditions_section levels_section
NEWLINES: NEWLINE+

// Section delimiters
section_delimiter: delimiter NEWLINE

delimiter: "="+

// Sections
prelude: prelude_data+
objects_section: "OBJECTS"i NEWLINES object_data+
legend_section: "LEGEND"i NEWLINES legend_data+
sounds_section: "SOUNDS"i NEWLINES sound_data*
collisionlayers_section: "COLLISIONLAYERS"i NEWLINES layer_data+
rules_section: "RULES"i NEWLINES rule_block*
winconditions_section: "WINCONDITIONS"i NEWLINES condition_data*
levels_section: "LEVELS"i NEWLINES level_data+

STRING: /[^\n]+/

// Object Data
object_line: object_name legend_key?
color_line: color+ 
object_data: object_line NEWLINE color_line NEWLINE sprite? NEWLINE

SPRITE_PIXEL: /[0-9.]/
colors: color+

sprite: (SPRITE_PIXEL~5 NEWLINE)~5

// Legend Data
legend_data: LEGEND_PIXEL object_name legend_operation* NEWLINES
LEGEND_PIXEL: PIXEL+ "="

OR: "or"i
AND: "and"i

legend_operation: OR object_name
                | AND object_name

// Sound Data
sound_data: ID* sound_id* sound_number? NEWLINES

sound_number: INT

sound: "sfx"i sound_id

// Layer Data
layer_data: (object_name ("," | " "))* object_name ","? NEWLINES

STARTLOOP: "startloop"i
ENDLOOP: "endloop"i

// Rule Data
rule_data: PLUS? (prefix | rule_part)+ THEN (prefix | command | rule_part)* message? NEWLINES

THEN: "->"
PLUS: "+"

rule_block_once: rule_data+
rule_block_loop: STARTLOOP NEWLINES rule_data+ ENDLOOP NEWLINES

rule_block: rule_block_once
          | rule_block_loop

message: "message"i STRING+

rule_part: "[" (rule_content? cell_border*)+ "]"

cell_border: "|"

rule_content: DIRECTIONAL? ID

ID: /[a-z0-9.A-Z#_\/\\]/+

// Command
command: command_keyword
       | sound

// Condition Data
condition_data: QUANT object_name (ON object_name)? NEWLINES

ON: "on"i
QUANT: "all"i | "some"i | "no"i | "any"i


// Level Data
level_data: levellines

// Pixel can match any character
PIXEL: /./
// PIXEL: /[█a-zA-Zぁ-㍿.!@#$%&*0-9\-,`\'~_"§\[\]è!çàé;?:\/+°£^{}|\><^v¬˅\\±↑↓→←⸝·öù]/
sprite_key: PIXEL
          | "="  // To permit easyenigma

levellines: levelline+ NEWLINE
levelline: PIXEL+ NEWLINE

// Identifiers and Tokens
object_name: ID
color: ID
sound_id: ID
condition_id: ID

// A rule prefix is anything but `[`
legend_key: PIXEL+

DIRECTIONAL: /[\^v<>]/

KEYWORD_ID: /[a-z0-9.A-Z_]+/
prefix: ID

prelude_data: PRELUDE_KEYWORD (" " STRING)* NEWLINES

// Keywords
PRELUDE_KEYWORD: "title"i | "author"i | "homepage"i | "color_palette"i | "again_interval"i | "background_color"i | "debug"i 
               | "flickscreen"i | "key_repeat_interval"i | "noaction"i | "norepeat_action"i | "noundo"i | "norestart"i
               | "realtime_interval"i | "require_player_movement"i | "run_rules_on_level_start"i | "scanline"i 
               | "text_color"i | "throttle_movement"i | "verbose_logging"i | "youtube"i | "zoomscreen"i

legend_keyword: "or"i | "and"i
// command_keyword: "again"i | "cancel"i | "checkpoint"i | "restart"i | "win"i
command_keyword: AGAIN | CANCEL | CHECKPOINT | RESTART | WIN

AGAIN: "again"i
CANCEL: "cancel"i
CHECKPOINT: "checkpoint"i
RESTART: "restart"i
WIN: "win"i

// ID: /[a-z0-9.A-Z#_+]+/
