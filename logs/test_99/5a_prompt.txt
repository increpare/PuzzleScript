SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

(
level ideas
push battery horizontally
have to assemble and then disassemble a circuit, in order to complete it
add a piece to a circut, then break the circuit from another point
level that starts with a closed circuit
level with very dangerous + block
)
title Robot Arm
author increpare
homepage www.increpare.com

run_rules_on_level_start
color_palette c64

run_rules_on_level_start

norepeat_action

========
OBJECTS
========

Background .
darkblue

Player P
Black orange grey Blue
.111.
.111.
22222
13331
.3.3.

R0_Up 0
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R1_Up 1
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R2_Up 2
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Right
grey lightgrey
.111.
10001
10001
10001
.111.

R3 3
grey lightgrey
.....
..0..
.010.
..0..
.....

Connector_Up
grey lightgrey
.101.
.111.
.....
.....
.....

Connector_Down
grey lightgrey
.....
.....
.....
.111.
.101.

Connector_Left
grey lightgrey
.....
11...
01...
11...
.....

Connector_Right
grey lightgrey
.....
...11
...10
...11
.....

Moved
transparent

Parent
transparent

GrandParent
transparent

NewRot
transparent

NewRot2
transparent

force
transparent

explosion
red yellow
.101.
10101
01010
10101
.101.

explosionb
red yellow
.101.
10101
01010
10101
.101.

explosion2
yellow red
.101.
10101
01010
10101
.101.

Wall #
darkgrey grey lightgrey
00000
01110
01010
01110
00000

water ,
blue lightblue
00000
00010
00000
00000
01000

Fruit F
Red Green LightRed
..1..
.000.
00020
00000
.000.


FruitPicked G
Red Green LightRed grey grey
..4..
.030.
43334
00300
.040.

DeadFruit
black black black black black
..4..
.030.
43334
00300
.040.

EndPoint E
darkgreen Yellow black green
30003
02220
02220
02220
30003


=======
LEGEND
=======
R0 = R0_up or R0_down or R0_left or R0_right
R1 = R1_up or R1_down or R1_left or R1_right
R2 = R2_up or R2_down or R2_left or R2_right
RobotPiece = R0 or R1 or R2 or R3
* = RobotPiece or Player
connector = connector_up or connector_down or connector_left or connector_right

=======
SOUNDS
=======

sfx0 43004308 (explosion)
sfx1 69392707
sfx2 57370907 (push machine)
sfx3 62083508 (rotate machine)
sfx4 90419908 (grab)
sfx5 50782902 (drop in hole)
sfx6 76878101 (empty grab)
sfx7 13941101 (dead fruit)
sfx8 42541302 (release)
Player move 88476108
startgame 30513908
endlevel 5524308
endgame 5524308
showmessage 41852908
closemessage 41852908

================
COLLISIONLAYERS
================
Background
water
EndPoint
Player
Moved
Fruit
FRUITPICKED
deadfruit
R0_up, R0_down, R0_left, R0_right
R1_up, R1_down, R1_left, R1_right
R2_up, R2_down, R2_left, R2_right
connector_up
connector_down
connector_left
connector_right
R3
parent
GrandParent
newrot
newrot2
force
wall
explosion, explosion2, explosionb

======
RULES
======

[ connector ] -> [ ]

[ > player | fruit ] -> cancel

[ > player | water ] -> cancel

[ > player | ] -> [ > player | > force ]

[ > player | robotpiece | wall ] -> cancel

(place movement arrows)
up [ R0_Up | ] -> [ up R0_Up | up Parent ]
up [ R1_Up | ] -> [ up R1_Up | up Parent ]
up [ R2_Up | ] -> [ up R2_Up | up Parent ]

down [ R0_down | ] -> [ down R0_down | down Parent ]
down [ R1_down | ] -> [ down R1_down | down Parent ]
down [ R2_down | ] -> [ down R2_down | down Parent ]

left [ R0_left | ] -> [ left R0_left | left Parent ]
left [ R1_left | ] -> [ left R1_left | left Parent ]
left [ R2_left | ] -> [ left R2_left | left Parent ]

right [ R0_right | ] -> [ right R0_right | right Parent ]
right [ R1_right | ] -> [ right R1_right | right Parent ]
right [ R2_right | ] -> [ right R2_right | right Parent ]


( force propagation like this isn't very nice )
( [ > force < parent | ] -> [ < parent | > force ] )

[ R3 > force < parent ] [ > R0 ] [ v R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ v R1 ] [ r2 > force ]
[ R3 > force < parent ] [ > R0 ] [ ^ R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ ^ R1 ] [ r2 > force ]

[ > force < parent no R0] [R0]-> [ < parent ] [ > force R0 ]
[ > force R3 perpendicular parent ] [ R2 < parent ] [ R0 ] -> [ R3 perpendicular parent ] [ R2 < parent ] [ > force R0 ]

[ > force R2 perpendicular parent ] [ R1 < parent ] [ R0 ] -> [ R2 perpendicular parent ] [ R1 < parent ] [ > force R0 ]


[ > force moving R0 | ] -> [ | moving R0] sfx2

[ > force moving R1 perpendicular parent ] [ R0 ] -> [ moving R1 perpendicular parent ] [ > R0 ] sfx3
[ > force moving R2 perpendicular parent ] [ R1 ] -> [ moving R2 perpendicular parent ] [ > R1 ] sfx3
[ > force 		R3 perpendicular parent ] [ R2 ] -> [ R3 perpendicular parent ] [ > R2 ] sfx3


(rebuild arm)

(add new parents)

[ > R1 ] [ R2 ] -> [ > R1 ] [ R2 > NewRot ]
[ > R0 ] [ R1 ] [ R2 ] -> [ > R0 ] [ R1 > NewRot ] [ R2 > NewRot2 ]

[ > Parent R1 ] [ R2 ] -> [ > Parent R1 ] [ > GrandParent R2 ]

[ ^ Parent > NewRot > RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent > NewRot v RobotPiece ] -> [ < RobotPiece ]
[ ^ Parent > NewRot < RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent > NewRot ^ RobotPiece ] -> [ > RobotPiece ]

[ ^ Parent < NewRot > RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent < NewRot v RobotPiece ] -> [ > RobotPiece ]
[ ^ Parent < NewRot < RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent < NewRot ^ RobotPiece ] -> [ < RobotPiece ]


[ ^ GrandParent > NewRot2 > R2 ] -> [ V R2 ]
[ ^ GrandParent > NewRot2 v R2 ] -> [ < R2 ]
[ ^ GrandParent > NewRot2 < R2 ] -> [ ^ R2 ]
[ ^ GrandParent > NewRot2 ^ R2 ] -> [ > R2 ]

[ ^ GrandParent < NewRot2 > R2 ] -> [ ^ R2 ]
[ ^ GrandParent < NewRot2 v R2 ] -> [ > R2 ]
[ ^ GrandParent < NewRot2 < R2 ] -> [ V R2 ]
[ ^ GrandParent < NewRot2 ^ R2 ] -> [ < R2 ]

[ NewRot ] -> [ ]
[ NewRot2 ] -> [ ]
[ Parent ] -> [ ]
[ GrandParent ] -> [ ]


(change sprites)
[ up R0 ] -> [ up R0_Up ]
[ up R1 ] -> [ up R1_Up ]
[ up R2 ] -> [ up R2_Up ]

[ down R0 ] -> [ down R0_down ]
[ down R1 ] -> [ down R1_down ]
[ down R2 ] -> [ down R2_down ]

[ left R0 ] -> [ left R0_left ]
[ left R1 ] -> [ left R1_left ]
[ left R2 ] -> [ left R2_left ]

[ right R0 ] -> [ right R0_Right ]
[ right R1 ] -> [ right R1_Right ]
[ right R2 ] -> [ right R2_Right ]

(work from the base up when placing)
up [ up R0 | no R1 ] [ moving R1 ] -> [ up R0 | moving R1 ] [ ]
down [ down R0 | no R1 ] [ moving R1 ] -> [ down R0 | moving R1 ] [ ]
left [ left R0 | no R1 ] [ moving R1 ] -> [ left R0 | moving R1 ] [ ]
right [ right R0 | no R1 ] [ moving R1 ] -> [ right R0 | moving R1 ] [ ]

up [ up R1 | no R2 ] [ moving R2 ] -> [ up R1 | moving R2 ] [ ]
down [ down R1 | no R2 ] [ moving R2 ] -> [ down R1 | moving R2 ] [ ]
left [ left R1 | no R2 ] [ moving R2 ] -> [ left R1 | moving R2 ] [ ]
right [ right R1 | no R2 ] [ moving R2 ] -> [ right R1 | moving R2 ] [ ]


up [ up R2 | no R3 ] [ R3 ] -> [ up R2 | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ down R2 | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ left R2 | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ right R2 | R3 ] [ ]




up [ up R2 | no R3 ] [ R3 ] -> [ R2_up | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ R2_down | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ R2_left | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ R2_right | R3 ] [ ]


[ > RobotPiece no moved ] -> [ RobotPiece ]


up [ R0_Up | ] -> [ R0_Up connector_up | connector_down ]
up [ R1_Up | ] -> [ R1_Up connector_up | connector_down ]
up [ R2_Up | ] -> [ R2_Up connector_up | connector_down ]

down [ R0_down | ] -> [ R0_down connector_down | connector_up ]
down [ R1_down | ] -> [ R1_down connector_down | connector_up ]
down [ R2_down | ] -> [ R2_down connector_down | connector_up ]

left [ R0_left | ] -> [ R0_left connector_left | connector_right ]
left [ R1_left | ] -> [ R1_left connector_left | connector_right ]
left [ R2_left | ] -> [ R2_left connector_left | connector_right ]

right [ R0_right | ] -> [ R0_right connector_right | connector_left ]
right [ R1_right | ] -> [ R1_right connector_right | connector_left ]
right [ R2_right | ] -> [ R2_right connector_right | connector_left ]

[RobotPiece Wall no explosion no explosion2 ] -> [ RobotPiece Wall explosion ] sfx0

[ R0 R2 no explosion no explosion2] -> [ R0 R2 explosion ] sfx0
[ R0 R3 no explosion no explosion2 ] -> [ R0 r3 explosion ] sfx0
[ R1 R3 no explosion no explosion2 ] -> [ R1 R3 explosion ] sfx0

[ explosion2 ] -> [ explosionb ] again
[ explosion ] -> [ explosion2] again
[ explosionb ] -> [explosion] again

[ > player  | wall ] -> cancel

[FruitPicked ] [ R3 no FruitPicked ] -> [ ] [ R3 FruitPicked ]

[ action player ] [ R3 Fruit no fruitpicked ] -> [ player ] [ R3 Fruitpicked] sfx4
[ action player ] [ R3 fruitpicked no fruit ] -> [ player ] [ r3 fruit ] sfx8

[action player ] [ r3 no fruit no fruitpicked ] -> sfx6


[ fruit endpoint ] -> [endpoint] sfx5
[ fruit water ] -> [ deadfruit water ] sfx7
late [R0 water ] -> cancel
[R0 fruit ] -> cancel

==============
WINCONDITIONS
==============

no fruit
no fruitpicked
no deadfruit

=======
LEVELS
=======

message press x to grip and ungrip the mechanical arm
message put fruit in hole

message Level 1 of 3

###################
###################
###################
###..,........,.###
###..,...3....,.###
###..,...2....,.###
###.F,.E.1.,,,F,###
###..,...0....,.###
###..,..P.....,.###
###..,........,.###
###################
###################
###################

message Level 2 of 3

##############
##############
##############
###..3.....###
###..2.....###
###..1.,,,,###
###.E0.,...###
###....,FF.###
###.P..,...###
##############
##############
##############

message Level 3 of 3

###################
###################
###################
########........###
###..3.#...##.f.###
###..2..........###
###..1...#....#.###
###.e0..........###
###..p..#...#.f.###
#########.......###
###################
###################
###################

message congratulations


title Gobble Rush!
author Mark Richardson
again_interval 0.05
noaction
require_player_movement
run_rules_on_level_start


========
OBJECTS
========

Background
Black

Exit
White Black
01010
10101
01010
10101
01010

Wall
Brown

Hole
Brown
00000
00.00
0...0
0...0
0...0

Player
Pink Blue Brown Red DarkBlue
.222.
.101.
33333
.444.
44.44

Enemy
LightBrown
.....
0..0.
.00..
0000.
0..0.

Alert
Red
....0
....0
.....
....0
.....

Chicken
#EA3 #FC9 #FEA
.....
2....
.110.
01100
.000.

Lettuce
#6C3 #5A2 #482 #361 #240
.2.2.
24342
12421
01310
.002.

LoS
White
.....
.....
.....
.....
.....

MoveU
White
.....
.....
.....
.....
.....

MoveD
White
.....
.....
.....
.....
.....

MoveL
White
.....
.....
.....
.....
.....

MoveR
White
.....
.....
.....
.....
.....

CanMove
White
.....
.....
.....
.....
.....

Level0
White #F00
.....
.....
.111.
.....
.....

Level1
White #F00
00000
.....
.111.
.....
.....

Level2
White #F00
.....
00000
.111.
.....
.....

Level3
White #F88
.....
.....
01110
.....
.....

Level4
White #F00
.....
.....
.111.
00000
.....

Level5
White #F00
.....
.....
.111.
.....
00000


=======
LEGEND
=======

. = Background
X = Exit
# = Wall
H = Hole
P = Player
Q = Player and Exit
E = Enemy
F = Enemy and Exit
C = Chicken
D = Chicken and Exit
L = Lettuce
M = Lettuce and Exit
0 = Level0
1 = Level1
2 = Level2
3 = Level3
4 = Level4
5 = Level5

Move = MoveU or MoveD or MoveL or MoveR
Obstacle = Wall or Enemy
Food = Player or Chicken


=======
SOUNDS
=======

SFX0            97542903 (enemy alerted)
Player  Destroy 41368102 (player eaten)
Chicken Destroy 74663702 (chicken eaten)
Lettuce Destroy 74663702 (lettuce eaten)
Enemy   Create  81259707 (enemy moving)
EndLevel        22595303


================
COLLISIONLAYERS
================

Background
Exit, Hole, Level0, Level1, Level2, Level3, Level4, Level5
Wall, Player, Enemy, Chicken, Lettuce
LoS, Move
Alert, CanMove


======
RULES
======

(Prevent illegal moves)
[ > Player | Hole ] -> cancel

(Tell alert enemies to move)
[ Enemy Move ] -> [ Enemy CanMove Move ]

(Stop enemies)
late up    [ Enemy CanMove MoveU |    Obstacle no Move ] -> [ Enemy | Obstacle ]
late down  [ Enemy CanMove MoveD |    Obstacle no Move ] -> [ Enemy | Obstacle ]
late left  [ Enemy CanMove MoveL |    Obstacle no Move ] -> [ Enemy | Obstacle ]
late right [ Enemy CanMove MoveR |    Obstacle no Move ] -> [ Enemy | Obstacle ]
late down  [ Enemy CanMove MoveD | Enemy CanMove MoveU ] -> [ Enemy | Enemy    ]
late right [ Enemy CanMove MoveR | Enemy CanMove MoveL ] -> [ Enemy | Enemy    ]
late up    [ Enemy CanMove MoveU | Enemy      no Move  ] -> [ Enemy | Enemy    ]
late down  [ Enemy CanMove MoveD | Enemy      no Move  ] -> [ Enemy | Enemy    ]
late left  [ Enemy CanMove MoveL | Enemy      no Move  ] -> [ Enemy | Enemy    ]
late right [ Enemy CanMove MoveR | Enemy      no Move  ] -> [ Enemy | Enemy    ]

(Move enemies)
late up    [ Enemy CanMove MoveU | no Obstacle         ] -> [       | Enemy MoveU ] again
late down  [ Enemy CanMove MoveD | no Obstacle         ] -> [       | Enemy MoveD ] again
late left  [ Enemy CanMove MoveL | no Obstacle         ] -> [       | Enemy MoveL ] again
late right [ Enemy CanMove MoveR | no Obstacle         ] -> [       | Enemy MoveR ] again
late       [ Enemy CanMove       ]                       -> [ Enemy ]

(Remove alerts)
late       [ Enemy Alert         ]                       -> [ Enemy ]

(Create line of sight)
late [ Food no CanMove ] -> [ Food CanMove ]
late [ Move ] [ CanMove ] -> [ Move ] [ ]

(Chase player)
late [ Player CanMove ] -> [ Player LoS ]
late [ Player LoS | no Wall no LoS ] -> [ Player LoS | LoS ]
late [ Player Los | ... | LoS | no Wall no LoS ] -> [ Player LoS | ... | LoS | LoS ]
late up    [ Enemy LoS no Move | ... | Player LoS ] -> [ Enemy MoveU Alert | ... | Player LoS ] SFX0
late down  [ Enemy LoS no Move | ... | Player LoS ] -> [ Enemy MoveD Alert | ... | Player LoS ] SFX0
late left  [ Enemy LoS no Move | ... | Player LoS ] -> [ Enemy MoveL Alert | ... | Player LoS ] SFX0
late right [ Enemy LoS no Move | ... | Player LoS ] -> [ Enemy MoveR Alert | ... | Player LoS ] SFX0
late [ LoS ] -> [ ]

(Chase chickens)
startloop
late random [ Chicken CanMove ] -> [ Chicken LoS ]
late [ Chicken LoS | no Wall no LoS ] -> [ Chicken LoS | LoS ]
late [ Chicken Los | ... | LoS | no Wall no LoS ] -> [ Chicken LoS | ... | LoS | LoS ]
late up    [ Enemy LoS no Move | ... | Chicken LoS ] -> [ Enemy MoveU Alert | ... | Chicken LoS ] SFX0
late down  [ Enemy LoS no Move | ... | Chicken LoS ] -> [ Enemy MoveD Alert | ... | Chicken LoS ] SFX0
late left  [ Enemy LoS no Move | ... | Chicken LoS ] -> [ Enemy MoveL Alert | ... | Chicken LoS ] SFX0
late right [ Enemy LoS no Move | ... | Chicken LoS ] -> [ Enemy MoveR Alert | ... | Chicken LoS ] SFX0
late [ LoS ] -> [ ]
endloop


==============
WINCONDITIONS
==============

some Exit on Player
no Alert
no Move


=======
LEVELS
=======

..#####....
..#X..#...3
..#...###.0
..#E....#.0
..###...#.0
....#..P#.0
....#####..

..#######..
..#P....#.4
..#.....#.0
..#####.#.0
..#EX...#.0
..###...#.0
....#####..

..#######..
..#.....#.5
..#..#..#.0
..#.....#.0
..#.P##E#.0
..#..#XE#.0
..#######..

..#######..
..#.....#.0
..#.E...#.1
..#.E...#.0
..#.E...#.0
..#XE.P.#.0
..#######..

..#######..
..#..#.X#.0
..#..E..#.2
..##.#E##.0
..#.....#.0
..#P.#..#.0
..#######..

..#######..
..#X...P#.0
..##.#..#.3
..#...#.#.0
..#.....#.0
..#.E#.E#.0
..#######..

..######...
..#P.#.##.0
..#.X..E#.4
..##.#..#.0
..#.....#.0
..##..E.#.0
...######..

...####....
..##..##..0
..#.P..##.5
..#..X.E#.0
..##...##.0
...##E##..0
....###....

..#######..
..#XE...#.0
..#EE..##.0
..#..P..#.1
..#.....#.0
..#.#...#.0
..#######..

..#######..
..#P..#X#.0
..#.....#.0
..##....#.2
..#.....#.0
..#E..#E#.0
..#######..

..#######..
..#X...P#.0
..#.###.#.0
..#.....#.3
..#E###.#.0
..#....C#.0
..#######..

..#######..
..#P....#.0
..#..#.E#.0
..#.....#.4
..##.C.##.0
...##X##..0
....###....

..#######..
..#....C#.0
..##X#.##.0
..#EH..#..5
..##...#..0
...#.PC#..0
...#####...

...######..
...#.#..#.0
..##Q..E#.0
..#...#.#.0
..#..#..#.1
..#.E.C.#.0
..#######..

.....####..
...###.E#.0
...#P...#.0
..##..L.#.0
..#..LXL#.2
..#E..L.#.0
..#######..

...######..
..##LLCX#.0
..#LLCLC#.0
..#LCL.L#.0
..#ELLPL#.3
..#LLC#L#.0
..#######..

..#######..
..#....P#.0
..#E.#E.#.0
..#.....#.0
..##LLL##.4
...##X##..0
....###....

..#######..
..##LXL##.0
..#..L..#.0
..#..#..#.0
..#E...E#.5
..##.P.##.0
..#######..

..#######..
..#H.P..#.0
..#XH...#.0
..#..H.E#.0
..#...H.#.0
..#.E...#.1
..#######..

..#######..
..#.E.E.#.0
..#P....#.0
..#..X.E#.0
..#L..L.#.0
..#.E.EL#.2
..#######..

..#######..
..#L.L.L#.0
..#L.L.L#.0
..#L.P.L#.0
..#L.L.L#.0
..#L.L.L#.3
..##X#X##..


title Smother
author Team Borse

background_color #9CBD0F
text_color #0F380F

run_rules_on_level_start

========
OBJECTS
========

Background
#9CBD0F

LaserGV
#9CBD0F #8CAD0F #306230 #0F380F
22222
.222.
..3..
..3..
.....

LaserGH
#9CBD0F #8CAD0F #306230 #0F380F
2....
22...
2233.
22...
2....

LaserV
#9CBD0F #8CAD0F #306230 #0F380F
.....
..3..
..3..
..3..
.....

LaserH
#9CBD0F #8CAD0F #306230 #0F380F
.....
.....
.333.
.....
.....

LaserB
#9CBD0F #8CAD0F #306230 #0F380F
.....
..3..
.333.
..3..
.....

Exit
#9CBD0F #8CAD0F #306230 #0F380F
2...2
2...2
2...2
2...2
2.2.2

Wall
#9CBD0F #8CAD0F #306230 #0F380F
33333
31223
32123
32223
33333

Heart
#9CBD0F #8CAD0F #306230 #0F380F
.2.2.
22222
.222.
..2..
.....


PlayerFull
#9CBD0F #8CAD0F #306230 #0F380F
.222.
.323.
.222.
.222.
.2.2.

Protector
#9CBD0F #8CAD0F #306230 #0F380F
.333.
.232.
.333.
.333.
.3.3.

ProtectorSolo
#9CBD0F #8CAD0F #306230 #0F380F
.333.
.232.
.333.
.333.
.3.3.

victimSolo
#9CBD0F #8CAD0F #306230 #0F380F
.222.
.323.
.222.
.222.
.2.2.


PlayerDead
#9CBD0F #8CAD0F #306230 #0F380F
.222.
22222
2.2.2
.222.
.222.

pushBlock
#9CBD0F #8CAD0F #306230 #0F380F
33333
31113
31113
31113
33333

=======
LEGEND
=======

Player = PlayerFull or Protector or ProtectorSolo or victimSolo
PlayerWin = PlayerFull or PlayerDead or Protector or victimSolo
Laser = LaserV or LaserH or LaserB
LaserBlock = Wall or Player or PlayerDead or Exit
. = Background
# = Wall
g = LaserGV
h = LaserGH
P = PlayerFull
n = Protector
q = ProtectorSolo
k = victimSolo
O = Exit
l = Heart
b = pushBlock

=======
SOUNDS
=======

startgame 83279102 (sound at start of game)
CloseMessage 123434 (close message noise)
ShowMessage 123434 (show message noise)
sfx0 8545502 (death)
sfx1 26 (heart)


================
COLLISIONLAYERS
================
Background
Laser
Exit
ProtectorSolo, Heart, Wall
Player, Wall, PlayerDead, LaserGV, LaserGH, Protector, victimSolo, pushBlock

======
RULES
======

(clear lasers)
late [Laser] -> []

(zip the lasers out of the guns and through the levels)
late down [LaserGV | no Laser] -> [LaserGV | LaserV]
late right [LaserGH | no Laser] -> [LaserGH | LaserH]

late down [LaserV no LaserBlock | ] -> [LaserV | LaserV]
late right [LaserH no LaserBlock | ] -> [LaserH | LaserH]

(generate overlapping lasers)
late down [LaserV no LaserBlock | LaserH] -> [LaserV | LaserB]
late down [LaserGV no LaserBlock | LaserH] -> [LaserGV | LaserB]
late right [LaserH no LaserBlock | LaserV] -> [LaserH | LaserB]
late right [LaserGH no LaserBlock | LaserV] -> [LaserGH | LaserB]

(deal with overlapping lasers)
late right [LaserB no LaserBlock | no Laser] -> [LaserB | LaserH]
late right [LaserH no LaserBlock | no Laser] -> [LaserH | LaserH]
late down [LaserB no LaserBlock | no Laser] -> [LaserB | LaserV]
late down [LaserV no LaserBlock | no Laser] -> [LaserV | LaserV]

(solo Victim can push a block)
 [ > victimSolo | pushBlock ] -> [ > victimSolo| > pushBlock]

(pushing block to switch breaks laser)
[pushBlock  laser] -> [ wall]


(if a player is over a laser, then cause them harm)
late [ PlayerFull Laser ] -> [PlayerDead Laser] sfx0

(victim solo dies in the laser)
late [ victimSolo Laser ] -> [PlayerDead Laser] sfx0

(protector levels)
[ > ProtectorSolo | ... | Heart ] -> [ | ... | ProtectorSolo ] sfx1
[ > ProtectorSolo ] -> [ ProtectorSolo]


==============
WINCONDITIONS
==============
All PlayerWin on Exit
No Heart

=======
LEVELS
=======

message then...

message I PROTECT YOU

###g###g###
#.........#
#n.......o#
#........o#
#p...#....#
#.........#
###########

message YOU SMOTHER ME

###########
#n........#
#......#..#
h..#h..#..#
#p.....#..#
#......#oo#
###########

message I DEFEND YOU

#####g#####
#.P.....n.#
#.........#
#..#...#..#
#.........#
#......oo.#
###########

message YOU SPEAK FOR ME

#####g#####
#n.......o#
#....#h...#
h....g....#
#.....#..o#
#p......#.#
###########

message WE ARE CARE FREE

#P####g##g###
#.#..#.#....#
#..........o#
h...........#
#.#h..#..#.o#
#.....#....n#
#############

message I CARRY OUR BURDENS

message before...

message I AM ALWAYS SEARCHING

###########
#l...l....#
#....l....#
#.........#
#q..l.....#
#l..l.....#
###########


message I NEVER SEE A FUTURE

###########
#.........#
#..l..q.l.#
#.l....l..#
#.ll...l.l#
#l.l...l..#
###########

message I NEVER FEEL COMFORTABLE

###########
#....l....#
#lq..l..l.#
#.l..l....#
#.l.....l.#
#....l....#
###########


message NO ONE GETS ME

###########l##l#####
#l.l...............#
#.....ll...........#
#l..l..............#
#..q..l.......l....#
#..ll..l......l....#
###########........#
###########l....l..#
###########........#
###########.l.l.l..#
####################

message I NEED CONTACT

###################
#.l...l############
#......############
#l.l..l##########l#
#l.......l.....l#.#
#....l............#
#ll..q.........l.l#
#..l.....l.......l#
#.l..l............#
###################

message I NEED VALIDATION

message before...

message I AM INDEPENDENT

###########
#.k.g.....#
#.......b.#
#.b...###.#
#.#.......#
#...h.....#
#...#...O.#
###########


message I AM STRONG


###g##g##
#.......#
#kb.b...#
#.......#
h.....#.#
#..#b#h.#
#....#..#
h....#o.#
#.......#
#########

message I NEED NO ONE

###g#######
#.o.......#
#...#.##..#
#.#..bkb.##
h...#.#.b.#
#.......#.#
#.....#...#
###########

message I ENJOY MY COMPANY

#####g#####g#####g######
#.k.....b...........o..#
#..b....#.#.......##...#
#.........b...#b..#g...#
h..........#......#....#
##.###.#######.####.#.##
h..............#h......#
####.#####.###.##.#.#.##
###.b.#....#........#..#
###.#....#b#.........b.#
##.........#.......#...#
########################

message I AM FEARLESS

##g##g#g####
#o..#.#....#
#...#.#.#..#
#..........#
#.....#..b.#
#........b.#
#..#.##.#b.#
#..#......k#
############

message I AM ALONE


message now...

###########
#...o.o...#
#.........#
#.........#
#.........#
#...n.p...#
###########

message WE DON'T SEE THINGS AS THEY ARE, WE SEE THEM AS WE ARE
message Credits
message Concept/Design/Programming/Graphics - Steven McStravog
message Design/Programming/Graphics - Darragh McLernon
message Porting/Design/Programming - Rachel Gawley
message Artwork - Ricky Woodside


title Simple Block Pushing Game
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111


Target
DarkBlue
.....
.000.
.0.0.
.000.
.....

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Player
Black Orange White Blue
.000.
.111.
22222
.333.
.3.3.

BlueCrate B
lightblue
00000
0...0
0...0
0...0
00000


OrangeCrate O
Orange
00000
0...0
0...0
0...0
00000


=======
LEGEND
=======

Crate = OrangeCrate or BlueCrate
. = Background
# = Wall
P = Player


=======
SOUNDS
=======

Crate MOVE 36772507

================
COLLISIONLAYERS
================

Background
Target
Player, Wall, Crate

======
RULES
======

[ >  Player | Crate ] -> [  >  Player | > Crate  ]


[ > OrangeCrate | OrangeCrate ] -> [ > OrangeCrate | > OrangeCrate ]
[ > OrangeCrate | BlueCrate ] -> [ > OrangeCrate | > BlueCrate ]
[ > BlueCrate | OrangeCrate ] -> [ > BlueCrate | > OrangeCrate ]
[ > BlueCrate | BlueCrate ] -> [ > BlueCrate | > BlueCrate ]

==============
WINCONDITIONS
==============

=======
LEVELS
=======

################
#..............#
#..............#
#.P.BOBOBOBOB..#
#..............#
#..............#
################



USER PROMPT:
The following PuzzleScript game code:
```plaintext
title Forest Escape
author YourName

========
OBJECTS
========

Background
green

Player
magenta black
..0..
.000.
.000.
..0..
.....

Tree
darkgreen
00000
00000
00000
00000
00000

Exit
blue
.....
.....
..0..
.....
.....

Trap
red
.0.0.
..0..
.000.
..0..
.0.0.

Wall
gray
.....
.....
.....
.....
.....

=======
LEGEND
=======

. = Background
P = Player
T = Tree
E = Exit
X = Trap
# = Wall

=========
SOUNDS
=========

startgame 26858107
endgame 14218122
endlevel 23422756
startlevel 34443107

================
COLLISIONLAYERS
================

Background
Trap
Tree
Player, Exit

======
RULES
======

[ Player | Exit ] -> [ Player | Exit ] win
[ Player | Trap ] -> restart 

==============
WINCONDITIONS
==============

All Player on Exit

=======
LEVELS
=======

# Simple introductory level
########
#......#
#..P...#
#......#
#..E...#
########

# Avoiding Traps
########
#..T...#
#..P.X.#
#..T...#
#...E..#
########

# More Complex Maze
########
#T...T.#
#..T...#
#..P.T.#
#TX..E.#
########

message Congratulations! You've escaped the forest.

```
produced the following console output:
=================================
line 12 : Was looking for color for object PLAYER, got "magenta " instead.
line 97 : Key "S" not found. Do you need to add it to the legend, or define a new object?
line 97 : Key "I" not found. Do you need to add it to the legend, or define a new object?
line 97 : Key "M" not found. Do you need to add it to the legend, or define a new object?
line 97 : Key "L" not found. Do you need to add it to the legend, or define a new object?
line 97 : Key "N" not found. Do you need to add it to the legend, or define a new object?
too many errors, aborting compilation
Errors detected during compilation; the game may not work correctly.
Return a repaired version of the code that addresses these errors. First, reason about your task and determine the best plan of action. Then, write your code. Return your code in full, inside a ```plaintext code block.