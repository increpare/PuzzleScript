SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title Extended Body Example: 1 Player, Multiple Extended Objects
author Scott Hughes

(

Usable in the case where there's only a single player that's pushing stuff around.

Example for
https://www.puzzlescript.net/Documentation/rigidbodies.html#one_many

)

=======
OBJECTS
=======

Background
white

Player
pink

Box1
red

Box2
green

Box3
blue

Box4
orange

Wall
grey

======
LEGEND
======

. = Background
@ = Player
1 = Box1
2 = Box2
3 = Box3
4 = Box4
# = Wall

Box = Box1 or Box2 or Box3 or Box4

======
SOUNDS
======

===============
COLLISIONLAYERS
===============

Background
Player, Box, Wall

=====
RULES
=====

[ > Player | Box ] -> [ > Player | > Box ]

startloop

(Propagate movements through crates of different types.)
[ moving Box1 | Box1 ] -> [ moving Box1 | moving Box1 ]
[ moving Box2 | Box2 ] -> [ moving Box2 | moving Box2 ]
[ moving Box3 | Box3 ] -> [ moving Box3 | moving Box3 ]
[ moving Box4 | Box4 ] -> [ moving Box4 | moving Box4 ]

(Extend the movements between crates of different types.)
[ > Box | Box ] -> [ > Box | > Box ]

endloop

(Just cancel the whole turn if something can't move.)
[ > Box | Wall ] -> cancel

=============
WINCONDITIONS
=============

======
LEVELS
======

################
#....###.......#
#....#.....##..#
#...........#..#
#...@..222..#..#
##.....2.......#
#...3.....1....#
#..33.....1....#
#..3.....11....#
#....4........##
#...444...##...#
#..#.....##....#
################


title Multi-word Dictionary Game
author Sarah Northway
homepage www.sarahnorthway.com

(included with permission of Sarah Northway)

========
OBJECTS
========

Background
pink

Wall
grey

Player
Blue

Won
yellow

LetterC
white black
.111.
1....
1....
1....
.111.

LetterA
white black
.111.
1...1
11111
1...1
1...1

LetterT
white black
11111
..1..
..1..
..1..
..1..

=======
LEGEND
=======

Letter = LetterA or LetterC or LetterT
. = Background
# = Wall
P = Player
W = Won
C = LetterC
A = LetterA
T = LetterT

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Won
Player, Wall, Letter

======
RULES
======

[ >  Player | Letter ] -> [  >  Player | > Letter  ]
[ <  Player | Letter ] -> [  <  Player | < Letter  ]

late right [LetterC | LetterA | LetterT ] -> [ Won LetterC | Won LetterA | Won LetterT ] message You spelled CAT!
late right [LetterA | LetterC | LetterT] -> [ Won LetterA | Won LetterC | Won LetterT ] message You spelled ACT!

==============
WINCONDITIONS
==============

Some Won

=======
LEVELS
=======

#########
#.......#
#.A..C..#
#.......#
#...P...#
#.T.....#
#########


title Love and Pieces
author lexaloffle
homepage www.lexaloffle.com

========
OBJECTS
========

Background
White LightBlue
00000
01110
01110
01110
00000


Wall
DarkBlue Black DarkGray LightGray White
23330
22300
22100
21110
11111

Player
Yellow Orange Red White LightBrown
20002
01130
01110
04110
20002

GrayBlock
Gray DarkGray Green
10001
01210
02220
01210
10001

LitBlock
Green DarkGray
00000
01110
01110
01110
00000


=======
LEGEND
=======

. = Background
# = Wall
P = Player
o = GrayBlock
Block = GrayBlock or Player

=======
SOUNDS
=======

GrayBlock MOVE 36772507

================
COLLISIONLAYERS
================

Background
Player, Wall, GrayBlock, LitBlock

======
RULES
======

[ > Player | Wall ] -> cancel
late [ Player | GrayBlock ] -> [ Player | Player ]

==============
WINCONDITIONS
==============

No GrayBlock

=======
LEVELS
=======



############
#...#......#
#..........#
#.p..o..o..#
#..........#
#..#.......#
#..........#
#......#...#
#..........#
############

############
#..........#
#..........#
#....#o....#
#..#.o.#...#
#....#.....#
#....o.....#
#.o......p.#
#..........#
############

############
#o...o.....#
#.o...o....#
#..o...o...#
#...o...o..#
#o...o...o.#
#.o...o...o#
#..o...o.p.#
#...o...o..#
############

############
#..........#
#..o....o..#
#.p#....#o.#
#..........#
#..........#
#.o#....#o.#
#..o....o..#
#..........#
############


############
#..o.......#
#.....oo...#
#...o......#
#.o#..p..o.#
#....o.....#
#..o....o..#
#o.o...#...#
#...o...o..#
############

############
#p.o.......#
#..........#
#.o..o...###
#........###
###.o......#
###......o.#
#o.....##..#
#......##.o#
############


############
#........o.#
#..o.##....#
#....o.o...#
#.#......#.#
#.#..p.o.#.#
#..o.......#
#....##....#
#.o......o.#
############


############
###........#
##....o.o..#
#....#.#...#
#...o.o.o..#
#....#.#...#
#...o.o....#
##........##
###.p....###
############


###########o
#....p....##
#....p.....#
#...ppp....#
#ppppppppp.#
#...ppp....#
#..ppppp...#
#.pp...pp..#
#.p.....p..#
############


title Multiple Patterns
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
lightgreen green
11111
01111
11101
11111
10111

Wall
brown darkbrown
00010
11111
01000
11111
00010

Player
black orange white blue
.000.
.111.
22222
.333.
.3.3.

Sumo
pink white
..0..
00000
.000.
.111.
.0.0.

=======
LEGEND
=======

. = Background
# = Wall
P = Player
S = Sumo

=======
SOUNDS
=======

Sumo MOVE 48878907

================
COLLISIONLAYERS
================

Background
Player, Wall, Sumo

======
RULES
======

[ > Player ] [ Sumo ] -> [ > Player ] [ > Sumo ] 

==============
WINCONDITIONS
==============

=======
LEVELS
=======

########
#......#
#......#
#.P..S.#
#......#
#......#
########


title It Dies In The Light
author Christopher Wells
homepage www.tophwells.com

noaction
run_rules_on_level_start
again_interval 0.05

========
OBJECTS
========

BackgroundNeutral
LIGHTGray Gray
11011
10101
01110
10101
11011

BackgroundDark
Black

Wall
Lightblue Blue
00010
11111
01000
11111
00010

LivePlayer
Black LightRed White Blue
.000.
.111.
12321
.232.
.222.

Corpse
LightGrey
.000.
.0.0.
0.0.0
..0..
.0.0.

Crate
Orange LightBrown Brown
.222.
21012
20102
21012
.222.

GoldCrate
White Yellow Orange
.222.
21012
20002
21012
.222.

GlassCrate
White
.000.
0...0
0...0
0...0
.000.

Prism
LightBlue White
.000.
00110
00010
00000
.000.

ActivePrism
LightBlue White Yellow
.000.
02120
01110
02120
.000.

Glass
White
00000
0...0
0...0
0...0
00000

BeamVert
White Yellow
.101.
.101.
.101.
.101.
.101.

BeamHor
White Yellow
.....
11111
00000
11111
.....

BeamCross
White Yellow
.101.
11011
00000
11011
.101.

Shadow
Purple
0.0.0
.0.0.
0.0.0
.0.0.
0.0.0

TempShadow
Purple
0.0.0
.0.0.
0.0.0
.0.0.
0.0.0

=======
LEGEND
=======

. = BackgroundNeutral
# = Wall
P = LivePlayer
C = Crate
G = GoldCrate
S = Shadow
X = Prism
O = Glass

Background = BackgroundNeutral or BackgroundDark
Player = LivePlayer or Corpse
Light = BeamVert or BeamHor or BeamCross
Hlight = BeamHor or BeamCross
Vlight = BeamVert or BeamCross
Opaque = Player or Crate or Wall or GoldCrate
Pushable = Crate or GoldCrate or Prism or GlassCrate


=======
SOUNDS
=======

SFX0 93002904

================
COLLISIONLAYERS
================

Background
BeamVert, BeamHor, BeamCross, Shadow, TempShadow
Player, Corpse, Wall, Crate, GoldCrate, GlassCrate, Prism, ActivePrism, Glass

======
RULES
======

[> Corpse] -> RESTART
[Light] -> []
[ActivePrism] -> [Prism]
[ >  Player | Pushable ] -> [  >  Player | > Pushable  ]
late HORIZONTAL [GoldCrate|no Opaque no Light] -> [GoldCrate | BeamHor]
late VERTICAL [GoldCrate|no Opaque no Light] -> [GoldCrate | BeamVert]
late VERTICAL [GoldCrate|no Opaque BeamHor] -> [GoldCrate | BeamCross]
late HORIZONTAL [Hlight|no Opaque no Light] -> [Hlight|BeamHor]
+ late HORIZONTAL [Hlight|no Opaque BeamVert] -> [Hlight|BeamCross]
+ late VERTICAL [Vlight|no Opaque no Light] -> [Vlight|BeamVert]
+ late VERTICAL [Vlight|no Opaque BeamHor] -> [Vlight|BeamCross]
+ late [Light Prism] ->[BeamCross ActivePrism]
late [Shadow Pushable] -> [Pushable]
late [TempShadow] -> [Shadow]
late [Shadow | no Light no Wall no Pushable no Glass no Shadow] -> [shadow | Tempshadow] again
late [Shadow] -> [Shadow BackgroundDark]
late [TempShadow] -> [TempShadow BackgroundDark]
late [no Shadow no TempShadow] -> [no Shadow BackgroundNeutral]
late [Shadow Player] -> [Shadow Corpse]

==============
WINCONDITIONS
==============

no Shadow

=======
LEVELS
=======

......####.
..#####ss#.
###ssssss#.
#..ssscss##
#..#s#s#ss#
#.g#s#ssss#
#p.#s#ssss#
#..css#sss#
###########

........########.
........#...#.C#.
...######...GC.##
...#..CsssssO.C.#
...#P.Csss#sO.CC#
...#..Csss#sO#..#
########ss#s....#
#ssssssOss#s#####
#sssssssss###....
#########s#......
........###......

##########
###G#G#G##
##P......#
#G.......#
##..C....#
#G.......#
##..C....#
#G.......#
##......S#
##########

........########
........#......#
#########..#o#.#
#........gooxo.#
#g#####c#.sso#s#
#.ssssss#.ss.ss#
##soooss#.ss##s#
##c.p.c###ss#ss#
##.....#ssss#ss#
#...g.......#ss#
#########.xx#ss#
........##sssss#
.........#######

MESSAGE Earth is safe once again.


title Dungeon Janitor
author Farbs
homepage www.farbs.org
noundo
noaction
key_repeat_interval 0.1

========
OBJECTS
========

Background
DARKBLUE BLACK
11111
10000
10000
10000
10000

Entry
LIGHTBROWN BROWN DARKBROWN GRAY
30103
10101
10121
10101
10101

ExitClosed
LIGHTBROWN BROWN DARKBROWN GRAY
30103
10101
10121
10101
10101

ExitOpen
GRAY BLACK DARKBLUE
01110
11111
11111
11111
12221

Slime
LIGHTGREEN GREEN DARKGREEN
.....
.....
.....
.....
.....

Head
LIGHTGREEN GREEN DARKGREEN BLACK
.000.
03130
11111
23332
.222.

SlimeU
LIGHTGREEN GREEN DARKGREEN
11111
21112
.222.
.....
.....

SlimeD
LIGHTGREEN GREEN DARKGREEN
.....
.....
.000.
01110
11111

SlimeUD
LIGHTGREEN GREEN DARKGREEN
11111
11111
11111
11111
11111

SlimeL
LIGHTGREEN GREEN DARKGREEN
00...
110..
111..
112..
22...

SlimeR
LIGHTGREEN GREEN DARKGREEN
...00
..011
..111
..211
...22

SlimeLR
LIGHTGREEN GREEN DARKGREEN
00000
11111
11111
11111
22222

SlimeUL
LIGHTGREEN GREEN DARKGREEN
11111
11112
1112.
112..
22...

SlimeUR
LIGHTGREEN GREEN DARKGREEN
11111
21111
.2111
..211
...22

SlimeULR
LIGHTGREEN GREEN DARKGREEN
11111
11111
11111
11111
22222

SlimeDL
LIGHTGREEN GREEN DARKGREEN
00...
110..
1110.
11110
11111

SlimeDR
LIGHTGREEN GREEN DARKGREEN
...00
..011
.0111
01111
11111

SlimeDLR
LIGHTGREEN GREEN DARKGREEN
00000
11111
11111
11111
11111

SlimeUDLR
LIGHTGREEN GREEN DARKGREEN
11111
11111
11111
11111
11111

SlimeSolo
LIGHTGREEN GREEN DARKGREEN
.000.
01110
11111
21112
.222.

Wall
LIGHTGREY GREY
11111
01000
01000
11111
00010

PlayerA
Black Orange White Blue Brown
.....
.11..
2224.
333.4
3.322

PlayerB
Black Orange White Blue Brown
.....
.11..
.4222
4.333
223.3

Temp
PINK
00000
00000
00000
00000
00000

=======
LEGEND
=======

. = Background
# = Wall
E = Wall AND Entry
P = PlayerA
O = Slime AND Head
X = Wall AND ExitClosed

SlimeDecal = SlimeU OR SlimeD OR SlimeUD OR SlimeL OR SlimeR OR SlimeLR OR SlimeUL OR SlimeUR OR SlimeULR OR SlimeDL OR SlimeDR OR SlimeDLR OR SlimeUDLR OR SlimeSolo
Player = PlayerA OR PlayerB

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Slime
SlimeU, SlimeD, SlimeUD, SlimeL, SlimeR, SlimeLR, SlimeUL, SlimeUR, SlimeULR, SlimeDL, SlimeDR, SlimeDLR, SlimeUDLR, SlimeSolo, ExitOpen
Player, Wall, PlayerA, PlayerB, Temp
Head, Entry, ExitClosed

======
RULES
======

(Stomp Heads)
[ > Player | Head ] -> [ > Player | NO Head ]
[ > Player | Slime ] -> [ > Player | NO Slime ]

(New Head)
[ Head ] -> []
RANDOM [ Slime NO Player ] -> [ Slime Head ]

(Grow Slime)
[ Head | NO Slime NO Wall NO Player ] -> [ Head | Slime ]

(Clear Slime from under player)
[ > Player | Slime ] -> [ > Player | NO Slime ]
LATE [ Player Slime ] -> [ Player NO Head ]

(Make slime pretty)
[ SlimeDecal ] ->[ ]
VERTICAL [ Slime | Slime | Slime ] -> [ Slime | Slime SlimeUD | Slime ]
UP [ Slime NO SlimeUD | Slime ] -> [ Slime SlimeU | Slime ]
DOWN [ Slime NO SlimeUD | Slime ] -> [ Slime SlimeD | Slime ]
HORIZONTAL [ Slime | Slime NO SlimeU NO SlimeD NO SlimeUD | Slime ] -> [ Slime | Slime SlimeLR | Slime ]
LEFT [ Slime NO SlimeU NO SlimeD NO SlimeUD NO SlimeLR | Slime ] -> [ Slime SlimeL | Slime ]
RIGHT [ Slime NO SlimeU NO SlimeD NO SlimeUD NO SlimeLR | Slime ] -> [ Slime SlimeR | Slime ]
HORIZONTAL [ Slime | Slime SlimeU | Slime ] -> [ Slime | Slime SlimeULR | Slime ]
LEFT [ Slime SlimeU | Slime ] -> [ Slime SlimeUL | Slime ]
RIGHT [ Slime SlimeU | Slime ] -> [ Slime SlimeUR | Slime ]
HORIZONTAL [ Slime | Slime SlimeD | Slime ] -> [ Slime | Slime SlimeDLR | Slime ]
LEFT [ Slime SlimeD | Slime ] -> [ Slime SlimeDL | Slime ]
RIGHT [ Slime SlimeD | Slime ] -> [ Slime SlimeDR | Slime ]
[ Slime NO SlimeDecal ] -> [ Slime SlimeSolo ]

( Shut the door if slime still around)
( Have to open it first unfortunately )
[ ExitClosed Wall ] -> [ ExitOpen ]
[ ExitOpen ][ Slime ] -> [ ExitClosed Wall ][ Slime ]

(Player Anim)
[ LEFT PlayerB ] -> [ LEFT PlayerA ]
[ RIGHT PlayerA ] -> [ RIGHT PlayerB ]
LATE [ PlayerA ] -> [ Temp ]
LATE [ PlayerB ] -> [ PlayerA ]
LATE [ Temp ] -> [ PlayerB ]
==============
WINCONDITIONS
==============

ALL Player ON ExitOpen

=======
LEVELS
=======

MESSAGE It's Thursday.
MESSAGE Today I mop the slime pit.


##X##
##.##
##.##
##O##
##.##
##P##
##E##

MESSAGE Damn slime sticking to my shoes.

..####..
..#O.#..
###..###
#......#
#P#..#.#
#E#..#X#
..####..

MESSAGE Goes SHLUCK SHCLUK when I walk.

######X#############
###......#...#...###
###.##.#...#...#...#
##.....###########.#
#..#.#.....#.......#
#.##.###.#.##.######
#......#.#.#.O.....#
#.####.#.#.#.#####.#
#P.....#.#.........#
#E##################

MESSAGE Last room before home.
MESSAGE This one can take a while.

##########X#########
#..................#
#..................#
#..#######.######..#
#..#.#...#.#.#..#..#
#..#...#.#.#.#..#..#
#..#.....#.#.#..#..#
#..##....#.#...##..#
#..#............#..#
#..#......O.....#..#
#..#............#..#
#..#............#..#
#..##############..#
#.........P........#
##########E#########

MESSAGE Done for the day. Back tomorrow.
MESSAGE Fridays is rat scrubbing day.

(
level ideas
push battery horizontally
have to assemble and then disassemble a circuit, in order to complete it
add a piece to a circut, then break the circuit from another point
level that starts with a closed circuit
level with very dangerous + block
)
title Robot Arm
author increpare
homepage www.increpare.com

run_rules_on_level_start
color_palette c64

run_rules_on_level_start

norepeat_action

========
OBJECTS
========

Background .
darkblue

Player P
Black orange grey Blue
.111.
.111.
22222
13331
.3.3.

R0_Up 0
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R1_Up 1
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R2_Up 2
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Right
grey lightgrey
.111.
10001
10001
10001
.111.

R3 3
grey lightgrey
.....
..0..
.010.
..0..
.....

Connector_Up
grey lightgrey
.101.
.111.
.....
.....
.....

Connector_Down
grey lightgrey
.....
.....
.....
.111.
.101.

Connector_Left
grey lightgrey
.....
11...
01...
11...
.....

Connector_Right
grey lightgrey
.....
...11
...10
...11
.....

Moved
transparent

Parent
transparent

GrandParent
transparent

NewRot
transparent

NewRot2
transparent

force
transparent

explosion
red yellow
.101.
10101
01010
10101
.101.

explosionb
red yellow
.101.
10101
01010
10101
.101.

explosion2
yellow red
.101.
10101
01010
10101
.101.

Wall #
darkgrey grey lightgrey
00000
01110
01010
01110
00000

water ,
blue lightblue
00000
00010
00000
00000
01000

Fruit F
Red Green LightRed
..1..
.000.
00020
00000
.000.


FruitPicked G
Red Green LightRed grey grey
..4..
.030.
43334
00300
.040.

DeadFruit
black black black black black
..4..
.030.
43334
00300
.040.

EndPoint E
darkgreen Yellow black green
30003
02220
02220
02220
30003


=======
LEGEND
=======
R0 = R0_up or R0_down or R0_left or R0_right
R1 = R1_up or R1_down or R1_left or R1_right
R2 = R2_up or R2_down or R2_left or R2_right
RobotPiece = R0 or R1 or R2 or R3
* = RobotPiece or Player
connector = connector_up or connector_down or connector_left or connector_right

=======
SOUNDS
=======

sfx0 43004308 (explosion)
sfx1 69392707
sfx2 57370907 (push machine)
sfx3 62083508 (rotate machine)
sfx4 90419908 (grab)
sfx5 50782902 (drop in hole)
sfx6 76878101 (empty grab)
sfx7 13941101 (dead fruit)
sfx8 42541302 (release)
Player move 88476108
startgame 30513908
endlevel 5524308
endgame 5524308
showmessage 41852908
closemessage 41852908

================
COLLISIONLAYERS
================
Background
water
EndPoint
Player
Moved
Fruit
FRUITPICKED
deadfruit
R0_up, R0_down, R0_left, R0_right
R1_up, R1_down, R1_left, R1_right
R2_up, R2_down, R2_left, R2_right
connector_up
connector_down
connector_left
connector_right
R3
parent
GrandParent
newrot
newrot2
force
wall
explosion, explosion2, explosionb

======
RULES
======

[ connector ] -> [ ]

[ > player | fruit ] -> cancel

[ > player | water ] -> cancel

[ > player | ] -> [ > player | > force ]

[ > player | robotpiece | wall ] -> cancel

(place movement arrows)
up [ R0_Up | ] -> [ up R0_Up | up Parent ]
up [ R1_Up | ] -> [ up R1_Up | up Parent ]
up [ R2_Up | ] -> [ up R2_Up | up Parent ]

down [ R0_down | ] -> [ down R0_down | down Parent ]
down [ R1_down | ] -> [ down R1_down | down Parent ]
down [ R2_down | ] -> [ down R2_down | down Parent ]

left [ R0_left | ] -> [ left R0_left | left Parent ]
left [ R1_left | ] -> [ left R1_left | left Parent ]
left [ R2_left | ] -> [ left R2_left | left Parent ]

right [ R0_right | ] -> [ right R0_right | right Parent ]
right [ R1_right | ] -> [ right R1_right | right Parent ]
right [ R2_right | ] -> [ right R2_right | right Parent ]


( force propagation like this isn't very nice )
( [ > force < parent | ] -> [ < parent | > force ] )

[ R3 > force < parent ] [ > R0 ] [ v R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ v R1 ] [ r2 > force ]
[ R3 > force < parent ] [ > R0 ] [ ^ R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ ^ R1 ] [ r2 > force ]

[ > force < parent no R0] [R0]-> [ < parent ] [ > force R0 ]
[ > force R3 perpendicular parent ] [ R2 < parent ] [ R0 ] -> [ R3 perpendicular parent ] [ R2 < parent ] [ > force R0 ]

[ > force R2 perpendicular parent ] [ R1 < parent ] [ R0 ] -> [ R2 perpendicular parent ] [ R1 < parent ] [ > force R0 ]


[ > force moving R0 | ] -> [ | moving R0] sfx2

[ > force moving R1 perpendicular parent ] [ R0 ] -> [ moving R1 perpendicular parent ] [ > R0 ] sfx3
[ > force moving R2 perpendicular parent ] [ R1 ] -> [ moving R2 perpendicular parent ] [ > R1 ] sfx3
[ > force 		R3 perpendicular parent ] [ R2 ] -> [ R3 perpendicular parent ] [ > R2 ] sfx3


(rebuild arm)

(add new parents)

[ > R1 ] [ R2 ] -> [ > R1 ] [ R2 > NewRot ]
[ > R0 ] [ R1 ] [ R2 ] -> [ > R0 ] [ R1 > NewRot ] [ R2 > NewRot2 ]

[ > Parent R1 ] [ R2 ] -> [ > Parent R1 ] [ > GrandParent R2 ]

[ ^ Parent > NewRot > RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent > NewRot v RobotPiece ] -> [ < RobotPiece ]
[ ^ Parent > NewRot < RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent > NewRot ^ RobotPiece ] -> [ > RobotPiece ]

[ ^ Parent < NewRot > RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent < NewRot v RobotPiece ] -> [ > RobotPiece ]
[ ^ Parent < NewRot < RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent < NewRot ^ RobotPiece ] -> [ < RobotPiece ]


[ ^ GrandParent > NewRot2 > R2 ] -> [ V R2 ]
[ ^ GrandParent > NewRot2 v R2 ] -> [ < R2 ]
[ ^ GrandParent > NewRot2 < R2 ] -> [ ^ R2 ]
[ ^ GrandParent > NewRot2 ^ R2 ] -> [ > R2 ]

[ ^ GrandParent < NewRot2 > R2 ] -> [ ^ R2 ]
[ ^ GrandParent < NewRot2 v R2 ] -> [ > R2 ]
[ ^ GrandParent < NewRot2 < R2 ] -> [ V R2 ]
[ ^ GrandParent < NewRot2 ^ R2 ] -> [ < R2 ]

[ NewRot ] -> [ ]
[ NewRot2 ] -> [ ]
[ Parent ] -> [ ]
[ GrandParent ] -> [ ]


(change sprites)
[ up R0 ] -> [ up R0_Up ]
[ up R1 ] -> [ up R1_Up ]
[ up R2 ] -> [ up R2_Up ]

[ down R0 ] -> [ down R0_down ]
[ down R1 ] -> [ down R1_down ]
[ down R2 ] -> [ down R2_down ]

[ left R0 ] -> [ left R0_left ]
[ left R1 ] -> [ left R1_left ]
[ left R2 ] -> [ left R2_left ]

[ right R0 ] -> [ right R0_Right ]
[ right R1 ] -> [ right R1_Right ]
[ right R2 ] -> [ right R2_Right ]

(work from the base up when placing)
up [ up R0 | no R1 ] [ moving R1 ] -> [ up R0 | moving R1 ] [ ]
down [ down R0 | no R1 ] [ moving R1 ] -> [ down R0 | moving R1 ] [ ]
left [ left R0 | no R1 ] [ moving R1 ] -> [ left R0 | moving R1 ] [ ]
right [ right R0 | no R1 ] [ moving R1 ] -> [ right R0 | moving R1 ] [ ]

up [ up R1 | no R2 ] [ moving R2 ] -> [ up R1 | moving R2 ] [ ]
down [ down R1 | no R2 ] [ moving R2 ] -> [ down R1 | moving R2 ] [ ]
left [ left R1 | no R2 ] [ moving R2 ] -> [ left R1 | moving R2 ] [ ]
right [ right R1 | no R2 ] [ moving R2 ] -> [ right R1 | moving R2 ] [ ]


up [ up R2 | no R3 ] [ R3 ] -> [ up R2 | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ down R2 | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ left R2 | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ right R2 | R3 ] [ ]




up [ up R2 | no R3 ] [ R3 ] -> [ R2_up | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ R2_down | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ R2_left | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ R2_right | R3 ] [ ]


[ > RobotPiece no moved ] -> [ RobotPiece ]


up [ R0_Up | ] -> [ R0_Up connector_up | connector_down ]
up [ R1_Up | ] -> [ R1_Up connector_up | connector_down ]
up [ R2_Up | ] -> [ R2_Up connector_up | connector_down ]

down [ R0_down | ] -> [ R0_down connector_down | connector_up ]
down [ R1_down | ] -> [ R1_down connector_down | connector_up ]
down [ R2_down | ] -> [ R2_down connector_down | connector_up ]

left [ R0_left | ] -> [ R0_left connector_left | connector_right ]
left [ R1_left | ] -> [ R1_left connector_left | connector_right ]
left [ R2_left | ] -> [ R2_left connector_left | connector_right ]

right [ R0_right | ] -> [ R0_right connector_right | connector_left ]
right [ R1_right | ] -> [ R1_right connector_right | connector_left ]
right [ R2_right | ] -> [ R2_right connector_right | connector_left ]

[RobotPiece Wall no explosion no explosion2 ] -> [ RobotPiece Wall explosion ] sfx0

[ R0 R2 no explosion no explosion2] -> [ R0 R2 explosion ] sfx0
[ R0 R3 no explosion no explosion2 ] -> [ R0 r3 explosion ] sfx0
[ R1 R3 no explosion no explosion2 ] -> [ R1 R3 explosion ] sfx0

[ explosion2 ] -> [ explosionb ] again
[ explosion ] -> [ explosion2] again
[ explosionb ] -> [explosion] again

[ > player  | wall ] -> cancel

[FruitPicked ] [ R3 no FruitPicked ] -> [ ] [ R3 FruitPicked ]

[ action player ] [ R3 Fruit no fruitpicked ] -> [ player ] [ R3 Fruitpicked] sfx4
[ action player ] [ R3 fruitpicked no fruit ] -> [ player ] [ r3 fruit ] sfx8

[action player ] [ r3 no fruit no fruitpicked ] -> sfx6


[ fruit endpoint ] -> [endpoint] sfx5
[ fruit water ] -> [ deadfruit water ] sfx7
late [R0 water ] -> cancel
[R0 fruit ] -> cancel

==============
WINCONDITIONS
==============

no fruit
no fruitpicked
no deadfruit

=======
LEVELS
=======

message press x to grip and ungrip the mechanical arm
message put fruit in hole

message Level 1 of 3

###################
###################
###################
###..,........,.###
###..,...3....,.###
###..,...2....,.###
###.F,.E.1.,,,F,###
###..,...0....,.###
###..,..P.....,.###
###..,........,.###
###################
###################
###################

message Level 2 of 3

##############
##############
##############
###..3.....###
###..2.....###
###..1.,,,,###
###.E0.,...###
###....,FF.###
###.P..,...###
##############
##############
##############

message Level 3 of 3

###################
###################
###################
########........###
###..3.#...##.f.###
###..2..........###
###..1...#....#.###
###.e0..........###
###..p..#...#.f.###
#########.......###
###################
###################
###################

message congratulations


title The Legend of Zokoban
author Joshua Minor
homepage pixelverse.org
flickscreen 9x7

========
OBJECTS
========

Background 
yellow orange
00000
01000
00001
00100
10000

Water 
blue lightblue
00000
01000
00001
00100
10000

Cave 
DarkBlue
00000
00000
00000
00000
00000

Goal 
DarkBlue Red
00000
00000
00100
00000
00000

RockWall 
BROWN Orange
01110
10000
10010
10000
00100

StoneWall 
darkgrey grey
01110
10000
10010
10000
00100

PlayerWithoutSword
GREEN lightgreen 
.00..
00000
.000.
.111.
00.00

PlayerWithSword
GREEN lightgreen white grey
.002.
00020
.0222
.110.
00.00

Sword 
grey white 
..1..
..1..
.111.
..0..
.....

Block  
BROWN Orange darkgrey
.111.
10001
10002
10002
.222.

EasyBaddie
white red 
.111.
10101
11111
11111
11.11

Money
white lightblue
..1..
.001.
10111
.111.
..1..

=======
LEGEND
=======

Wall = StoneWall or RockWall
Solid = Wall or Block or Water
Player = PlayerWithoutSword or PlayerWithSword
Obstacle = Wall or Block or Player or Water
Baddie = EasyBaddie

. = Background
# = RockWall
S = StoneWall
P = PlayerWithoutSword
* = Block
@ = Block and Cave
O = Cave
w = Water
1 = EasyBaddie
+ = Sword
G = Goal

=======
SOUNDS
=======

StartLevel 40430108 (music-ish)
SFX0 16358103 (power up)
SFX1 84057304 (push)
SFX2 74654508 (stairs)
SFX3 21293301 (fight)
SFX4 49521903 (hurt)
SFX5 47598700 (money)
ShowMessage 82693708 (you win!)

================
COLLISIONLAYERS
================

Background
Cave, Goal
Player, Wall, Block, Water, EasyBaddie
Sword, Money

======
RULES     
======     

(baddies move at random)
[ Stationary Baddie ] -> [ RandomDir Baddie ]

(player can push blocks)
[ > Player | Block ] -> [ > Player | > Block ] SFX1

(blocks pushed into water become land)
[ > Block | Water ] -> [ | ]

(baddies can attack the player w/o sword)
[ > Baddie | Player No Sword ] -> SFX4

(player can pick up sword)
([ > Player | Sword ] -> [ | Player Sword ] SFX0)
[ PlayerWithoutSword Sword ] -> [ PlayerWithSword ] SFX0

(player with sword can kill baddies & leave money)
[ > PlayerWithSword | Baddie ] -> [ PlayerWithSword | Money ] SFX3
(sword moves with player)
([ > Player Sword ] -> [ > Player > Sword ])
(sword doesn't move into obstacles)
([ > Sword | Stationary Obstacle ] -> [ Sword | Stationary Obstacle ])

(player can pick up money)
[ > Player | Money ] -> [ | Player ] SFX5

(blocks pushed into caves, teleport to other end of cave)
random [ Moving Block Cave | ... | Cave ] -> [ Cave | ... | Block Cave ]
(blocks sitting on cave exits will roll aside to let player follow them)
late random [ Block Cave | No Obstacle ] -> [ Cave | Block ]
(players can enter caves - teleporting to orthogonally matching cave)
late random [ Player Cave | ... | Cave ] -> [ Cave | ... | Player Cave ] SFX2
(sword follows player through the cave)
(late random [ Sword Cave | ... | Cave ] -> [ Cave | ... | Sword Cave ])


==============
WINCONDITIONS
==============

All Player on Goal     

=======     
LEVELS
=======

sssssssss#################wwwwwwwwww
ss.s1s..s#1#####.##..1..1.wwwwww..ww
s.......s#.#####.##.#.#.#.wwwww..*.w
s..*....o#.##o##.............ww....w
s.s....ss#..........#.*.#....ww..1.w
sss.s.sss##...............wwwwww..ww
sssssssss#####..#####.....wwwwwwwwww
sssssssss#####..#####.....wwwwwwwwww
ss1...sss#####..####.....wwww.....ww
s......os##o#....##...#.1www..s.s..w
s..+...ss#.......##*......ww...g...w
ss.....ss#...p..........#.ww..s.s.1w
ssss..sss##.....###..#.1..www..1..ww
sssssssss#################wwwwwwwwww

message Congratulations!

USER PROMPT:
The following PuzzleScript game code:
```plaintext
title Time Trinkle
author YourName
homepage www.example.com

========
OBJECTS
========

Background
Black
.....
.....
.....
.....
.....

TilePlain
Gray LightGray
11111
10001
10001
10001
11111

TileFuture
Blue LightBlue
11111
10001
10001
10001
11111

TilePast
Green LightGreen
11111
10001
10001
10001
11111

TimeMachine
Yellow
.....
..0..
..0..
..0..
.....

Player
Red
.....
..0..
.000.
.....
.....

=======
LEGEND
=======

. = Background
P = Player
1 = TilePlain
2 = TileFuture
3 = TilePast
! = TimeMachine

======
SOUNDS
======

flip 12345678

================
COLLISIONLAYERS
================

Background
TilePlain, TileFuture, TilePast
TimeMachine
Player

======
RULES
======

[ > Player | TilePlain ] -> [ > Player | TileFuture ] playSound flip
[ > Player | TileFuture ] -> [ > Player | TilePast ] playSound flip
[ > Player | TilePast ] -> [ > Player | TilePlain ] playSound flip

==============
WINCONDITIONS
==============

All TimeMachine on TileFuture

=======
LEVELS
=======

#########
#.......#
#.......#
#P.1.2.3#
#...!...#
#.......#
#.......#
#########

message Welcome to Time Trinkle! Flip tiles to synchronize time and solve the puzzle.

```
produced the following console output:
=================================
line 72 : unexpected sound token "flip".
line 87 : Name "playsound", referred to in a rule, does not exist.
line 87 : Name "flip", referred to in a rule, does not exist.
line 88 : Name "playsound", referred to in a rule, does not exist.
line 88 : Name "flip", referred to in a rule, does not exist.
line 89 : Name "playsound", referred to in a rule, does not exist.
too many errors, aborting compilation
Errors detected during compilation; the game may not work correctly.
Return a repaired version of the code that addresses these errors.  The game should be a simplified `demake` of the following game idea: **Time Trinkle:** Manipulate time by flipping tiles forward or backward, solving paradox puzzles to restore history in a fractured world.. Return your code in full, inside a ```plaintext code block.