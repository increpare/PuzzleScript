SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title Simple Action Example
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Player
Black Orange White Blue
.000.
.111.
22222
.333.
.3.3.


Blood
DarkRed red white
.01.0
.1202
2.0.1
02.1.
.1.0.

Sheep O
black white gray
..11.
01111
01112
.212.
.0.0.


=======
LEGEND
=======

. = Background
# = Wall
P = Player


=======
SOUNDS
=======


Sheep Create 76935307
SFx0 52519108

================
COLLISIONLAYERS
================

Background
Blood
Player, Wall, Sheep

======
RULES
======

random [ no Sheep ] -> [ Sheep ] again

==============
WINCONDITIONS
==============

=======
LEVELS
=======

#################
#...............#
#...............#
#...............#
#...............#
#.......P.......#
#...............#
#...............#
#...............#
#################



title Heroes of Sokoban III: The Bard and The Druid
author Jonah Ostroff
text_color yellow
key_repeat_interval 0.25
run_rules_on_level_start

========
OBJECTS
========

Background
#989898 #C8C8C8
00000
00100
00000
00010
00000

Goal
Brown Yellow
.000.
00000
00010
00000
00000

Wall
Darkgrey #222222
01000
11111
00010
00010
11111

Fighter (Warrior sounds better in-game, but I want different abbreviations for the classes in the editor.)
#FF4444 Pink DarkBrown
.000.
.111.
00000
.000.
.2.2.

Wizard
#2266FF Pink
.000.
.010.
00000
.000.
00000

Thief
#66DD66 Pink DarkBrown
.000.
.010.
00000
.0.0.
.0.0.

Priest
#FFFFAA Pink
.000.
.111.
00000
.000.
00000

Bard
#8800FF #884400 #444444
.222.
.111.
00000
.000.
.0.0.

Druid
#FF8800 Pink DarkBrown
.212.
.111.
00000
.000.
00000

SFighter
#880000 Pink DarkBrown
.000.
.111.
00000
.000.
.2.2.

SWizard
#000088 Pink
.000.
.010.
00000
.000.
00000

SThief
#006600 Pink DarkBrown
.000.
.010.
00000
.0.0.
.0.0.

SPriest
#B8B800 Pink
.000.
.111.
00000
.000.
00000

SBard
#440088 #884400 #444444
.222.
.111.
00000
.000.
.0.0.

SDruid
#884400 Pink DarkBrown
.212.
.111.
00000
.000.
00000

Crate
Orange #552200
.111.
10001
10001
10001
.111.

YellowSwitch
Yellow Black
.....
.111.
.101.
.111.
.....

YellowOpen
Yellow
0...0
.....
.....
.....
0...0

YellowDoor
Yellow #AA7722
01010
10001
00000
10001
01010

PurpleSwitch
#6611CC Black
.....
.111.
.101.
.111.
.....

PurpleDoor
#6611CC #220088
01010
10001
00000
10001
01010

PurpleOpen
#6611CC
0...0
.....
.....
.....
0...0

MonsterDoor
DarkGrey #222222 Red
21002
22122
20212
20012
21112

Warpball
Blue

ShadowDoor
Purple

Goblin
Green DarkBrown DarkGreen
0.2.0
00000
..0..
.111.
.1.1.

Dying
White

Saved
#D8D800
..0..
.000.
..0..
..0..
.....

HasSavedDoor
Yellow
.....
.....
.....
.....
.....

Corpse
#CCC
.000.
.000.
00000
.0.0.
.0.0.

Note
#8800FF
.....
..00.
.00..
.00..
.....

=======
LEGEND
=======

Player = Fighter or Wizard or Thief or Priest or Bard or Druid
SPlayer = Swizard or Sthief or SFighter or SPriest or SBard or SDruid
Hero = Player or Splayer
Healer = Priest or SPriest (Unlike the other heroes, priests must function even when inactive. "Healer" is the generic term for an active or inactive priest.)
ClosedDoor = PurpleDoor or YellowDoor or MonsterDoor
OpenDoor = YellowOpen or PurpleOpen
Switch = PurpleSwitch or YellowSwitch
Monster =  Goblin
Moveable = Crate or SPlayer or Monster
Static = Wall or ClosedDoor
Weighing = Crate or Hero or Monster or Wall
Vulnerable = Hero or Monster
Invulnerable = Crate or Static
. = Background
# = Wall
F = Fighter
W = Wizard
T = Thief
P = Priest
B = Bard
D = Druid
1 = SFighter
2 = SThief
3 = SWizard
4 = SPriest
5 = SBard
6 = SDruid
* = Crate
G = Goal
[ = YellowDoor
] = PurpleDoor
{ = YellowSwitch
} = PurpleSwitch
O = Goblin
M = MonsterDoor

=======
SOUNDS
=======

Moveable move 82056307
Sfx0 21221308 (teleport)
Endlevel 36315908
Sfx1 66399906 (switch player)
Sfx2 92172900 (close door)
Sfx3 15129100 (open door)
Sfx4 69860105 (saved)
Sfx5 63194902 (kill enemy)
Sfx6 81996702 (dying player)
Sfx7 20187909 (Bard leading)
Sfx8 93615108 (Transmutation)
EndGame 86793500

================
COLLISIONLAYERS
================

Background
Warpball, Dying
Goal, Switch, OpenDoor, ShadowDoor, HasSavedDoor
ClosedDoor, Hero, Crate, Wall, Monster, Corpse
Saved
Note

======
RULES
======
[Saved] [Goal] -> [] [HasSavedDoor] (Remembering whether we saved someone last round by temporarily changing some door to a HasSavedDoor. This is purely for sound effects purposes.)

[Corpse] -> Restart

[ >  Fighter | Moveable ] -> [  >  Fighter | > Moveable  ]
[ > Moveable | Moveable ] [ Fighter] -> [ > Moveable | > Moveable ] [ Fighter] (Fighters push.)

[ < Thief | Moveable ] -> [ < Thief | < Moveable ] (Thieves pull.)

[ > Wizard ] -> [ Wizard > Warpball]
[ > Warpball | no Moveable no Static] -> [ | > Warpball]
[ > Warpball | Static] [Wizard] -> [ | Static ] [> Wizard]
[ > Warpball | Moveable ] [Wizard] -> [ | Wizard Sfx0] [Moveable]
[ > Warpball] [Wizard] -> [] [> Wizard]
(Wizards telexport. What they really do is shoot a "warpball", which causes them to move normally if it hits a wall or the edge of the screen and warp if it hits something they can warp with.)

(Druid does his thing. Warpball gets reused as a placeholder here. That's gonna happen a lot.)
[> Druid | Crate] -> [Druid | Wall Sfx8]
[> Druid | Monster] -> [Druid | Wall Sfx8]
[> Druid | Wall] -> [Druid | Crate Sfx8]
[> Druid | Healer] -> [Druid | Healer Saved]
[> Druid | Hero] -> [Druid | Hero Warpball]
[Warpball | Healer] -> [Saved | Healer]
[Warpball Hero] -> [Wall Sfx8]
(What strategic purpose could it serve for healers to protect against petrification? None, but it's fun.)

(I mean, theoretically you could write some horrid dragon breath timing puzzle where the ability to delay an extra turn without moving or switching characters is necessary in order to let you move someone else at the correct moment, but even if dragons still existed, that sounds like a really gross level.)

(Bard moves stuff. Reusing "WarpBall" for totally different purpose, so we can cancel the move if he doesn't move.)
[> Bard no Note] -> [> Note > Bard WarpBall]
[> Note] [Note] -> [> Note] [> Note]
[> Note Moveable | no Static no Moveable no Bard] -> [| Moveable Sfx7]
+[> Note Bard WarpBall| no Static no Moveable no Bard] -> [| Bard]

(Why are we doing this pseudo-movement instead of using the built-in version? Because using movement directions makes the note-adding stuff way easier below, and you can't use movement directions in the LATE phase, so the actual moving has to be done before then.)

[WarpBall] -> Cancel
[Note] -> []

(The following mess is for changing characters. But at least it's less messy than before. Thanks to Stephen for spotting my silly redundancies.)
[ Action Fighter] [SThief] -> [SFighter] [Thief Sfx1]
[ Action Thief] [SWizard] -> [SThief] [Wizard Sfx1]
[ Action Wizard] [SPriest] -> [SWizard] [Priest Sfx1]
[ Action Priest] [SBard] -> [SPriest] [Bard Sfx1]
[ Action Bard] [SDruid] -> [SBard] [Druid Sfx1]
[ Action Druid] [SFighter] -> [SDruid] [Fighter Sfx1]

[ Action Fighter] [SWizard] -> [SFighter] [Wizard Sfx1]
[ Action Thief] [SPriest] -> [SThief] [Priest Sfx1]
[ Action Wizard] [SBard] -> [SWizard] [Bard Sfx1]
[ Action Priest] [SDruid] -> [SPriest] [Druid Sfx1]
[ Action Bard] [SFighter] -> [SBard] [Fighter Sfx1]
[ Action Druid] [SThief] -> [SDruid] [Thief Sfx1]

[ Action Fighter] [SPriest] -> [SFighter] [Priest Sfx1]
[ Action Thief] [SBard] -> [SThief] [Bard Sfx1]
[ Action Wizard] [SDruid] -> [SWizard] [Druid Sfx1]
[ Action Priest] [SFighter] -> [SPriest] [Fighter Sfx1]
[ Action Bard] [SThief] -> [SBard] [Thief Sfx1]
[ Action Druid] [SWizard] -> [SDruid] [Wizard Sfx1]

[ Action Fighter] [SBard] -> [SFighter] [Bard Sfx1]
[ Action Thief] [SDruid] -> [SThief] [Druid Sfx1]
[ Action Wizard] [SFighter] -> [SWizard] [Fighter Sfx1]
[ Action Priest] [SThief] -> [SPriest] [Thief Sfx1]
[ Action Bard] [SWizard] -> [SBard] [Wizard Sfx1]
[ Action Druid] [SPriest] -> [SDruid] [Priest Sfx1]

[ Action Fighter] [SDruid] -> [SFighter] [Druid Sfx1]
[ Action Thief] [SFighter] -> [SThief] [Fighter Sfx1]
[ Action Wizard] [SThief] -> [SWizard] [Thief Sfx1]
[ Action Priest] [SWizard] -> [SPriest] [Wizard Sfx1]
[ Action Bard] [SPriest] -> [SBard] [Priest Sfx1]
[ Action Druid] [SBard] -> [SDruid] [Bard Sfx1]

(Bard plays music. This is my favorite part of the code, btw. Yes, you can make square area effects with just one object!)
[no Note | no Note | Bard] -> [^ Note | ^ Note | Bard]
[no Note | Bard] -> [^ Note | Bard]
[> Note | no Note | no Note] -> [Note | Note | Note]
[> Note | no Note] -> [Note | Note]
[> Note] -> [Note]

(Now enemies attack. Yeah, there's only one kind of enemy now.)

Late [Goblin | Vulnerable] -> [Goblin | Dying Vulnerable]

(Vulnerable objects that are attacked are designated as "Dying", but heroes can be saved by the Priest. Then the stuff that didn't get saved dies.)

Late [Dying Healer] -> [Saved Healer]
Late [Healer | Dying Hero] -> [Healer | Saved Hero]
Late [Dying Monster] -> [Sfx5]
Late [Dying Hero] -> [Corpse Sfx6]

(Doors opening.)

late [Weighing  YellowSwitch] [YellowDoor] -> [Weighing  YellowSwitch] [ShadowDoor]
late [YellowSwitch no Weighing] [YellowOpen] -> [YellowSwitch] [YellowDoor sfx2]
late [YellowSwitch no Weighing] [ShadowDoor] -> [YellowSwitch] [YellowDoor]
late [ShadowDoor] -> [YellowOpen sfx3]

late [Weighing PurpleSwitch] [PurpleDoor] -> [Weighing PurpleSwitch] [ShadowDoor]
late [PurpleSwitch no Weighing] [PurpleOpen] -> [PurpleSwitch] [PurpleDoor sfx2]
late [PurpleSwitch no Weighing] [ShadowDoor] -> [PurpleSwitch] [PurpleDoor]
late [ShadowDoor] -> [PurpleOpen sfx3]

late [MonsterDoor] -> [ShadowDoor]
late [ShadowDoor] [Monster] -> [MonsterDoor] [Monster]
late [ShadowDoor] -> [sfx3]

(Looks for a HasSavedDoor and, if there is one, puts a warpball on the Priest. Then, if someone was saved this turn, plays the sound only if the Priest doesn't have the warpball. Finally, cleans that up.)

late [HasSavedDoor] [Healer] -> [Goal] [Healer WarpBall]
late [Saved] [Healer no WarpBall] -> [Saved sfx4] [Healer]
late [HasSavedDoor] -> [Goal]
late [WarpBall] -> []

late [Note no Moveable] -> []

==============
WINCONDITIONS
==============

All Hero on Goal
All Goal on Hero

=======
LEVELS
=======

Message Many years have passed since the events of Heroes of Sokoban II.

Message Dragons have vanished from the realm, never to be seen again.

Message And new heroes have cropped up, as if there were only room for so many beings in one world.

###################
#.F.#.........#**G#
#***#...*****.#..*#
#.G.#...*...*.#2..#
#####...*...*.#####
#.......*...*.....#
#.......*...*.....#
#####..**..**.#####
#*..#.***.***.#..G#
#*G*#..*...*..#.O.#
#3.*#.........#4..#
###################

Message Purple bard charms nearby crates.

#############
#{#....{#...#
#.#.*#B.[.G.#
#*#.....#...#
#############

###############
#..############
#.B..****.....#
#..######.#####
#########G#####
###############

Message Monsters may also be charmed.

#############
#.......#...#
#...#...#...#
#O..B..OM.G.#
#...#...#...#
#.......#...#
#############

Message No one can resist the bard's music.

############
#G#.F.{..O.#
#.[........#
#G#.5.{..O.#
############

############
##[[[[[[[###
##[#####[###
##[##[[[[{*#
#...#[######
#.T.#......#
#...#.5.G.G#
############

########
#*G{####
###.####
#...[W##
###.#.5#
#*G*####
########

#########
#....G#G#
#.#*..#[#
#.**....#
#.......#
#.{4{B{.#
#...{...#
#########

############
#*.{..{.**{#
############
#B21.......#
##########[#
#.G..G..G..#
############

Message Orange druid turns stone into wood, wood into stone.

#############
#.[.{.2.#.D.#
#.#########.#
#....G.G..#.#
#############

#############
#...#####{{{#
#.D.##...{{{#
#...##.##{{{#
#############
#...#..######
#.1.#..##G.G#
#...#..#[...#
#############

#############
#O*....{...3#
##.####.#####
##.###O.O##G#
##.####.###.#
##D[....###G#
#############

Message Living things may also be turned into stone.

Message Try not to think about the moral implications, and don't do it any more than necessary.

#############
####.4..##G.#
#O..F..OM#.G#
####.6..##G.#
#############

###############
#.............#
#.5.}}}.]]]]].#
#...}}}.]G.G].#
#.D.}}}.]]]]].#
#.............#
###############

#########
#G#####W#
#########
#G#####6#
#########

#############
#......O.G.G#
#.###########
#.###########
#...#########
#B.6#########
#############

################
#...#...########
#.G.#.}.....{[O#
#...#.F.########
#...#...########
#.G.].4.########
#...#...########
#...#.5.########
#.G.#.}.....{[O#
#...#...########
################

#####M########
#G.GM#F.2###O#
#...#M.......#
#G.GM#3.6###O#
#####M########

############
#6######B###
#........###
############
#.#######.4#
#.......##1#
#G.G.G.G##O#
############

###############
#....#O.O#...G#
#..##W...1##..#
#..#O..O..O#.G#
#4.#..OGO..#..#
#..#O..O..O#.G#
#..##2...6##..#
#....#O.O#...G#
###############

Message Get ready.

#######################
#.F.*....#G.G#....*.4.#
#...#....#...#....#...#
#######.........#######
#####.#####O#####.#####
#..##O#..#...#..#O##..#
#.2.*....#G.G#....*.5.#
#..##O#..*...#..#O##..#
#####.####...####.#####
#######..#..*O.*#######
#...###.#######...#...#
#.3.###.##G.G##...#.6.#
#######################

################
#..............#
#.1.4......G.G.#
#..............#
#.2.B......G.G.#
#..............#
#.3.6......G.G.#
#..............#
################

Message Thanks for playing!

title It Dies In The Light
author Christopher Wells
homepage www.tophwells.com

noaction
run_rules_on_level_start
again_interval 0.05

========
OBJECTS
========

BackgroundNeutral
LIGHTGray Gray
11011
10101
01110
10101
11011

BackgroundDark
Black

Wall
Lightblue Blue
00010
11111
01000
11111
00010

LivePlayer
Black LightRed White Blue
.000.
.111.
12321
.232.
.222.

Corpse
LightGrey
.000.
.0.0.
0.0.0
..0..
.0.0.

Crate
Orange LightBrown Brown
.222.
21012
20102
21012
.222.

GoldCrate
White Yellow Orange
.222.
21012
20002
21012
.222.

GlassCrate
White
.000.
0...0
0...0
0...0
.000.

Prism
LightBlue White
.000.
00110
00010
00000
.000.

ActivePrism
LightBlue White Yellow
.000.
02120
01110
02120
.000.

Glass
White
00000
0...0
0...0
0...0
00000

BeamVert
White Yellow
.101.
.101.
.101.
.101.
.101.

BeamHor
White Yellow
.....
11111
00000
11111
.....

BeamCross
White Yellow
.101.
11011
00000
11011
.101.

Shadow
Purple
0.0.0
.0.0.
0.0.0
.0.0.
0.0.0

TempShadow
Purple
0.0.0
.0.0.
0.0.0
.0.0.
0.0.0

=======
LEGEND
=======

. = BackgroundNeutral
# = Wall
P = LivePlayer
C = Crate
G = GoldCrate
S = Shadow
X = Prism
O = Glass

Background = BackgroundNeutral or BackgroundDark
Player = LivePlayer or Corpse
Light = BeamVert or BeamHor or BeamCross
Hlight = BeamHor or BeamCross
Vlight = BeamVert or BeamCross
Opaque = Player or Crate or Wall or GoldCrate
Pushable = Crate or GoldCrate or Prism or GlassCrate


=======
SOUNDS
=======

SFX0 93002904

================
COLLISIONLAYERS
================

Background
BeamVert, BeamHor, BeamCross, Shadow, TempShadow
Player, Corpse, Wall, Crate, GoldCrate, GlassCrate, Prism, ActivePrism, Glass

======
RULES
======

[> Corpse] -> RESTART
[Light] -> []
[ActivePrism] -> [Prism]
[ >  Player | Pushable ] -> [  >  Player | > Pushable  ]
late HORIZONTAL [GoldCrate|no Opaque no Light] -> [GoldCrate | BeamHor]
late VERTICAL [GoldCrate|no Opaque no Light] -> [GoldCrate | BeamVert]
late VERTICAL [GoldCrate|no Opaque BeamHor] -> [GoldCrate | BeamCross]
late HORIZONTAL [Hlight|no Opaque no Light] -> [Hlight|BeamHor]
+ late HORIZONTAL [Hlight|no Opaque BeamVert] -> [Hlight|BeamCross]
+ late VERTICAL [Vlight|no Opaque no Light] -> [Vlight|BeamVert]
+ late VERTICAL [Vlight|no Opaque BeamHor] -> [Vlight|BeamCross]
+ late [Light Prism] ->[BeamCross ActivePrism]
late [Shadow Pushable] -> [Pushable]
late [TempShadow] -> [Shadow]
late [Shadow | no Light no Wall no Pushable no Glass no Shadow] -> [shadow | Tempshadow] again
late [Shadow] -> [Shadow BackgroundDark]
late [TempShadow] -> [TempShadow BackgroundDark]
late [no Shadow no TempShadow] -> [no Shadow BackgroundNeutral]
late [Shadow Player] -> [Shadow Corpse]

==============
WINCONDITIONS
==============

no Shadow

=======
LEVELS
=======

......####.
..#####ss#.
###ssssss#.
#..ssscss##
#..#s#s#ss#
#.g#s#ssss#
#p.#s#ssss#
#..css#sss#
###########

........########.
........#...#.C#.
...######...GC.##
...#..CsssssO.C.#
...#P.Csss#sO.CC#
...#..Csss#sO#..#
########ss#s....#
#ssssssOss#s#####
#sssssssss###....
#########s#......
........###......

##########
###G#G#G##
##P......#
#G.......#
##..C....#
#G.......#
##..C....#
#G.......#
##......S#
##########

........########
........#......#
#########..#o#.#
#........gooxo.#
#g#####c#.sso#s#
#.ssssss#.ss.ss#
##soooss#.ss##s#
##c.p.c###ss#ss#
##.....#ssss#ss#
#...g.......#ss#
#########.xx#ss#
........##sssss#
.........#######

MESSAGE Earth is safe once again.

(
level ideas
push battery horizontally
have to assemble and then disassemble a circuit, in order to complete it
add a piece to a circut, then break the circuit from another point
level that starts with a closed circuit
level with very dangerous + block
)
title Robot Arm
author increpare
homepage www.increpare.com

run_rules_on_level_start
color_palette c64

run_rules_on_level_start

norepeat_action

========
OBJECTS
========

Background .
darkblue

Player P
Black orange grey Blue
.111.
.111.
22222
13331
.3.3.

R0_Up 0
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R1_Up 1
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R2_Up 2
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Right
grey lightgrey
.111.
10001
10001
10001
.111.

R3 3
grey lightgrey
.....
..0..
.010.
..0..
.....

Connector_Up
grey lightgrey
.101.
.111.
.....
.....
.....

Connector_Down
grey lightgrey
.....
.....
.....
.111.
.101.

Connector_Left
grey lightgrey
.....
11...
01...
11...
.....

Connector_Right
grey lightgrey
.....
...11
...10
...11
.....

Moved
transparent

Parent
transparent

GrandParent
transparent

NewRot
transparent

NewRot2
transparent

force
transparent

explosion
red yellow
.101.
10101
01010
10101
.101.

explosionb
red yellow
.101.
10101
01010
10101
.101.

explosion2
yellow red
.101.
10101
01010
10101
.101.

Wall #
darkgrey grey lightgrey
00000
01110
01010
01110
00000

water ,
blue lightblue
00000
00010
00000
00000
01000

Fruit F
Red Green LightRed
..1..
.000.
00020
00000
.000.


FruitPicked G
Red Green LightRed grey grey
..4..
.030.
43334
00300
.040.

DeadFruit
black black black black black
..4..
.030.
43334
00300
.040.

EndPoint E
darkgreen Yellow black green
30003
02220
02220
02220
30003


=======
LEGEND
=======
R0 = R0_up or R0_down or R0_left or R0_right
R1 = R1_up or R1_down or R1_left or R1_right
R2 = R2_up or R2_down or R2_left or R2_right
RobotPiece = R0 or R1 or R2 or R3
* = RobotPiece or Player
connector = connector_up or connector_down or connector_left or connector_right

=======
SOUNDS
=======

sfx0 43004308 (explosion)
sfx1 69392707
sfx2 57370907 (push machine)
sfx3 62083508 (rotate machine)
sfx4 90419908 (grab)
sfx5 50782902 (drop in hole)
sfx6 76878101 (empty grab)
sfx7 13941101 (dead fruit)
sfx8 42541302 (release)
Player move 88476108
startgame 30513908
endlevel 5524308
endgame 5524308
showmessage 41852908
closemessage 41852908

================
COLLISIONLAYERS
================
Background
water
EndPoint
Player
Moved
Fruit
FRUITPICKED
deadfruit
R0_up, R0_down, R0_left, R0_right
R1_up, R1_down, R1_left, R1_right
R2_up, R2_down, R2_left, R2_right
connector_up
connector_down
connector_left
connector_right
R3
parent
GrandParent
newrot
newrot2
force
wall
explosion, explosion2, explosionb

======
RULES
======

[ connector ] -> [ ]

[ > player | fruit ] -> cancel

[ > player | water ] -> cancel

[ > player | ] -> [ > player | > force ]

[ > player | robotpiece | wall ] -> cancel

(place movement arrows)
up [ R0_Up | ] -> [ up R0_Up | up Parent ]
up [ R1_Up | ] -> [ up R1_Up | up Parent ]
up [ R2_Up | ] -> [ up R2_Up | up Parent ]

down [ R0_down | ] -> [ down R0_down | down Parent ]
down [ R1_down | ] -> [ down R1_down | down Parent ]
down [ R2_down | ] -> [ down R2_down | down Parent ]

left [ R0_left | ] -> [ left R0_left | left Parent ]
left [ R1_left | ] -> [ left R1_left | left Parent ]
left [ R2_left | ] -> [ left R2_left | left Parent ]

right [ R0_right | ] -> [ right R0_right | right Parent ]
right [ R1_right | ] -> [ right R1_right | right Parent ]
right [ R2_right | ] -> [ right R2_right | right Parent ]


( force propagation like this isn't very nice )
( [ > force < parent | ] -> [ < parent | > force ] )

[ R3 > force < parent ] [ > R0 ] [ v R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ v R1 ] [ r2 > force ]
[ R3 > force < parent ] [ > R0 ] [ ^ R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ ^ R1 ] [ r2 > force ]

[ > force < parent no R0] [R0]-> [ < parent ] [ > force R0 ]
[ > force R3 perpendicular parent ] [ R2 < parent ] [ R0 ] -> [ R3 perpendicular parent ] [ R2 < parent ] [ > force R0 ]

[ > force R2 perpendicular parent ] [ R1 < parent ] [ R0 ] -> [ R2 perpendicular parent ] [ R1 < parent ] [ > force R0 ]


[ > force moving R0 | ] -> [ | moving R0] sfx2

[ > force moving R1 perpendicular parent ] [ R0 ] -> [ moving R1 perpendicular parent ] [ > R0 ] sfx3
[ > force moving R2 perpendicular parent ] [ R1 ] -> [ moving R2 perpendicular parent ] [ > R1 ] sfx3
[ > force 		R3 perpendicular parent ] [ R2 ] -> [ R3 perpendicular parent ] [ > R2 ] sfx3


(rebuild arm)

(add new parents)

[ > R1 ] [ R2 ] -> [ > R1 ] [ R2 > NewRot ]
[ > R0 ] [ R1 ] [ R2 ] -> [ > R0 ] [ R1 > NewRot ] [ R2 > NewRot2 ]

[ > Parent R1 ] [ R2 ] -> [ > Parent R1 ] [ > GrandParent R2 ]

[ ^ Parent > NewRot > RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent > NewRot v RobotPiece ] -> [ < RobotPiece ]
[ ^ Parent > NewRot < RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent > NewRot ^ RobotPiece ] -> [ > RobotPiece ]

[ ^ Parent < NewRot > RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent < NewRot v RobotPiece ] -> [ > RobotPiece ]
[ ^ Parent < NewRot < RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent < NewRot ^ RobotPiece ] -> [ < RobotPiece ]


[ ^ GrandParent > NewRot2 > R2 ] -> [ V R2 ]
[ ^ GrandParent > NewRot2 v R2 ] -> [ < R2 ]
[ ^ GrandParent > NewRot2 < R2 ] -> [ ^ R2 ]
[ ^ GrandParent > NewRot2 ^ R2 ] -> [ > R2 ]

[ ^ GrandParent < NewRot2 > R2 ] -> [ ^ R2 ]
[ ^ GrandParent < NewRot2 v R2 ] -> [ > R2 ]
[ ^ GrandParent < NewRot2 < R2 ] -> [ V R2 ]
[ ^ GrandParent < NewRot2 ^ R2 ] -> [ < R2 ]

[ NewRot ] -> [ ]
[ NewRot2 ] -> [ ]
[ Parent ] -> [ ]
[ GrandParent ] -> [ ]


(change sprites)
[ up R0 ] -> [ up R0_Up ]
[ up R1 ] -> [ up R1_Up ]
[ up R2 ] -> [ up R2_Up ]

[ down R0 ] -> [ down R0_down ]
[ down R1 ] -> [ down R1_down ]
[ down R2 ] -> [ down R2_down ]

[ left R0 ] -> [ left R0_left ]
[ left R1 ] -> [ left R1_left ]
[ left R2 ] -> [ left R2_left ]

[ right R0 ] -> [ right R0_Right ]
[ right R1 ] -> [ right R1_Right ]
[ right R2 ] -> [ right R2_Right ]

(work from the base up when placing)
up [ up R0 | no R1 ] [ moving R1 ] -> [ up R0 | moving R1 ] [ ]
down [ down R0 | no R1 ] [ moving R1 ] -> [ down R0 | moving R1 ] [ ]
left [ left R0 | no R1 ] [ moving R1 ] -> [ left R0 | moving R1 ] [ ]
right [ right R0 | no R1 ] [ moving R1 ] -> [ right R0 | moving R1 ] [ ]

up [ up R1 | no R2 ] [ moving R2 ] -> [ up R1 | moving R2 ] [ ]
down [ down R1 | no R2 ] [ moving R2 ] -> [ down R1 | moving R2 ] [ ]
left [ left R1 | no R2 ] [ moving R2 ] -> [ left R1 | moving R2 ] [ ]
right [ right R1 | no R2 ] [ moving R2 ] -> [ right R1 | moving R2 ] [ ]


up [ up R2 | no R3 ] [ R3 ] -> [ up R2 | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ down R2 | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ left R2 | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ right R2 | R3 ] [ ]




up [ up R2 | no R3 ] [ R3 ] -> [ R2_up | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ R2_down | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ R2_left | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ R2_right | R3 ] [ ]


[ > RobotPiece no moved ] -> [ RobotPiece ]


up [ R0_Up | ] -> [ R0_Up connector_up | connector_down ]
up [ R1_Up | ] -> [ R1_Up connector_up | connector_down ]
up [ R2_Up | ] -> [ R2_Up connector_up | connector_down ]

down [ R0_down | ] -> [ R0_down connector_down | connector_up ]
down [ R1_down | ] -> [ R1_down connector_down | connector_up ]
down [ R2_down | ] -> [ R2_down connector_down | connector_up ]

left [ R0_left | ] -> [ R0_left connector_left | connector_right ]
left [ R1_left | ] -> [ R1_left connector_left | connector_right ]
left [ R2_left | ] -> [ R2_left connector_left | connector_right ]

right [ R0_right | ] -> [ R0_right connector_right | connector_left ]
right [ R1_right | ] -> [ R1_right connector_right | connector_left ]
right [ R2_right | ] -> [ R2_right connector_right | connector_left ]

[RobotPiece Wall no explosion no explosion2 ] -> [ RobotPiece Wall explosion ] sfx0

[ R0 R2 no explosion no explosion2] -> [ R0 R2 explosion ] sfx0
[ R0 R3 no explosion no explosion2 ] -> [ R0 r3 explosion ] sfx0
[ R1 R3 no explosion no explosion2 ] -> [ R1 R3 explosion ] sfx0

[ explosion2 ] -> [ explosionb ] again
[ explosion ] -> [ explosion2] again
[ explosionb ] -> [explosion] again

[ > player  | wall ] -> cancel

[FruitPicked ] [ R3 no FruitPicked ] -> [ ] [ R3 FruitPicked ]

[ action player ] [ R3 Fruit no fruitpicked ] -> [ player ] [ R3 Fruitpicked] sfx4
[ action player ] [ R3 fruitpicked no fruit ] -> [ player ] [ r3 fruit ] sfx8

[action player ] [ r3 no fruit no fruitpicked ] -> sfx6


[ fruit endpoint ] -> [endpoint] sfx5
[ fruit water ] -> [ deadfruit water ] sfx7
late [R0 water ] -> cancel
[R0 fruit ] -> cancel

==============
WINCONDITIONS
==============

no fruit
no fruitpicked
no deadfruit

=======
LEVELS
=======

message press x to grip and ungrip the mechanical arm
message put fruit in hole

message Level 1 of 3

###################
###################
###################
###..,........,.###
###..,...3....,.###
###..,...2....,.###
###.F,.E.1.,,,F,###
###..,...0....,.###
###..,..P.....,.###
###..,........,.###
###################
###################
###################

message Level 2 of 3

##############
##############
##############
###..3.....###
###..2.....###
###..1.,,,,###
###.E0.,...###
###....,FF.###
###.P..,...###
##############
##############
##############

message Level 3 of 3

###################
###################
###################
########........###
###..3.#...##.f.###
###..2..........###
###..1...#....#.###
###.e0..........###
###..p..#...#.f.###
#########.......###
###################
###################
###################

message congratulations


title Simple Block Pushing Game
author David Skinner
homepage www.puzzlescript.net
zoomscreen 3x3
========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111


Target
DarkBlue
.....
.000.
.0.0.
.000.
.....

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Player
Black Orange White Blue
.000.
.111.
22222
.333.
.3.3.

Crate
Orange
00000
0...0
0...0
0...0
00000


=======
LEGEND
=======

. = Background
# = Wall
P = Player
* = Crate
@ = Crate and Target
O = Target


=======
SOUNDS
=======

Crate MOVE 36772507

================
COLLISIONLAYERS
================

Background
Target
Player, Wall, Crate

======
RULES
======

[ >  Player | Crate ] -> [  >  Player | > Crate  ]

==============
WINCONDITIONS
==============

All Target on Crate

=======
LEVELS
=======


####..
#.O#..
#..###
#@P..#
#..*.#
#..###
####..


######
#....#
#.#P.#
#.*@.#
#.O@.#
#....#
######


USER PROMPT:
Output the code for a complete PuzzleScript game. The game should be a simplified `demake` of the following game idea: **Crops & Castles:** Harvest enchanted produce to gain spells and power up your medieval kingdom in this strategic farming and tower defense hybrid..  Return your code in full, inside a ```plaintext code block.