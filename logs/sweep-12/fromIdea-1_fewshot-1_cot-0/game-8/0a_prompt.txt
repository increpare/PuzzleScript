SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title Multiple Patterns
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
lightgreen green
11111
01111
11101
11111
10111

Wall
brown darkbrown
00010
11111
01000
11111
00010

Player
black orange white blue
.000.
.111.
22222
.333.
.3.3.

Sumo
pink white
..0..
00000
.000.
.111.
.0.0.

=======
LEGEND
=======

. = Background
# = Wall
P = Player
S = Sumo

=======
SOUNDS
=======

Sumo MOVE 48878907

================
COLLISIONLAYERS
================

Background
Player, Wall, Sumo

======
RULES
======

[ > Player ] [ Sumo ] -> [ > Player ] [ > Sumo ] 

==============
WINCONDITIONS
==============

=======
LEVELS
=======

########
#......#
#......#
#.P..S.#
#......#
#......#
########


title Bouncers
author Tyler Glaiel
homepage twitter.com/tylerglaiel

========
OBJECTS
========

Bg
#111111 #222222
00010
11111
01000
01000
11111

Selection
white gray
..1..
..1..
11011
..1..
..1..

Wall
DarkBlue DarkGreen #333333
20002
22022
22122
21112
11111

Hole
DarkGray Gray Black
.111.
12221
10001
10001
.111.


Arrow
Red Red
..1..
..11.
11111
..11.
..1..


HudDivider
white black
00000
11111
11111
11111
11111

IconGO
green white
10111
10011
10001
10011
10111

Going
green white
10111
10011
10001
10011
10111

LeftBouncer
White White Blue
.221.
2.1.2
21..2
2.1.2
.221.

RightBouncer
White White Blue
.122.
2.1.2
2..12
2.1.2
.122.

UpBouncer
White White Blue
.222.
2.1.2
21.12
1...1
.222.

DownBouncer
White White Blue
.222.
1...1
21.12
2.1.2
.222.

HudBG
black

Empty
black

PlayEmpty
black
.....
.....
.....
.....
.....


Ball
#003300 Green
.000.
01110
01110
01110
.000.

WinBall
LightBlue LightGreen
.000.
01110
01110
01110
.000.



BallUp
#003300 Green Black
.000.
01210
01110
01110
.000.

BallDown
#003300 Green Black
.000.
01110
01110
01210
.000.

BallLeft
#003300 Green Black
.000.
01110
02110
01110
.000.

BallRight
#003300 Green Black
.000.
01110
01120
01110
.000.




=======
LEGEND
=======
Background = Bg or HudBG
. = bg and PlayEmpty
S = Selection and PlayEmpty
- = HudDivider and Wall
H = HudBG and PlayEmpty
A = Arrow and HudBG
G = IconGO
W = Wall
O = Hole

L = LeftBouncer and HudBG
R = RightBouncer and HudBG
U = UpBouncer and HudBG
D = DownBouncer and HudBG

B = BallLeft
N = BallRight
M = BallUp
K = BallDown

Player = Selection


PlacedLeftbouncer = LeftBouncer and Selection
PlacedRightbouncer = RightBouncer and Selection
PlacedUpbouncer = UpBouncer and Selection
PlacedDownbouncer = DownBouncer and Selection

Bouncer = LeftBouncer or RightBouncer or UpBouncer or DownBouncer

emptyPlayer = Selection and PlayEmpty


ballSwitchLeft = Ball and LeftBouncer
ballSwitchRight = Ball and RightBouncer
ballSwitchUp = Ball and UpBouncer
ballSwitchDown = Ball and DownBouncer

ballSwitchedLeft = BallLeft and LeftBouncer
ballSwitchedRight = BallRight and RightBouncer
ballSwitchedUp = BallUp and UpBouncer
ballSwitchedDown = BallDown and DownBouncer

gameGo = Selection and IconGO
gameGoing =  Going



WinL = BallLeft and Hole
WinR = BallRight and Hole
WinU = BallUp and Hole
WinD = BallDown and Hole

Win = WinBall

MovingBall = Ball or BallLeft or BallRight or BallUp or BallDown

=======
SOUNDS
=======
SFX0 41242705 (place bouncer)
SFX1 73889302 (press go)
MovingBall Move 68254307 (ball move)
SFX2 68257500 (pocket ball)
SFX3 82752503 (ball switch direction)

================
COLLISIONLAYERS
================

Background

Arrow, Empty, LeftBouncer, RightBouncer, UpBouncer, DownBouncer, PlayEmpty, IconGO, Going, Hole
WinBall
Wall, Ball, BallUp, BallDown, BallLeft, BallRight
Selection, HudDivider


======
RULES
======

(action button: take icon to the right of the arrow, place under selector)
[action selection PlayEmpty][Arrow|LeftBouncer] -> [PlacedLeftbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|RightBouncer] -> [PlacedRightbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|UpBouncer] -> [PlacedUpbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|DownBouncer] -> [PlacedDownbouncer][Arrow|Empty] SFX0

(win conditions)
[WinL] -> [Win] again SFX2
[WinR] -> [Win] again SFX2
[WinU] -> [Win] again SFX2
[WinD] -> [Win] again SFX2

(slide unused icons over to the left if there's space between them and the arrow)
right [Empty | Bouncer] -> [Bouncer | Empty]

(selector on top of go button -> signals game to run)
[action selection iconGO] -> [gameGoing] again SFX1

(make genericball match the direction of the bouncer)
[ballSwitchLeft]->[ballSwitchedLeft] again
[ballSwitchRight]->[ballSwitchedRight] again
[ballSwitchUp]->[ballSwitchedUp] again
[ballSwitchDown]->[ballSwitchedDown] again

(if ball is going to move on top of a bouncer, switch it to generic ball first)
right [Going][Bouncer | BallLeft] -> [Going][Bouncer | Left Ball] again SFX3
left  [Going][Bouncer | BallRight] -> [Going][Bouncer | Right Ball] again SFX3
up    [Going][Bouncer | BallDown] -> [Going][Bouncer | Down Ball] again SFX3
down  [Going][Bouncer | BallUp] -> [Going][Bouncer | Up Ball] again SFX3



(move the ball if Going)
[Going][BallLeft] -> [Going][LEFT BallLeft] again
[Going][BallRight] -> [Going][RIGHT BallRight] again
[Going][BallUp] -> [Going][UP BallUp] again
[Going][BallDown] -> [Going][DOWN BallDown] again



[Going] -> [Going] again

==============
WINCONDITIONS
==============

no MovingBall

=======
LEVELS
=======

message place bouncers, hit play

......w.....
..o...w.....
......w.....
......w.....
......w..b..
......s.....
............
g-----------
-hhadluhhhhh

message Level 2

............
......o.....
..s.........
......w.....
...o.....b..
......m.....
............
g-----------
-hhalurhhhhh

message Level 3

............
............
..o.wwww....
..s.n..b....
....wwww.o..
............
............
g-----------
-hhaudrlhhhh

message Level 4

............
............
..o......o..
............
............
.s..bbbb....
............
............
..o......o..
............
g-----------
-hhalrudu...

message Level 5

.....n......w...
..wwww.k....o.w.
......b..m......
...o............
.......w........
.....b.w........
......wwo.......
w.ww.www........
.o..............
....s...........
..........wwwo..
g---------------
-hhaddddddrrr...

message I didn't feel like making more levels

title Notsnake
author Terry Cavanagh
homepage www.distractionware.com

color_palette c64
require_player_movement

========
OBJECTS
========

Background
blue

Player
lightblue

Trail
purple

=======
LEGEND
=======

. = Background
P = Player
O = Trail

=======
SOUNDS
=======

startgame 50287705
sfx0 660507
sfx1 41058704
endgame 74955903

================
COLLISIONLAYERS
================

Background
Trail
Player

======
RULES
======

[ > Player | No Trail ] -> [ Trail | Player ] sfx0
[ > Player | Trail ] -> [ | Player ] sfx1

==============
WINCONDITIONS
==============

no Trail

=======
LEVELS
=======

OOOOOOOO
OOOOOOOO
O..POO.O
OOOOOOOO
OOOOOOOO


title Colour Chained
author Dennis Au
youtube _VzrmRkLfxM
run_rules_on_level_start
again_interval 0.015
noundo

(version 201310152126 - added some harder levels, added sfx for rotate and drop, decided to use noundo)
(version 201310142256 - tweaked scoring, added pop animation and reworked code)

========
OBJECTS
========
Background
Black

P1 p
Black
0...0
.....
.....
.....
0...0

P2 q
Black
0...0
.....
.....
.....
0...0

hasN
Orange
0....
.....
.....
.....
....0

Remove
White
.....
.....
.....
.....
.....


NP1 n
White
.....
.....
.....
.....
.....

NP2 m
White
.....
.....
.....
.....
.....

LoseFlag
Grey Black LightGrey
.....
10120
.....
02010
.....

PieceGen
Black

HBorder -
DarkGrey
.....
.....
0...0
.....
.....

VBorder |
DarkGrey
..0..
.....
.....
.....
..0..

(pieces)
C1 R
Red LightGrey Black
.000.
00010
00000
00000
.000.

C2 G
Green LightGrey Black
.000.
00010
00000
00000
.000.

C3 B
Blue LightGrey Black
.000.
00010
00000
00000
.000.

C4 Y
Yellow LightGrey Black
.000.
00010
00000
00000
.000.

(Numbers)
No1 1
DarkGrey
..0..
.00..
..0..
..0..
.000.

No2 2
DarkGrey
.00..
0..0.
..0..
.0...
0000.

No3 3
DarkGrey
000..
...0.
.00..
...0.
000..

No4 4
DarkGrey
..0..
.00..
0.0..
0000.
..0..

No5 5
DarkGrey
0000.
0....
000..
...0.
000..

No6 6
DarkGrey
.00..
0....
000..
0..0.
.00..

No7 7
DarkGrey
0000.
...0.
..0..
.0...
0....

No8 8
DarkGrey
.00..
0..0.
.00..
0..0.
.00..

No9 9
DarkGrey
.00..
0..0.
.000.
...0.
.00..

No0 0
DarkGrey
.00..
0..0.
0..0.
0..0.
.00..

Pop
LightGrey White
...1.
..101
...1.
.....
.....

Inc
Black

PlayArea
Green


=======
LEGEND
=======
. = Background
u = PieceGen
+ = Inc

Player = P1 or P2
Piece = C1 or C2 or C3 or C4
PieceB = Piece

NP = NP1 or NP2
Border = HBorder or VBorder
Score = No1 or No2 or No3 or No4 or No5 or No6 or No7 or No8 or No9 or No0

Obstacle = Piece or Score
Match3Logic = hasN or Remove or Pop

=======
SOUNDS
=======
startlevel 17589703

(death)
sfx0 45317502

(match3)
sfx1 530500

(piece drop)
sfx2 75273507

(piece rotate)
sfx3 21774107

================
COLLISIONLAYERS
================
PlayArea
Background
Player, NP, PieceGen, Border
Piece, Score, Inc,
Match3Logic, LoseFlag

======
RULES
======
(set preview area)
[] -> [PlayArea]
Down [NP|PlayArea] -> [NP|]
Vertical [No PlayArea| PlayArea] -> [|]

(match 3 rules)
Right [C1|C1] -> [C1 hasN|C1 hasN]
Right [C2|C2] -> [C2 hasN|C2 hasN]
Right [C3|C3] -> [C3 hasN|C3 hasN]
Right [C4|C4] -> [C4 hasN|C4 hasN]

Vertical [C1 hasN|C1] -> [Remove C1| Remove C1]
Vertical [C2 hasN|C2] -> [Remove C2| Remove C2]
Vertical [C3 hasN|C3] -> [Remove C3| Remove C3]
Vertical [C4 hasN|C4] -> [Remove C4| Remove C4]

[Remove C1| C1] -> [Remove C1| Remove C1]
[Remove C2| C2] -> [Remove C2| Remove C2]
[Remove C3| C3] -> [Remove C3| Remove C3]
[Remove C4| C4] -> [Remove C4| Remove C4]

[C1|C1|C1] -> [Remove C1|Remove C1|Remove C1]
[C2|C2|C2] -> [Remove C2|Remove C2|Remove C2]
[C3|C3|C3] -> [Remove C3|Remove C3|Remove C3]
[C4|C4|C4] -> [Remove C4|Remove C4|Remove C4]

[hasN] -> []

[PlayArea Remove Piece][P1] -> [PlayArea Pop][P1] sfx1
random [Pop][inc] -> [][left inc] again


(down drops pieces)
Down [> Player Piece|No Piece] -> [Player|> Piece] sfx2
Down [> Player No Piece] -> Cancel


(x rotates clockwise)
[Up P1|P2] -> [> P1|v P2] sfx3
[Action P1|P2] -> [> P1|v P2] sfx3
[Moving Player Piece] -> [Moving Player Moving Piece]
[> Player| Border] -> cancel


(gravity)
Down [PlayArea Piece No Player|No Obstacle][stationary inc] -> [PlayArea|> Piece][stationary inc] again


(explicit loss if piece ends on border)
[Piece Border][stationary inc][P1] -> [Piece Border LoseFlag][inc][] sfx0
[LoseFlag|No LoseFlag] -> [LoseFlag|LoseFlag] again


(scoring)

left [> inc| score] -> [> inc| > score]
left [> No9| score] -> [No0|> score]
left [> No9| border] -> [No0| border]

left [> No0] -> [No1]
left [> No1] -> [No2]
left [> No2] -> [No3]
left [> No3] -> [No4]
left [> No4] -> [No5]
left [> No5] -> [No6]
left [> No6] -> [No7]
left [> No7] -> [No8]
left [> No8] -> [No9]


(preview area)

startloop
(for endless mode)
[PieceGen No Piece] -> [PieceGen Random Piece]
(antigrav)
Up [Piece No PlayArea No NP| No Obstacle] -> [|> Piece]
(get next piece)
[P1 no Piece][P2 no Piece][NP1 Piece|NP2 PieceB]-> [P1 Piece][P2 PieceB][NP1|NP2]
endloop


==============
WINCONDITIONS
==============
No Piece
No Pop

=======
LEVELS
=======
(Empty Level Template

nm|..pq..|
..|......|
..|------|
..|......|
..|......|
..|......|
..|......|
..|......|
..|......|
..|000000+

)

nm|..pq..|
RR|......|
..|------|
..|......|
..|......|
..|......|
..|..Y...|
..|..RR..|
..|R.YY..|
..|000000+

nm|..pq..|
GR|......|
..|------|
..|......|
..|......|
..|....B.|
..|...BG.|
..|...RG.|
..|.R.RB.|
..|000000+

nm|..pq..|
RR|......|
BB|------|
BR|......|
..|......|
..|......|
..|......|
..|....B.|
..|..RRB.|
..|000000+


nm|..pq..|
BG|......|
RB|------|
..|......|
..|......|
..|......|
..|......|
..|..GB..|
..|RRGB..|
..|000000+

nm|..pq..|
BG|......|
GB|------|
..|......|
..|......|
..|......|
..|...G..|
..|..BB..|
..|..GG.B|
..|000000+

nm|..pq..|
RG|......|
GB|------|
BR|......|
..|......|
..|......|
..|...G..|
..|...B..|
..|..RRG.|
..|000000+

nm|..pq..|
GR|......|
RY|------|
BG|......|
YB|......|
..|......|
..|..B...|
..|..RB..|
..|.GYB..|
..|000000+

nm|..pq..|
RG|......|
YY|------|
YG|......|
BB|......|
..|BY....|
..|YB.G..|
..|YRRG..|
..|BGGBBY|
..|000000+

nm|..pq..|
rb|......|
bb|------|
by|......|
ry|......|
..|....r.|
..|...rb.|
..|.bybyb|
..|bybyrr|
..|000000+

nm|..pq..|
br|......|
ry|------|
yy|......|
..|....b.|
..|...gb.|
..|...yy.|
..|.bygb.|
..|byrgrr|
..|000000+


nm|..pq..|
by|......|
ry|------|
ry|......|
yg|....y.|
..|..rgby|
..|b.gbyg|
..|rrgbyg|
..|bbyyrr|
..|000000+


message Thank you for playing.
message Music: Puzzle Pieces - Desert of Lost Endings by Nick Tanski (nicholastanski.bandcamp.com)

(endless mode)
message Endless Mode unlocked!

nm|..pq..|
..|......|
..|------|
..|......|
..|......|
..|......|
..|......|
..|......|
..|......|
uu|000000+

(CC BY-NC-SA 3.0)

title maze generator
run_rules_on_level_start
again_interval 0

========
OBJECTS
========

Background .
black white
00000
01110
01110
01110
00000

Player P
transparent

visited
transparent

filler
transparent

w_up
white
.000.
.000.
.000.
.000.
.....

w_down
white
.....
.000.
.000.
.000.
.000.

w_left
white
.....
0000.
0000.
0000.
.....

w_right
white
.....
.0000
.0000
.0000
.....

to_delete
transparent

temp
transparent

tempA
transparent

=======
LEGEND
=======


=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Player
filler
visited
w_up
w_down
w_left
w_right
to_delete
temp
tempA

======
RULES
======

(place player randomly on the first turn only)
random [ no filler ] -> [player visited]
[no filler] -> [filler]

(propagate path until you can't move any more)
random [ player |  no visited ] ->  [  visited > to_delete |  < to_delete player ] again

(if you can't extend the current path, continue from some random other neighbouring point)
[player | no visited ] -> [ player tempA | ]
random [player no tempA] [ visited | no visited ] -> [ visited ] [ visited player |  ] again
[tempA]->[]

[ up to_delete ] -> [ w_up ]
[ down to_delete ] -> [ w_down ]
[ left to_delete ] -> [ w_left ]
[ right to_delete ] -> [ w_right ]

==============
WINCONDITIONS
==============


=======
LEVELS
=======

........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................




USER PROMPT:
Output the code for a complete PuzzleScript game. The game should be a simplified `demake` of the following game idea: **Olive Odyssey:** Uncover ancient secrets and complex recipes by harvesting ingredients and cooking them into magical, story-altering dishes..  Return your code in full, inside a ```plaintext code block.