To create a complete PuzzleScript game, we need to define several components: the title, author, objects, legend, collision layers, rules, win conditions, and levels. We will design a simple game where the player pushes crates to targets, akin to a basic Sokoban-style puzzle.

Here's the planned game structure:

1. **Title and Author**: This sets the basic metadata for the game.
2. **Objects**: Define the visuals and properties of game entities like the player, crates, walls, targets, and the background.
3. **Legend**: Establish shorthand representations for these objects to make level design easier.
4. **Collision Layers**: Specify the layers of collision to prevent overlapping entities.
5. **Rules**: Define interactions, such as how the player can push crates.
6. **Win Conditions**: Establish what must happen for the game or level to be completed.
7. **Levels**: Design a few levels to demonstrate the gameplay.

Below is the complete PuzzleScript code for our game:

```plaintext
title Simple Sokoban
author Your Name

========
OBJECTS
========

Background
LightBlue Black
11111
11111
11111
11111
11111

Wall
Grey
11111
11111
11111
11111
11111

Player
Yellow
.000.
.111.
22222
.333.
.3.3.

Crate
Orange
.000.
.111.
11111
.222.
.2.2.

Target
DarkGreen
.....
..0..
..0..
.....
.....

=======
LEGEND
=======

. = Background
# = Wall
P = Player
* = Crate
O = Target
@ = Crate on Target

================
COLLISIONLAYERS
================

Background
Target
Wall, Player, Crate

======
RULES
======

[ > Player | Crate ] -> [ > Player | > Crate ]

==============
WINCONDITIONS
==============

All Crate on Target

=======
LEVELS
=======

#########
#.......#
#.O.O...#
#.P.*...#
#.*.*...#
#.......#
#########

#########
#.......#
#.#O#O#.#
#.*.*.*.#
#.*P*.*.#
#.#.#.#.#
#.......#
#########

#########
#.......#
#..O....#
#..O.*..#
#..*P*.#
#..O*O..#
#.......#
#########
```

**Explanation**:

- **Objects**: We have defined a player, crates, walls, targets, and the background, each with a unique color scheme for differentiation.
- **Legend**: Provides shorthand representations for level design.
- **Collision Layers**: Ensures that certain objects, like crates and players, cannot overlap.
- **Rules**: Defines that the player can push crates if there is space ahead.
- **Win Conditions**: All crates must be on target positions to win the level.
- **Levels**: We have three levels to demonstrate the gameplay, each increasing in complexity. 

This game framework can be expanded or modified to add more levels or introduce new mechanics depending on future design goals.