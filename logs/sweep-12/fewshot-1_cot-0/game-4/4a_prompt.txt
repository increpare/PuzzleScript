SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title Notsnake
author Terry Cavanagh
homepage www.distractionware.com

color_palette c64
require_player_movement

========
OBJECTS
========

Background
blue

Player
lightblue

Trail
purple

=======
LEGEND
=======

. = Background
P = Player
O = Trail

=======
SOUNDS
=======

startgame 50287705
sfx0 660507
sfx1 41058704
endgame 74955903

================
COLLISIONLAYERS
================

Background
Trail
Player

======
RULES
======

[ > Player | No Trail ] -> [ Trail | Player ] sfx0
[ > Player | Trail ] -> [ | Player ] sfx1

==============
WINCONDITIONS
==============

no Trail

=======
LEVELS
=======

OOOOOOOO
OOOOOOOO
O..POO.O
OOOOOOOO
OOOOOOOO


(
level ideas
push battery horizontally
have to assemble and then disassemble a circuit, in order to complete it
add a piece to a circut, then break the circuit from another point
level that starts with a closed circuit
level with very dangerous + block
)
title Robot Arm
author increpare
homepage www.increpare.com

run_rules_on_level_start
color_palette c64

run_rules_on_level_start

norepeat_action

========
OBJECTS
========

Background .
darkblue

Player P
Black orange grey Blue
.111.
.111.
22222
13331
.3.3.

R0_Up 0
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R0_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R1_Up 1
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R1_Right
grey lightgrey
.111.
10001
10001
10001
.111.


R2_Up 2
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Down
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Left
grey lightgrey
.111.
10001
10001
10001
.111.

R2_Right
grey lightgrey
.111.
10001
10001
10001
.111.

R3 3
grey lightgrey
.....
..0..
.010.
..0..
.....

Connector_Up
grey lightgrey
.101.
.111.
.....
.....
.....

Connector_Down
grey lightgrey
.....
.....
.....
.111.
.101.

Connector_Left
grey lightgrey
.....
11...
01...
11...
.....

Connector_Right
grey lightgrey
.....
...11
...10
...11
.....

Moved
transparent

Parent
transparent

GrandParent
transparent

NewRot
transparent

NewRot2
transparent

force
transparent

explosion
red yellow
.101.
10101
01010
10101
.101.

explosionb
red yellow
.101.
10101
01010
10101
.101.

explosion2
yellow red
.101.
10101
01010
10101
.101.

Wall #
darkgrey grey lightgrey
00000
01110
01010
01110
00000

water ,
blue lightblue
00000
00010
00000
00000
01000

Fruit F
Red Green LightRed
..1..
.000.
00020
00000
.000.


FruitPicked G
Red Green LightRed grey grey
..4..
.030.
43334
00300
.040.

DeadFruit
black black black black black
..4..
.030.
43334
00300
.040.

EndPoint E
darkgreen Yellow black green
30003
02220
02220
02220
30003


=======
LEGEND
=======
R0 = R0_up or R0_down or R0_left or R0_right
R1 = R1_up or R1_down or R1_left or R1_right
R2 = R2_up or R2_down or R2_left or R2_right
RobotPiece = R0 or R1 or R2 or R3
* = RobotPiece or Player
connector = connector_up or connector_down or connector_left or connector_right

=======
SOUNDS
=======

sfx0 43004308 (explosion)
sfx1 69392707
sfx2 57370907 (push machine)
sfx3 62083508 (rotate machine)
sfx4 90419908 (grab)
sfx5 50782902 (drop in hole)
sfx6 76878101 (empty grab)
sfx7 13941101 (dead fruit)
sfx8 42541302 (release)
Player move 88476108
startgame 30513908
endlevel 5524308
endgame 5524308
showmessage 41852908
closemessage 41852908

================
COLLISIONLAYERS
================
Background
water
EndPoint
Player
Moved
Fruit
FRUITPICKED
deadfruit
R0_up, R0_down, R0_left, R0_right
R1_up, R1_down, R1_left, R1_right
R2_up, R2_down, R2_left, R2_right
connector_up
connector_down
connector_left
connector_right
R3
parent
GrandParent
newrot
newrot2
force
wall
explosion, explosion2, explosionb

======
RULES
======

[ connector ] -> [ ]

[ > player | fruit ] -> cancel

[ > player | water ] -> cancel

[ > player | ] -> [ > player | > force ]

[ > player | robotpiece | wall ] -> cancel

(place movement arrows)
up [ R0_Up | ] -> [ up R0_Up | up Parent ]
up [ R1_Up | ] -> [ up R1_Up | up Parent ]
up [ R2_Up | ] -> [ up R2_Up | up Parent ]

down [ R0_down | ] -> [ down R0_down | down Parent ]
down [ R1_down | ] -> [ down R1_down | down Parent ]
down [ R2_down | ] -> [ down R2_down | down Parent ]

left [ R0_left | ] -> [ left R0_left | left Parent ]
left [ R1_left | ] -> [ left R1_left | left Parent ]
left [ R2_left | ] -> [ left R2_left | left Parent ]

right [ R0_right | ] -> [ right R0_right | right Parent ]
right [ R1_right | ] -> [ right R1_right | right Parent ]
right [ R2_right | ] -> [ right R2_right | right Parent ]


( force propagation like this isn't very nice )
( [ > force < parent | ] -> [ < parent | > force ] )

[ R3 > force < parent ] [ > R0 ] [ v R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ v R1 ] [ r2 > force ]
[ R3 > force < parent ] [ > R0 ] [ ^ R1 ] [ R2 ] -> [ R3 < parent ] [ > R0 ] [ ^ R1 ] [ r2 > force ]

[ > force < parent no R0] [R0]-> [ < parent ] [ > force R0 ]
[ > force R3 perpendicular parent ] [ R2 < parent ] [ R0 ] -> [ R3 perpendicular parent ] [ R2 < parent ] [ > force R0 ]

[ > force R2 perpendicular parent ] [ R1 < parent ] [ R0 ] -> [ R2 perpendicular parent ] [ R1 < parent ] [ > force R0 ]


[ > force moving R0 | ] -> [ | moving R0] sfx2

[ > force moving R1 perpendicular parent ] [ R0 ] -> [ moving R1 perpendicular parent ] [ > R0 ] sfx3
[ > force moving R2 perpendicular parent ] [ R1 ] -> [ moving R2 perpendicular parent ] [ > R1 ] sfx3
[ > force 		R3 perpendicular parent ] [ R2 ] -> [ R3 perpendicular parent ] [ > R2 ] sfx3


(rebuild arm)

(add new parents)

[ > R1 ] [ R2 ] -> [ > R1 ] [ R2 > NewRot ]
[ > R0 ] [ R1 ] [ R2 ] -> [ > R0 ] [ R1 > NewRot ] [ R2 > NewRot2 ]

[ > Parent R1 ] [ R2 ] -> [ > Parent R1 ] [ > GrandParent R2 ]

[ ^ Parent > NewRot > RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent > NewRot v RobotPiece ] -> [ < RobotPiece ]
[ ^ Parent > NewRot < RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent > NewRot ^ RobotPiece ] -> [ > RobotPiece ]

[ ^ Parent < NewRot > RobotPiece ] -> [ ^ RobotPiece ]
[ ^ Parent < NewRot v RobotPiece ] -> [ > RobotPiece ]
[ ^ Parent < NewRot < RobotPiece ] -> [ V RobotPiece ]
[ ^ Parent < NewRot ^ RobotPiece ] -> [ < RobotPiece ]


[ ^ GrandParent > NewRot2 > R2 ] -> [ V R2 ]
[ ^ GrandParent > NewRot2 v R2 ] -> [ < R2 ]
[ ^ GrandParent > NewRot2 < R2 ] -> [ ^ R2 ]
[ ^ GrandParent > NewRot2 ^ R2 ] -> [ > R2 ]

[ ^ GrandParent < NewRot2 > R2 ] -> [ ^ R2 ]
[ ^ GrandParent < NewRot2 v R2 ] -> [ > R2 ]
[ ^ GrandParent < NewRot2 < R2 ] -> [ V R2 ]
[ ^ GrandParent < NewRot2 ^ R2 ] -> [ < R2 ]

[ NewRot ] -> [ ]
[ NewRot2 ] -> [ ]
[ Parent ] -> [ ]
[ GrandParent ] -> [ ]


(change sprites)
[ up R0 ] -> [ up R0_Up ]
[ up R1 ] -> [ up R1_Up ]
[ up R2 ] -> [ up R2_Up ]

[ down R0 ] -> [ down R0_down ]
[ down R1 ] -> [ down R1_down ]
[ down R2 ] -> [ down R2_down ]

[ left R0 ] -> [ left R0_left ]
[ left R1 ] -> [ left R1_left ]
[ left R2 ] -> [ left R2_left ]

[ right R0 ] -> [ right R0_Right ]
[ right R1 ] -> [ right R1_Right ]
[ right R2 ] -> [ right R2_Right ]

(work from the base up when placing)
up [ up R0 | no R1 ] [ moving R1 ] -> [ up R0 | moving R1 ] [ ]
down [ down R0 | no R1 ] [ moving R1 ] -> [ down R0 | moving R1 ] [ ]
left [ left R0 | no R1 ] [ moving R1 ] -> [ left R0 | moving R1 ] [ ]
right [ right R0 | no R1 ] [ moving R1 ] -> [ right R0 | moving R1 ] [ ]

up [ up R1 | no R2 ] [ moving R2 ] -> [ up R1 | moving R2 ] [ ]
down [ down R1 | no R2 ] [ moving R2 ] -> [ down R1 | moving R2 ] [ ]
left [ left R1 | no R2 ] [ moving R2 ] -> [ left R1 | moving R2 ] [ ]
right [ right R1 | no R2 ] [ moving R2 ] -> [ right R1 | moving R2 ] [ ]


up [ up R2 | no R3 ] [ R3 ] -> [ up R2 | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ down R2 | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ left R2 | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ right R2 | R3 ] [ ]




up [ up R2 | no R3 ] [ R3 ] -> [ R2_up | R3 ] [ ]
down [ down R2 | no R3 ] [ R3 ] -> [ R2_down | R3 ] [ ]
left [ left R2 | no R3 ] [ R3 ] -> [ R2_left | R3 ] [ ]
right [ right R2 | no R3 ] [ R3 ] -> [ R2_right | R3 ] [ ]


[ > RobotPiece no moved ] -> [ RobotPiece ]


up [ R0_Up | ] -> [ R0_Up connector_up | connector_down ]
up [ R1_Up | ] -> [ R1_Up connector_up | connector_down ]
up [ R2_Up | ] -> [ R2_Up connector_up | connector_down ]

down [ R0_down | ] -> [ R0_down connector_down | connector_up ]
down [ R1_down | ] -> [ R1_down connector_down | connector_up ]
down [ R2_down | ] -> [ R2_down connector_down | connector_up ]

left [ R0_left | ] -> [ R0_left connector_left | connector_right ]
left [ R1_left | ] -> [ R1_left connector_left | connector_right ]
left [ R2_left | ] -> [ R2_left connector_left | connector_right ]

right [ R0_right | ] -> [ R0_right connector_right | connector_left ]
right [ R1_right | ] -> [ R1_right connector_right | connector_left ]
right [ R2_right | ] -> [ R2_right connector_right | connector_left ]

[RobotPiece Wall no explosion no explosion2 ] -> [ RobotPiece Wall explosion ] sfx0

[ R0 R2 no explosion no explosion2] -> [ R0 R2 explosion ] sfx0
[ R0 R3 no explosion no explosion2 ] -> [ R0 r3 explosion ] sfx0
[ R1 R3 no explosion no explosion2 ] -> [ R1 R3 explosion ] sfx0

[ explosion2 ] -> [ explosionb ] again
[ explosion ] -> [ explosion2] again
[ explosionb ] -> [explosion] again

[ > player  | wall ] -> cancel

[FruitPicked ] [ R3 no FruitPicked ] -> [ ] [ R3 FruitPicked ]

[ action player ] [ R3 Fruit no fruitpicked ] -> [ player ] [ R3 Fruitpicked] sfx4
[ action player ] [ R3 fruitpicked no fruit ] -> [ player ] [ r3 fruit ] sfx8

[action player ] [ r3 no fruit no fruitpicked ] -> sfx6


[ fruit endpoint ] -> [endpoint] sfx5
[ fruit water ] -> [ deadfruit water ] sfx7
late [R0 water ] -> cancel
[R0 fruit ] -> cancel

==============
WINCONDITIONS
==============

no fruit
no fruitpicked
no deadfruit

=======
LEVELS
=======

message press x to grip and ungrip the mechanical arm
message put fruit in hole

message Level 1 of 3

###################
###################
###################
###..,........,.###
###..,...3....,.###
###..,...2....,.###
###.F,.E.1.,,,F,###
###..,...0....,.###
###..,..P.....,.###
###..,........,.###
###################
###################
###################

message Level 2 of 3

##############
##############
##############
###..3.....###
###..2.....###
###..1.,,,,###
###.E0.,...###
###....,FF.###
###.P..,...###
##############
##############
##############

message Level 3 of 3

###################
###################
###################
########........###
###..3.#...##.f.###
###..2..........###
###..1...#....#.###
###.e0..........###
###..p..#...#.f.###
#########.......###
###################
###################
###################

message congratulations


title Broken Rigid Body example
author Anonymous
homepage www.puzzlescript.net

verbose_logging

(

Example for
https://www.puzzlescript.net/Documentation/rigidbodies.html#many_many

)

========
OBJECTS
========

Background 
white  

Target 
DarkBlue    

Wall 
DarkGrey

Player
Blue
..0..
..0.0
00000
.000.
.0.0.

Shadow
Black
..0..
0.0..
00000
.000.
.0.0.

( three multi-cells blocks )
Crate 
orange

Chest
green

Box
red

( 1-cell small block )
Small
darkred
.....
.000.
.000.
.000.
.....

( sticky, multicellular block when in contact )
Glue
pink
.000.
00000
00000
00000
.000.

( a flag to know what is allowed move )
Wanna_Move
#ff00ff
.....
.....
..0..
.....
.....

=======
LEGEND
=======

. = Background
# = Wall
P = Player
S = Shadow
* = Crate
+ = Box
% = Chest
o = Small
g = Glue

( blocks that can be moved by the player )
Movable = Crate or Box or Chest or Small or Glue

( all things that can move and push blocks )
Mover = Player or Shadow or Movable 

( things that can stop a movement if they are stationary )
Obstacle = Wall or Mover

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Target
Obstacle
Wanna_Move

======
RULES     
======     

[ > player ] [ stationary shadow ] -> [ > player ] [ < shadow ]

( 1. Propagate movements forward )
[ > Mover | stationary Movable ] -> [ > Mover | > Movable  ]
+ [ > Box    ] [ stationary Box   ] -> [ > Box    ] [ > Box    ]
+ [ > Crate  ] [ stationary Crate ] -> [ > Crate  ] [ > Crate  ]
+ [ > Chest  ] [ stationary Chest ] -> [ > Chest  ] [ > Chest  ]
+ [ moving Glue | stationary Glue ] -> [ moving Glue | moving Glue ]

( 2. Propagate obstructions backwards )
[ > Mover  | stationary Obstacle ] -> [ stationary Mover | Obstacle ]
+ [ > Crate  ] [ stationary Crate ] -> [ stationary Crate ] [ Crate ]
+ [ > Box    ] [ stationary Box   ] -> [ stationary Box   ] [ Box   ]
+ [ > Chest  ] [ stationary Chest ] -> [ stationary Chest ] [ Chest ]
+ [ moving Glue | stationary Glue ] -> [ stationary Glue | Glue ]

( 3. remove all movement, keep a flag )
[ > Movable ] -> [ Movable wanna_move ]

( 4. propagate movement only on wanna_move things )
(    ie redo step 1 but with WANNA_MOVE added to the first line below )
[ > Mover  | stationary Movable WANNA_MOVE ] -> [ > Mover | > Movable ]
+ [ > Box   ] [ stationary Box   ] -> [ > Box   ] [ > Box   ]
+ [ > Crate ] [ stationary Crate ] -> [ > Crate ] [ > Crate ]
+ [ > Chest ] [ stationary Chest ] -> [ > Chest ] [ > Chest ]
+ [ moving Glue | stationary Glue ] -> [ moving Glue | moving Glue ]

( 5. cleanup, remove flag )
[ wanna_move ] -> [ ]

==============
WINCONDITIONS
==============

=======     
LEVELS
=======

###################
#.................#
#............s....#
#...*..g.g.#......#
#...*......#...g###
#...*...o.%%%.....#
#...+++.o.%.......#
#....+....%%%.....#
#....+.........g..#
#....p.gg.........#
###################

#########
#.......#
#.p.+...#
#...+...#
#...+.s.#
#.......#
#########


title Spriteaporter
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Temp
black

Background
lightgreen green
11111
01111
11101
11111
10111

Target
darkblue
.....
.000.
.0.0.
.000.
.....

Wall
brown darkbrown
00010
11111
01000
11111
00010

Player
black orange white blue
.000.
.111.
22222
.333.
.3.3.

Sprite
pink blue red
.....
.000.
00100
01110
.202.

=======
LEGEND
=======

. = Background
# = Wall
P = Player
O = Sprite

=======
SOUNDS
=======

sfx0 67117309

================
COLLISIONLAYERS
================

Temp
Background
Target
Player, Wall, Sprite

======
RULES
======

late [ Sprite | ... | Player ] -> [ Temp | ... | Sprite ] 
late [ Temp ] -> [ Player ] 

==============
WINCONDITIONS
==============

=======
LEVELS
=======

#########
#.......#
#....O..#
#.P.....#
#.......#
#.......#
#########


title Bouncers
author Tyler Glaiel
homepage twitter.com/tylerglaiel

========
OBJECTS
========

Bg
#111111 #222222
00010
11111
01000
01000
11111

Selection
white gray
..1..
..1..
11011
..1..
..1..

Wall
DarkBlue DarkGreen #333333
20002
22022
22122
21112
11111

Hole
DarkGray Gray Black
.111.
12221
10001
10001
.111.


Arrow
Red Red
..1..
..11.
11111
..11.
..1..


HudDivider
white black
00000
11111
11111
11111
11111

IconGO
green white
10111
10011
10001
10011
10111

Going
green white
10111
10011
10001
10011
10111

LeftBouncer
White White Blue
.221.
2.1.2
21..2
2.1.2
.221.

RightBouncer
White White Blue
.122.
2.1.2
2..12
2.1.2
.122.

UpBouncer
White White Blue
.222.
2.1.2
21.12
1...1
.222.

DownBouncer
White White Blue
.222.
1...1
21.12
2.1.2
.222.

HudBG
black

Empty
black

PlayEmpty
black
.....
.....
.....
.....
.....


Ball
#003300 Green
.000.
01110
01110
01110
.000.

WinBall
LightBlue LightGreen
.000.
01110
01110
01110
.000.



BallUp
#003300 Green Black
.000.
01210
01110
01110
.000.

BallDown
#003300 Green Black
.000.
01110
01110
01210
.000.

BallLeft
#003300 Green Black
.000.
01110
02110
01110
.000.

BallRight
#003300 Green Black
.000.
01110
01120
01110
.000.




=======
LEGEND
=======
Background = Bg or HudBG
. = bg and PlayEmpty
S = Selection and PlayEmpty
- = HudDivider and Wall
H = HudBG and PlayEmpty
A = Arrow and HudBG
G = IconGO
W = Wall
O = Hole

L = LeftBouncer and HudBG
R = RightBouncer and HudBG
U = UpBouncer and HudBG
D = DownBouncer and HudBG

B = BallLeft
N = BallRight
M = BallUp
K = BallDown

Player = Selection


PlacedLeftbouncer = LeftBouncer and Selection
PlacedRightbouncer = RightBouncer and Selection
PlacedUpbouncer = UpBouncer and Selection
PlacedDownbouncer = DownBouncer and Selection

Bouncer = LeftBouncer or RightBouncer or UpBouncer or DownBouncer

emptyPlayer = Selection and PlayEmpty


ballSwitchLeft = Ball and LeftBouncer
ballSwitchRight = Ball and RightBouncer
ballSwitchUp = Ball and UpBouncer
ballSwitchDown = Ball and DownBouncer

ballSwitchedLeft = BallLeft and LeftBouncer
ballSwitchedRight = BallRight and RightBouncer
ballSwitchedUp = BallUp and UpBouncer
ballSwitchedDown = BallDown and DownBouncer

gameGo = Selection and IconGO
gameGoing =  Going



WinL = BallLeft and Hole
WinR = BallRight and Hole
WinU = BallUp and Hole
WinD = BallDown and Hole

Win = WinBall

MovingBall = Ball or BallLeft or BallRight or BallUp or BallDown

=======
SOUNDS
=======
SFX0 41242705 (place bouncer)
SFX1 73889302 (press go)
MovingBall Move 68254307 (ball move)
SFX2 68257500 (pocket ball)
SFX3 82752503 (ball switch direction)

================
COLLISIONLAYERS
================

Background

Arrow, Empty, LeftBouncer, RightBouncer, UpBouncer, DownBouncer, PlayEmpty, IconGO, Going, Hole
WinBall
Wall, Ball, BallUp, BallDown, BallLeft, BallRight
Selection, HudDivider


======
RULES
======

(action button: take icon to the right of the arrow, place under selector)
[action selection PlayEmpty][Arrow|LeftBouncer] -> [PlacedLeftbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|RightBouncer] -> [PlacedRightbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|UpBouncer] -> [PlacedUpbouncer][Arrow|Empty] SFX0
[action selection PlayEmpty][Arrow|DownBouncer] -> [PlacedDownbouncer][Arrow|Empty] SFX0

(win conditions)
[WinL] -> [Win] again SFX2
[WinR] -> [Win] again SFX2
[WinU] -> [Win] again SFX2
[WinD] -> [Win] again SFX2

(slide unused icons over to the left if there's space between them and the arrow)
right [Empty | Bouncer] -> [Bouncer | Empty]

(selector on top of go button -> signals game to run)
[action selection iconGO] -> [gameGoing] again SFX1

(make genericball match the direction of the bouncer)
[ballSwitchLeft]->[ballSwitchedLeft] again
[ballSwitchRight]->[ballSwitchedRight] again
[ballSwitchUp]->[ballSwitchedUp] again
[ballSwitchDown]->[ballSwitchedDown] again

(if ball is going to move on top of a bouncer, switch it to generic ball first)
right [Going][Bouncer | BallLeft] -> [Going][Bouncer | Left Ball] again SFX3
left  [Going][Bouncer | BallRight] -> [Going][Bouncer | Right Ball] again SFX3
up    [Going][Bouncer | BallDown] -> [Going][Bouncer | Down Ball] again SFX3
down  [Going][Bouncer | BallUp] -> [Going][Bouncer | Up Ball] again SFX3



(move the ball if Going)
[Going][BallLeft] -> [Going][LEFT BallLeft] again
[Going][BallRight] -> [Going][RIGHT BallRight] again
[Going][BallUp] -> [Going][UP BallUp] again
[Going][BallDown] -> [Going][DOWN BallDown] again



[Going] -> [Going] again

==============
WINCONDITIONS
==============

no MovingBall

=======
LEVELS
=======

message place bouncers, hit play

......w.....
..o...w.....
......w.....
......w.....
......w..b..
......s.....
............
g-----------
-hhadluhhhhh

message Level 2

............
......o.....
..s.........
......w.....
...o.....b..
......m.....
............
g-----------
-hhalurhhhhh

message Level 3

............
............
..o.wwww....
..s.n..b....
....wwww.o..
............
............
g-----------
-hhaudrlhhhh

message Level 4

............
............
..o......o..
............
............
.s..bbbb....
............
............
..o......o..
............
g-----------
-hhalrudu...

message Level 5

.....n......w...
..wwww.k....o.w.
......b..m......
...o............
.......w........
.....b.w........
......wwo.......
w.ww.www........
.o..............
....s...........
..........wwwo..
g---------------
-hhaddddddrrr...

message I didn't feel like making more levels

title Coin Counter

verbose_logging
run_rules_on_level_start
========
OBJECTS
========

Background
lightblue

wall
darkbrown

t
transparent

tl
transparent

tr
transparent

m
transparent

bl
transparent

br
transparent

b
transparent

corner
transparent

on
blue

off
darkbrown

one 1
transparent

two 2
transparent

three 3
transparent

four 4
transparent

five 5
transparent

six 6
transparent

seven 7
transparent

eight 8
transparent

nine 9
transparent

zero 0
transparent

player
green

coin
#ff0
.....
.000.
.0.0.
.000.
.....

ending
transparent

tens
transparent

carry
transparent

fiver
#ff0
..0..
.000.
00.00
.000.
..0..

star
#ff0 yellow orange
0.0.0
.121.
02.20
.121.
0.0.0

hund
transparent

won
transparent

last
transparent

fakecoin
#ff0
.....
.000.
.0.0.
.000.
.....
=======
LEGEND
=======

c = corner
l = tl
r = tr
w = bl
e = br
seg = t or l or r or m or w or e or b
num = zero or one or two or three or four or five or six or seven or eight or nine
p = player
k = coin
. = background
x = wall

! = t and coin
@ = l and coin
# = r and coin
$ = m and coin
% = w and coin
^ = e and coin
& = b and coin
* = c and coin

{ = t and fiver
} = l and fiver
; = r and fiver
: = m and fiver
' = w and fiver
" = e and fiver
, = b and fiver
/ = c and fiver

f = fiver

? = tens and wall

- = fakecoin

j = star
` = hund
z = ending
~ = last
=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
seg
corner
num
on
off
coin, fiver
star
player, wall
ending
tens
carry
won
hund
last
fakecoin
======
RULES
======

[last][ action player ]-> win
[last ][moving player] -> win
up [tens|no tens] -> [tens | tens]
down [tens|no tens] -> [tens | tens]

[> player | off] -> [stationary player | off]
late [player off] -> [off]

late [player coin] -> again
late [player fiver] -> again
late [player star] -> again

[player coin][zero no tens] -> [player][one]
[player coin][one no tens] -> [player][two]
[player coin][two no tens] -> [player][three]
[player coin][three no tens] -> [player][four]
[player coin][four no tens] -> [player][five]
[player coin][five no tens] -> [player][six]
[player coin][six no tens] -> [player][seven]
[player coin][seven no tens] -> [player][eight]
[player coin][eight no tens] -> [player][nine]
[player coin][nine no tens] -> [player][zero carry]

[player fiver][zero no tens] -> [player][five]
[player fiver][one no tens] -> [player][six]
[player fiver][two no tens] -> [player][seven]
[player fiver][three no tens] -> [player][eight]
[player fiver][four no tens] -> [player][nine]
[player fiver][five no tens] -> [player][zero carry]
[player fiver][six no tens] -> [player][one carry]
[player fiver][seven no tens] -> [player][two carry]
[player fiver][eight no tens] -> [player][three carry]
[player fiver][nine no tens] -> [player][four carry]

[carry no tens][zero tens] -> [][one tens]
[carry no tens ][one tens] -> [][two tens]
[carry no tens ][two tens] -> [][three tens]
[carry no tens ][three tens] -> [][four tens]
[carry no tens ][four tens] -> [][five tens]
[carry no tens ][five tens] -> [][six tens]
[carry no tens ][six tens] -> [][seven tens]
[carry no tens ][seven tens] -> [][eight tens]
[carry no tens ][eight tens] -> [][nine tens]
[carry no tens ][nine tens] -> [][zero tens carry]



[hund] -> [hund off]

[tens carry][hund off] -> [tens carry][hund on]
[player won] -> win

[star player][tens carry] -> [player won][tens no carry] again

[carry no tens] -> []
[seg no on] -> [seg on]
[seg off] -> [seg]

[m no tens][zero no tens] -> [m off][zero]
[l no tens][one no tens] -> [l off][one]
[w no tens][one no tens] -> [w off][one]
[m no tens][one no tens] -> [m off][one]
[t no tens][one no tens] -> [t off][one]
[b no tens][one no tens] -> [b off][one]
[l no tens][two no tens] -> [l off][two]
[e no tens][two no tens] -> [e off][two]
[l no tens][three no tens] -> [l off][three]
[w no tens][three no tens] -> [w off][three]
[b no tens][four no tens] -> [b off][four]
[w no tens][four no tens] -> [w off][four]
[t no tens][four no tens] -> [t off][four]
[r no tens][five no tens] -> [r off][five]
[w no tens][five no tens] -> [w off][five]
[r no tens][six no tens] -> [r off][six]
[l no tens][seven no tens] -> [l off][seven]
[w no tens][seven no tens] -> [w off][seven]
[m no tens][seven no tens] -> [m off][seven]
[b no tens][seven no tens] -> [b off][seven]
[w no tens][nine no tens] -> [w off][nine]

[seg  tens][zero  tens] -> [seg off tens][zero tens]
[l  tens][one tens] -> [l off tens][one tens]
[w  tens][one  tens] -> [w off tens][one tens]
[m  tens][one  tens] -> [m off tens][one tens]
[t  tens][one  tens] -> [t off tens][one tens]
[b  tens][one  tens] -> [b off tens][one tens]
[l  tens][two  tens] -> [l off tens][two tens]
[e  tens][two  tens] -> [e off tens][two tens]
[l  tens][three  tens] -> [l off tens][three tens]
[w  tens][three  tens] -> [w off tens][three tens]
[b  tens][four  tens] -> [b off tens][four tens]
[w  tens][four  tens] -> [w off tens][four tens]
[t  tens][four  tens] -> [t off tens][four tens]
[r  tens][five  tens] -> [r off tens][five tens]
[w  tens][five  tens] -> [w off tens][five tens]
[r tens][six  tens] -> [r off tens][six tens]
[l tens][seven  tens] -> [l off tens][seven tens]
[w tens][seven  tens] -> [w off tens][seven tens]
[m tens][seven  tens] -> [m off tens][seven tens]
[b tens][seven  tens] -> [b off tens][seven tens]
[w tens][nine  tens] -> [w off tens][nine tens]

 [hund on][seg off] -> [hund on][seg on]
 [hund on][m on] -> [hund on][m off]

[on off] -> [off]

[corner no off] -> [corner off]
[corner on] -> [corner]

[corner off|seg on] -> [corner on| seg on]







==============
WINCONDITIONS
==============
no coin
no fiver
all ending on player
=======
LEVELS
=======






x-xxxxxxxxx
xxxctcxctcx
xxxlxrxlxrx
xxxcmcxcmcx
xxxwxexwxex
xxxcbcxcbcx
xjx???xxxxx
xxxxxxxxxxx
xp0k0.k..kz
xxxxxxxxxxx

xxxxxxxxxxxxxxx
xxxxxxxctc....z
xxxxxxxlxrxxxxx
xxxxxxxcmcxxxxx
xxxxxxxwxexxxxx
p.3k.k.cbcxxxxx
xxxxxxxxxxxxxxx

xxxxxxzx
x?xxxx.x
x......x
x.xxxxxx
xckctckx
xrxlxrxx
xcxc$cxx
xexwxexx
xckcbckx
xxxxxx.x
p05....x
xxxxxxxx


x?xxxx?zx
xxxxxxx0x
xcx*!*x.x
xrxlxrx.x
xcx*$*x.x
xexwxex.x
xcx*&*1px
xxxxxxx.x

xx???xxxx?x
z.ctc.c!c.x
x.lxrx@x#.x
x.cmcxc$c.x
x9wxexwx^1x
x.cbc.cbc.x
xxxxxxxxxpx

x????xxxxxx
z.ctcfctc.p
x.lxrxlx#.x
x.cmcxcm*.x
x2wxexwx^4x
x.cbcfcbc.x
xxxxxxxxxxx

x????xxxxx
xctc3ctcxx
x@xrx}xrxx
xc$cxc:c7p
xwx^xwx".x
xc&cxc,c.x
xxxxxxxxzx

x????xxxpx
xctc6ctc.x
x}x;x@x#.x
xcmcxc$c1x
x'x"xwx^.x
xc,c.c&c.x
xxxxxxxxzx

xx???xxxxpx
x..k91.k..x
x.ctcxctc.x
xklxrxlxrkx
x.cmcxcmc.x
xkwxexwxekx
x.cbcxcbc.x
x..k...k..x
xzxxxxxxxxx



xpxxxxxxxxx
xkxxxxxxxxx
x`xctcxctcx
x`xlxrxlxrx
x`xcmcxcmcx
x`xwxexwxex
x`xcbcxcbcx
xjx???xxxxx
xxxxxxxxxxx
x.9.9.....z
xxxxxxxxxxx

xxx???xxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxx???xxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxx???.ctcxxxxxxxxxxxxxxxxxxxxxxxx
xxx???xlxrxxxxxxxxxxxxxxxxxxxxxxxx
xxx???xcmc..z.xxx.ctc..z.xxx.ctc.x
xxx???xwxe.xx.xxxxlxr.xx.xxxxlxr.x
xxx???xcbc.xx.xxxxcmc.xx.xxxxcmc.x
xxx???xxxxzxx.xxxxwxe.xx.xxxxwxe.x
xxx???xxxx.xx.xxx.cbc.xx.xxx.cbc.x
xxxctc.ctc.xxxxxxxxxxzxxxxxxxxxx.x
xxxl?rxlxr.xxxxxxxxxxxxxxxxxxxxxzx
xxxcmcxcmc.xxxxxxxxxxxxxxxxxxxxx.x
xxxw?exwxe.xxxxxx.....xxxxxxctcx.x
xxxcbc.cbc.xxxx..xxxxx..xxxxlxrx.x
xxx???xxxxzxxx.xxxxxxxxx.xxxcmcx.x
xxx???xxxx.xxx.xx.xxx.xx.xxxwxex.x
x..........xx.xxx.xxx.xxx.xxcbc..x
x.xxx?xctc.xx.xxx.x.x.xxx.xxxxxx.x
x.x?x?xlxr.xx.xxxxx~xxxxx.xxxxxxzx
x.xxx?xcmc.xx.xx..xxx..xx.xxxxxx.x
x.x?x?xwxe.xx.xx.......xx.x......x
x.xxx?xcbc.xx..xx.....xx.xx.xxxxxx
x..........xxx.xxx...xxx.xxx.ctc.x
xzx???xxxxxxxxx..xxxxx..xxxxxlxrxx
x.x???xxxxxxxxxxx.....xxxxxxxcmcxx
xxxctcxctcxxxxxxxxxxxxxxxxxxxwxexx
xxxl?rxlxrxxxxxxxxxxxxxxxxxx.cbc.x
xxxcmcxcmcxxxxxxxxxxxxxxxxxxxxxx.x
xxxw?exwxexxxxxxxxctc....z.......x
xxxcbcxcbcxxxxxxxxlxrxxxxxxxxxxxxx
xpx???xxxxxxxxxxxxcmcxxxxxxxxxxxxx
xxx???xxxxxxxxxxxxwxexxxxxxxxxxxxx
0...0.....z.......cbcxxxxxxxxxxxxx
xxx???xxxxxxxxxxxxxxxxxxxxxxxxxxxx




USER PROMPT:
The following PuzzleScript game code:
```plaintext
title Blocked Path
author PuzzleScript AI

========
OBJECTS
========

Background
lightgray
.....
.....
.....
.....
.....

Player
blue
..0..
.000.
..0..
.....
.....

Target
green
..0..
.0.0.
.000.
.0.0.
..0..

Wall
black
.....
.000.
.000.
.000.
.....

=======
LEGEND
=======

. = Background
P = Player
T = Target
# = Wall

=========
SOUNDS
=========

# Move 39625601
# EndLevel 24622400
# StartLevel 15297100

================
COLLISIONLAYERS
================

Background
Target
Wall
Player

======
RULES
======

[ > Player | Target ] -> [ > Player | Target ]
[ > Player | Wall ] -> [ Player | Wall ]

==============
WINCONDITIONS
==============

All Player on Target

=======
LEVELS
=======

message Welcome to Blocked Path!
##########
#........#
#..####..#
#..#..#..#
#..#P.#..#
#..#..#..#
#..####..#
#.....T..#
##########

message Congratulations! You reached the target.

```
compiled, but a solvability check returned the following error:
 Level 1 is not solvable. Please repair it.
Return your code in full, inside a ```plaintext code block.