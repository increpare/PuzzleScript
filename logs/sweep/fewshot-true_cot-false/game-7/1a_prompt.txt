SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title Octat
author increpare
homepage www.increpare.com

noundo
require_player_movement

(
    
A port of a flash game I made.  The original's here:

http://ded.increpare.com/~locus/octat/

)

========
OBJECTS
========

Background
purple
.....
.000.
.000.
.000.
.....

Activetile
pink red
00000
0...0
0...0
0...0
00000

Target
red
0...0
.0.0.
..0..
.0.0.
0...0

Player
white
.....
.000.
.000.
.000.
.....

Void 0
black

Temp
black

=======
LEGEND
=======

. = Background
P = Player and Activetile
a = Activetile
x = Target
y = target and Activetile

=========
SOUNDS
=========

================
COLLISIONLAYERS
================

Background
Void
Activetile
Player
Temp
Target

======
RULES
======

[ > Player | no Activetile ] -> cancel

late [ Activetile | Player ] -> [ Temp | Player ] 
late [ no Temp | Player ] -> [ Activetile | Player ] 
late [ Temp ] -> [ ] 

late [ Activetile Void ] -> [ Void ] 

==============
WINCONDITIONS
==============

some Player on target

=======
LEVELS
=======

message level 1 of 8

..........
..........
..........
..........
..........
.x...ap...
..........
..........
..........
..........

message level 2 of 8

...........
...........
...........
...........
...........
....xpa....
...........
...........
...........
...........

message level 3 of 8

...........
...........
...........
...........
..a........
.axaaap....
..a........
...........
...........
...........

message level 4 of 8

...........
...........
...a.......
..a.a......
.a.a.a.....
a.aya.a.ap.
.a.a.a.....
..a.a......
...a.......
...........

message level 5 of 8

...........
...........
...........
...........
aaaaaaaaaaa
...y..ap...
aaaaaaaaaaa
...........
...........
...........

message level 6 of 8

000000....0
000000..0.0
000000..0..
000000000..
....A...0.0
.AY.A...AAP
....A...0.0
000000000..
000000..0..
000000..0.0
000000....0

message level 7 of 8

..AAA...000
.AY.A...AP.
..AAA...000

message level 8 of 8

0AAAA..00
0AAAA..00
YAAAA..AP
0AAAA..00
0AAAA..00

message the end


title Simple Block Pushing Game
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
LIGHTGREEN GREEN
11111
01111
11101
11111
10111


Target
DarkBlue
.....
.000.
.0.0.
.000.
.....

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Player
Black Orange White Blue
.000.
.111.
22222
.333.
.3.3.

BlueCrate B
lightblue
00000
0...0
0...0
0...0
00000


OrangeCrate O
Orange
00000
0...0
0...0
0...0
00000


=======
LEGEND
=======

Crate = OrangeCrate or BlueCrate
. = Background
# = Wall
P = Player

=======
SOUNDS
=======

Crate MOVE 36772507

================
COLLISIONLAYERS
================

Background
Target
Player, Wall, Crate

======
RULES
======

[ >  Player | Crate ] -> [  >  Player | > Crate  ]


[ > OrangeCrate | OrangeCrate ] -> [ > OrangeCrate | > OrangeCrate ]
+[ > OrangeCrate | BlueCrate ] -> [ > OrangeCrate | > BlueCrate ]
+[ > BlueCrate | OrangeCrate ] -> [ > BlueCrate | > OrangeCrate ]
+[ > BlueCrate | BlueCrate ] -> [ > BlueCrate | > BlueCrate ]

==============
WINCONDITIONS
==============

=======
LEVELS
=======

################
#..............#
#..............#
#.P.BOBOBOBOB..#
#..............#
#..............#
################


title Cake Monsters
author Matt Rix
homepage www.magicule.com
color_palette whitingjp
text_color #FF5588
background_color #050A0A
noaction
youtube Z6ih1aKeETk (tycho!)

========
OBJECTS
========

(-----------------------)
(----MONSTER COLOURS----)
(-----------------------)

RedMon
#D8144D #B00F3F BLACK WHITE
00000
020.3
000..
00000
1..1.

YellowMon
#F3F333 #C7C829 BLACK WHITE
00000
020.3
000..
00000
1..1.

BlueMon
#0366E3 #0A52BB BLACK WHITE
00000
020.3
000..
00000
1..1.

PurpleMon
#9E14E2 #800FBA BLACK WHITE
00000
020.3
000..
00000
1..1.

OrangeMon
#E68A25 #BB711E BLACK WHITE
00000
020.3
000..
00000
1..1.

GreenMon
#1CED55 #15C346 BLACK WHITE
00000
020.3
000..
00000
1..1.

TrashMon
#7C6953 #6D5239 BLACK WHITE
00000
020.3
000..
00000
1..1.


(------------------------)
(------CAKE COLOURS------)
(------------------------)

RedCake
#D8144D #B00F3F
.000.
00000
00000
10001
.111.

YellowCake
#F3F333 #C7C829
.000.
00000
00000
10001
.111.

BlueCake
#0366E3 #0A52BB
.000.
00000
00000
10001
.111.


PurpleCake
#9E14E2 #800FBA
.000.
00000
00000
10001
.111.

OrangeCake
#E68A25 #BB711E
.000.
00000
00000
10001
.111.

GreenCake
#1CED55 #15C346
.000.
00000
00000
10001
.111.

TrashCake
#7C6953 #6D5239
.000.
00000
00000
10001
.111.

(-----------------------)
(------OTHER STUFF------)
(-----------------------)

Destroyer
#001111 #223333 #384949
.222.
20202
12021
10101
.111.

Background
#152020 #192525
01101
10110
01101
11010
01010


Wall
#334444 #384949 #445555 #475959 #4A6B6B
34443
23332
12221
01110
00000

Blackness
#050A0A


=======
LEGEND
=======


. = Background
_ = Blackness
# = Wall
X = Destroyer

R = RedMon
Y = YellowMon
B = BlueMon
P = PurpleMon
O = OrangeMon
G = GreenMon
T = TrashMon

Monster = RedMon or YellowMon or BlueMon or PurpleMon or OrangeMon or GreenMon or TrashMon
Player = Monster

PrimaryMon = RedMon or YellowMon or BlueMon
SecondaryMon = PurpleMon or OrangeMon or GreenMon

(each cake char is the next letter in the alphabet after the monster char)
(except for orange, sadly)
S = RedCake
Z = YellowCake
C = BlueCake
Q = PurpleCake
A = OrangeCake
H = GreenCake
U = TrashCake

Cake = RedCake or YellowCake or BlueCake or PurpleCake or OrangeCake or GreenCake or TrashCake

=======
SOUNDS
=======

sfx0 8478107 (move)
sfx1 18590508 (eat other monster)
sfx2 61437309 (eat cake)
sfx3 89161102 (monster destroyed)
startlevel 563108
endlevel 76028308
undo 82948709
restart 22851101

================
COLLISIONLAYERS
================

Background
Blackness, Wall, Destroyer
Monster,Cake



======
RULES
======

(------------------------)
(----MONSTER MOVEMENT----)
(------------------------)

(movement sound)
[ > Monster ] -> [ > Monster ] sfx0

(stop the monster if it hits a wall)
[ > Monster | Wall ] -> [ Monster | Wall]

(if monster hits a destroyer, remove the monster)
[ > Monster | Destroyer ] -> [ | Destroyer] sfx3

(monster eats cakes of the same color)
[ > RedMon | RedCake] -> [ | RedMon] sfx2
[ > BlueMon | BlueCake] -> [ | BlueMon] sfx2
[ > YellowMon | YellowCake] -> [ | YellowMon] sfx2
[ > PurpleMon | PurpleCake] -> [ | PurpleMon] sfx2
[ > OrangeMon | OrangeCake] -> [ | OrangeMon] sfx2
[ > GreenMon | GreenCake] -> [ | GreenMon] sfx2
[ > TrashMon | TrashCake] -> [ | TrashMon] sfx2

(stop the monster if it hits a cake of a different color)
(note: this is necessary to make sure the monster is marked as stationary)
[ > RedMon | Cake no RedCake] -> [ RedMon | Cake no RedCake]
[ > BlueMon | Cake no BlueCake] -> [ BlueMon | Cake no BlueCake]
[ > YellowMon | Cake no YellowCake] -> [ YellowMon | Cake no YellowCake]
[ > PurpleMon | Cake no PurpleCake] -> [ PurpleMon | Cake no PurpleCake]
[ > OrangeMon | Cake no OrangeCake] -> [ OrangeMon | Cake no OrangeCake]
[ > GreenMon | Cake no GreenCake] -> [ GreenMon | Cake no GreenCake]
[ > TrashMon | Cake no TrashCake] -> [ TrashMon | Cake no TrashCake]

(--------------------------)
(---MONSTER COLOR MIXING---)
(--------------------------)

(red+blue = purple)
[ > BlueMon | stationary RedMon] -> [ | PurpleMon] sfx1
[ > RedMon | stationary BlueMon] -> [ | PurpleMon] sfx1

(red+yellow = orange)
[ > RedMon | stationary YellowMon] -> [ | OrangeMon] sfx1
[ > YellowMon | stationary RedMon] -> [ | OrangeMon] sfx1

(blue+yellow = green)
[ > BlueMon | stationary YellowMon] -> [ | GreenMon] sfx1
[ > YellowMon | stationary BlueMon] -> [ | GreenMon] sfx1

(primary color + secondary color = brown aka trash)
[ > PrimaryMon | stationary SecondaryMon] -> [ | TrashMon] sfx1
[ > SecondaryMon | stationary PrimaryMon] -> [ | TrashMon] sfx1

(green+orange = trash)
[ > GreenMon | stationary OrangeMon] -> [ | TrashMon] sfx1
[ > OrangeMon | stationary GreenMon] -> [ | TrashMon] sfx1

(purple+orange = trash)
[ > PurpleMon | stationary OrangeMon] -> [ | TrashMon] sfx1
[ > OrangeMon | stationary PurpleMon] -> [ | TrashMon] sfx1

(green+purple = trash)
[ > GreenMon | stationary PurpleMon] -> [ | TrashMon] sfx1
[ > PurpleMon | stationary GreenMon] -> [ | TrashMon] sfx1

(trash+anything = trash)
[ > TrashMon | stationary Monster] -> [ | TrashMon] sfx1
[ > Monster | stationary TrashMon] -> [ | TrashMon] sfx1

(monster + monster of the same color = monster of the same color)
[ > Monster | stationary Monster] -> [ | Monster] sfx1


==============
WINCONDITIONS
==============

No Cake


=======
LEVELS
=======


message WELCOME TO CAKE MONSTERS!
message MONSTERS LIKE EATING CAKE

_______
#######
#.....#
#.r...#
#...s.#
#.....#
#######
_______
(diff 0)

message YOU MOVE ALL OF THE MONSTERS

######_######
#....#_#z...#
#.r..#_#....#
#..s.#_#....#
#....#_#...y#
######_######
_____________
######_######
#.c..#_#....#
#....#_#...h#
#..b.#_#g...#
#....#_#....#
######_######
(diff 0)

message MONSTERS ONLY LIKE THEIR OWN CAKE
message REMEMBER: Z TO UNDO, R TO RESTART
_________
#########
#r.z....#
#######.#
#.......#
#.sy....#
#########
_________
(diff 1)

message MONSTERS MIX WHEN THEY GET EATEN
_________
#########
#.......#
#.#####.#
#.r.q.b.#
#.#####.#
#.......#
#########
_________
(diff 1)


message BROWN + ANY COLOR = BROWN
__________
##########
#........#
#.rybpog.#
#........#
#........#
#.szcqah.#
#........#
#........#
#.uuuuuu.#
#........#
##########
__________
(diff 1)


message HAVE FUN!
############
#y........c#
#b........z#
#####..#####
____#..#____
____#..#____
____#hh#____
____####____
(diff 1)

(----------------------------)


_____
#####
#RCQ#
#.CS#
#Q.B#
#####
_____
(diff 2)




______
######
#R...#
#B...#
#Q.QQ#
#CSCS#
######
______
(diff 2)

_______
#######
#R.H.B#
#.....#
#.....#
#Y.Q.B#
#######
_______
(diff 2)

_______
#######
#CCHCB#
#.....#
#YZHZZ#
#######
_______
(diff 2)


______
######
#R..B#
#S.C.#
#.A.C#
#Y.C.#
######
______
(diff 2)


message PIECE OF CAKE, RIGHT?


#########
#ccccccc#
#bcccccc#
######cc#
_____#ch#
######zz#
#yzzzzzz#
#yzzzzzz#
######zz#
_____#sa#
######ss#
#rssssss#
#sssssss#
#########
(diff 3, fun)

_______
#######
#R.B.Y#
#Y.B.R#
#R.B.Y#
#Y.B.R#
#AHQHA#
#######
_______
(diff 3)


_______
#######
#AR.BA#
#.#.#.#
#H...H#
##.A.##
#HY#YH#
#######
_______
(diff 3)



message X TILES DESTROY MONSTERS
_________
_###_###_
#...#...#
#.q.x.p.#
#...x...#
_#..x..#_
__#...#__
___#.#___
____#____
_________
(diff 0, destroyerz)


_____
#####
#RAR#
#RXY#
#YAY#
#####
_____
(diff 1, destroyerz)

______
######
#BHHB#
#YXXY#
#YXXY#
#BHHB#
######
______
(diff 1 destroyerz)

_______
#######
#RQXQR#
#SQXQS#
#BQXQB#
#######
_______
(diff 1 destroyerz)

___________
#####_#####
#sss#_#qqq#
#sss###qqq#
#x.......x#
##x.rxb.x##
#x.......x#
#qqq###ccc#
#qqq#_#ccc#
#####_#####
___________
(diff 2 destroyerz)

___________
###########
#...#q#.b.#
#sxr#.#xx.#
#.x.....c.#
###########
___________
(diff 3 destroyerz)



message YOU'RE CAKING THIS LOOK EASY!

______
######
#RZSZ#
#YSZS#
#..SZ#
#..ZS#
######
______
(diff 3)


#######
#Y#B#Y#
#.#R#.#
#.#.#.#
#.....#
#.###.#
#HHAHH#
#######
(diff 3, fun!)



####__####
#qc####cb#
#c......c#
##.####.##
_#.#xx#.#_
_#.c.r#.#_
##.####.##
#c......c#
#qc####cq#
####__####
(diff 3)




_#########_
_#rrr.sss#_
_#.......#_
_#yyy.zzz#_
_#.......#_
##bbb.ccc##
#.........#
#.q..a..h.#
#.........#
###########

______
######
#RA.Y#
#....#
#HH..#
#SBCY#
######
______
(diff 4)

message LET'S CAKE IT TO THE NEXT TIER!


#############
#...#.h.#...#
#.r.#...#.y.#
#...c#c#s...#
###c.....s###
#..#.#h#.#..#
#z.h.z.c.s.c#
#..#.#s#.#..#
###......z###
#....#z#z...#
#.b.#...#.g.#
#...#.s.#...#
#############
(diff 3, easy but fun)


_____
#####
#B.B#
#RRY#
#.Q.#
#S.S#
#CHC#
#####
_____
(diff 5 - fun!)


______
######
#HYBH#
#YBYB#
#BBBB#
#HHHH#
######
______
(diff 4)




______
######
#BR.Y#
#..A.#
#SCZA#
#CSZA#
######
______
(diff 4)




______
######
#CZG.#
#ZCR##
###..#
#SHY##
#HSB.#
######
______
(diff 5 - very fun!)


message YOU'RE GETTING BATTER!

______
######
#YYYY#
#...R#
#AAAA#
#ZZZZ#
######
______
(diff 5 - fun but surprisingly hard)


_______
#######
#Y..YA#
#.BB.H#
#R..RQ#
#Y..YH#
#######
_______
(diff 4)


message ICING ON THE CAKE!

______
######
#ZBBZ#
#YBYB#
#....#
#ZHCZ#
######
______
(diff 5)




_______
#######
#A.S.A#
#.Z.Z.#
#SYRYS#
#.ZYZ.#
#A.S.A#
#######
_______
(diff 5 - not too hard)



message WILL YOU CAKE IT OUT ALIVE?
______
######
#ZZZZ#
#SSSS#
#CCCC#
#YRB.#
######
______
(diff 6 - fun but tricky)




message THE FINAL CHALLENGE!
message DOUGH YOU HAVE WHAT IT CAKES?
_____
#####
#AYA#
#...#
#CBC#
#SZY#
#RZS#
#CBC#
#...#
#HOH#
#####
_____
(diff 8 - a pretty tough one)



message WELL, YOU REALLY TOOK THE CAKE!
message CONGRATS, YOU WIN! :)




(
level ideas
push battery horizontally
have to assemble and then disassemble a circuit, in order to complete it
add a piece to a circut, then break the circuit from another point
level that starts with a closed circuit
level with very dangerous + block
)
title LED Challenge
author increpare
homepage www.increpare.com

run_rules_on_level_start
color_palette famicom


========
OBJECTS
========

Background .
darkgreen green
00000
00000
00100
00000
00000


Player
Black brown grey Blue
.111.
.111.
22222
13331
.3.3.


Player_Dead
darkgrey darkgrey darkgrey darkgrey
.111.
.111.
22222
.333.
.3.3.

Wall #
black

Red_Off R
black DarkRed
.....
..1..
.101.
.101.
.101.

Red_On T
pink red
.....
..1..
.101.
.101.
.101.


Green_Off G
black Green
.....
..1..
.101.
.101.
.101.

Green_On H
Green LightGreen
.....
..1..
.101.
.101.
.101.


Blue_Off B
black DarkBlue
.....
..1..
.101.
.101.
.101.

Blue_On N
Blue LightBlue
.....
..1..
.101.
.101.
.101.

Battery_H C
Grey lightgrey
.000.
.010.
01110
.010.
.000.

Battery_V O
Grey lightgrey
..0..
00100
01110
00100
..0..


cable_h q
grey
.....
.....
00000
.....
.....

cable_v e
grey
..0..
..0..
..0..
..0..
..0..

cable_ul w
grey
..0..
..0..
000..
.....
.....

cable_ur d
grey
..0..
..0..
..000
.....
.....

cable_dr s
grey
.....
.....
..000
..0..
..0..

cable_dl a
grey
.....
.....
000..
..0..
..0..


cable_omni z
grey
..0..
..0..
00000
..0..
..0..

cable_dlr i
grey
.....
.....
00000
..0..
..0..

cable_ulr k
grey
..0..
..0..
00000
.....
.....

cable_udr j
grey
..0..
..0..
..000
..0..
..0..

cable_udl l
grey
..0..
..0..
000..
..0..
..0..


light
black

light_up
yellow
.000.
.000.
.000.
.....
.....

light_down
yellow
.....
.....
.000.
.000.
.000.

light_Left
yellow
.....
000..
000..
000..
.....

light_right
yellow
.....
..000
..000
..000
.....

=======
LEGEND
=======

P = Player
Unlit = Blue_Off or Green_Off or Red_Off
Lit = Blue_On or Green_On or Red_On
Cable = Cable_h or Cable_v or Cable_dr or Cable_dl or Cable_ul or Cable_ur or Cable_UL or Cable_UR or Cable_UDR or Cable_ULR or Cable_UDL or Cable_DLR or Cable_Omni
Battery = Battery_H or Battery_V
Item = Unlit or Lit or Battery or Cable
Cable_Up = Cable_V or Cable_UL or Cable_UR or Battery_V or Cable_UDR or Cable_ULR or Cable_UDL or Cable_Omni or  Player
Cable_Down = Cable_V or Cable_DL or Cable_DR or Battery_V or Cable_UDR or Cable_UDL or Cable_DLR or Cable_Omni or Player
Cable_Left = Cable_H or Cable_UL or Cable_DL or Battery_H  or Cable_ULR or Cable_UDL or Cable_DLR or Cable_Omni or Player
Cable_Right = Cable_H or Cable_UR or Cable_DR or Battery_H or Cable_UDR or Cable_ULR or Cable_DLR or Cable_Omni or Player
LightEffect = Light_Up or Light_Down or Light_Left or Light_Right
Object = Player or Item
Player_Dying = Player and Light

=======
SOUNDS
=======

EndLevel 39731502
EndGame 20540505
Player Move 6330907
Player_Dead Create 44233902

================
COLLISIONLAYERS
================

Background
Light
Light_Up
Light_Down
Light_Left
Light_Right
Player, Player_Dead, Wall, Item

======
RULES
======

(init stage)
[ Light ] -> [ ]
[ LightEffect no Player] -> [ ]
[ Red_On ] -> [ Red_Off ]
[ Green_On ] -> [ Green_Off ]
[ Blue_On ] -> [ Blue_Off ]

(movement)
[ >  Object | Object ] -> [  > Object | > Object ]

(do circuits)
startLoop
late [ Battery ] -> [ Light Battery ]

late left [ Player | Light_Right ] -> [ Light Player | Light_Right ]
late right [ Player | Light_Left ] -> [ Light Player | Light_Left ]
late up [ Player | Light_Down ] -> [ Light Player | Light_Down ]
late down [ Player | Light_Up ] -> [ Light Player | Light_Up ]

late up [ Player_Dead | Light_Down ] -> [ Light Player_Dead | Light_Down  ]
late down [ Player_Dead | Light_up ] -> [ Light Player_Dead | Light_up  ]

late left [ Cable_Left | Light_Right ] -> [ Light Cable_Left | Light_Right ]
late right [ Cable_Right | Light_Left ] -> [ Light Cable_Right | Light_Left ]
late up [ Cable_Up | Light_Down ] -> [ Light Cable_Up | Light_Down ]
late down [ Cable_Down | Light_Up ] -> [ Light Cable_Down | Light_Up ]

late down [ Red_Off | Light_Up ] -> [ Red_On | Light_Up ]
late down [ Green_Off | Light_Up ] -> [ Green_On | Light_Up ]
late down [ Blue_Off | Light_Up ] -> [ Blue_On | Light_Up ]

late [ Light Cable_Up ] -> [ Light Light_Up Cable_Up ]
late [ Light Cable_Down ] -> [ Light Light_Down Cable_Down ]
late [ Light Cable_Left ] -> [ Light Light_Left Cable_Left ]
late [ Light Cable_Right ] -> [ Light Light_Right Cable_Right ]
endLoop

late [ Player Light ] -> again
late [ Player_Dead Light ] -> again
late [ Player LightEffect ] -> [ Player_Dead LightEffect ]   again
late [ Player_Dead Light ] -> [ Player_Dead ]

==============
WINCONDITIONS
==============

No Unlit
No Player_Dead

=======
LEVELS
=======

message Level 1 of 4

......
.r.g..
..o.p.
.w.d..
......

message Level 2 of 4

.....##.....
.....##.w.d.
..c.........
...p....r.g.
.....##.....

message Level 3 of 4

.......
..rgb..
..wkd..
...o...
.....p.
.......

message Level 4 of 4

...........
...ccccc...
.d.crcgc.w.
...ccccc...
..........p

(
message Level 5 of 3

.......
.bgrgb.
rdzczwr
dqw.dqw
.......
)

message Congratulations

title Slidings
author Alain Brobecker
homepage abrobecker.free.fr

========
OBJECTS
========

Background
#d8a96c #e5b679
11111
10101
11111
10101
11111

Target
DarkBlue
.....
.000.
.0.0.
.000.
.....

Wall
#88bbbb #448888
11111
01111
11101
11111
10111

OverWall
#88bbbb #448888
11111
01111
11101
11111
10111

Count
#88bbbb #448888 White
11111
02221
12221
12221
10111

CountEnd
#88bbbb #448888
11111
01111
11101
11111
10111

Player
#88ff22 #44ff00 #11cc00
.112.
10012
10012
21122
.222.

PlayerHasMoved
#ffe02c #ffc700 #c87700
.112.
10012
10012
21122
.222.

DeadPlayer
#ffe02c #ffc700 #c87700
.112.
10012
10012
21122
.222.

BallA
#999999 #777777 #444444
.112.
10012
10012
21122
.222.

BallB
#999999 #777777 #444444
.112.
10012
10012
21122
.222.

BallC
#999999 #777777 #444444
.112.
10012
10012
21122
.222.


=======
LEGEND
=======

. = Background
# = Wall
A = BallA
B = BallB
C = BallC
D = BallB and OverWall
E = BallC and OverWall
P = Player
O = Target
m = Count
n = CountEnd

Item = Player or Wall or BallA or BallB or BallC or Count or CountEnd

=======
SOUNDS
=======

sfx0 5160507 (move)
sfx1 83704102 (wrong move)
sfx2 16709508
EndLevel 123413 (win)
EndGame 10475908

================
COLLISIONLAYERS
================

Background
Target
Player, Wall, BallA, BallB, BallC, Count, CountEnd, DeadPlayer, PlayerHasMoved
OverWall

======
RULES
======

(Player movements)
[> Player | Item] -> [ Player | Item] sfx1
[> Player | No Item] -> [ | > Player] again sfx0
[> Player] -> [ PlayerHasMoved ]

(swap between balls)
[Action Player] [BallA] [BallB] [BallC] -> [BallC] [Player] [BallA] [BallB]
[ Player OverWall ] [BallA] [BallB] [BallC] -> [BallC OverWall ] [Player] [BallA] [BallB] again

(count remaining moves)
[ PlayerHasMoved ] [ Wall | CountEnd | Wall ] ->  [ DeadPlayer ] [Wall | Wall | Wall]
[ DeadPlayer ] -> [ DeadPlayer ] sfx2
[ DeadPlayer ] -> restart
[ PlayerHasMoved ] [ Count | CountEnd ] -> [Player] [CountEnd | Wall ]
[ PlayerHasMoved ] -> [ Player ]

==============
WINCONDITIONS
==============

All Player on Target

=======
LEVELS
=======

(you must always have a # before the first counter)

message Bring a ball on the spot.         X to control next sliding ball.                                                                          level 1: 3 moves
#mmmn#
#PA..#
#..O.#
D####E

message level 2: 4 moves
#mmmmn
#.O..#
#P####
#A####
D####E

message level 3: 4 moves
#mmmmn#
#PAO..#
##....#
D#####E

message level 4: 5 moves
#mmmmmn
#.....#
#..O..#
#PA####
D#####E

message level 5: 7 moves
##mmmmmmmn
##..O..P##
#.......A#
D########E

message level 6: 7 moves
#mmmmmmmn
#P.A....#
#.......#
#.......#
#..O#...#
#.......#
#.......#
#B......#
########E

message level 7: 8 moves
#mmmmmmm
#.O.#P.m
#...#ABn
#......#
#...#..#
#...#..#
#######E

message level 8: 5 moves
#mmmmmn
#....P#
#A.O..#
#B....#
#.C...#
#######

message level 9: 9 moves
#mmmmmmm
##..P..m
##.....m
##..O..n
##A....#
##....B#
#######E

message level 10: 9 moves
#mmmmmmm
###..##m
##...P#m
#..O...n
#......#
##.A..##
###..###
D######E

message level 11: 13 moves
mmmmmmmm
m.P....m
m...O..m
#A....nm
D######E



title maze generator
run_rules_on_level_start
again_interval 0

========
OBJECTS
========

Background .
black white
00000
01110
01110
01110
00000

Player P
transparent

visited
transparent

filler
transparent

w_up
white
.000.
.000.
.000.
.000.
.....

w_down
white
.....
.000.
.000.
.000.
.000.

w_left
white
.....
0000.
0000.
0000.
.....

w_right
white
.....
.0000
.0000
.0000
.....

to_delete
transparent

temp
transparent

tempA
transparent

=======
LEGEND
=======


=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Player
filler
visited
w_up
w_down
w_left
w_right
to_delete
temp
tempA

======
RULES
======

(place player randomly on the first turn only)
random [ no filler ] -> [player visited]
[no filler] -> [filler]

(propagate path until you can't move any more)
random [ player |  no visited ] ->  [  visited > to_delete |  < to_delete player ] again

(if you can't extend the current path, continue from some random other neighbouring point)
[player | no visited ] -> [ player tempA | ]
random [player no tempA] [ visited | no visited ] -> [ visited ] [ visited player |  ] again
[tempA]->[]

[ up to_delete ] -> [ w_up ]
[ down to_delete ] -> [ w_down ]
[ left to_delete ] -> [ w_left ]
[ right to_delete ] -> [ w_right ]

==============
WINCONDITIONS
==============


=======
LEVELS
=======

........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................
........................................




title Extended Bodies:Multiple Parallel Players, Multiple Extended Object
author Anonymous
homepage www.puzzlescript.net

verbose_logging

(
    
THIS IS A DELIBERATELY BROKEN GAME, JUST FOR ILLUSTRATION

see https://www.puzzlescript.net/Documentation/rigidbodies.html#parallel_many
)


========
OBJECTS
========

Background 
white  

Target 
DarkBlue    

Wall 
DarkGrey

Player
Blue
..0..
..0.0
00000
.000.
.0.0.

( three multi-cells blocks )
Crate 
orange

Chest
green

Box
red

( 1-cell small block )
Small
darkred
.....
.000.
.000.
.000.
.....

( sticky, multicellular block when in contact )
Glue
pink
.000.
00000
00000
00000
.000.

( a flag to know what is allowed move )
Wanna_Move
#ff00ff
.....
.....
..0..
.....
.....

=======
LEGEND
=======

. = Background
# = Wall
P = Player
* = Crate
+ = Box
% = Chest
o = Small
g = Glue

( blocks that can be moved by the player )
Movable = Crate or Box or Chest or Small or Glue

( all things that can move and push blocks )
Mover = Player or Movable

( things that can stop a movement if they are stationary )
Obstacle = Wall or Mover

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Target
Obstacle
Wanna_Move

======
RULES     
======     

( 1. Propagate movements forward )
[ > Mover | Movable ] -> [ > Mover | > Movable  ]
+ [ > Box    ] [ Box   ] -> [ > Box    ] [ > Box    ]
+ [ > Crate  ] [ Crate ] -> [ > Crate  ] [ > Crate  ]
+ [ > Chest  ] [ Chest ] -> [ > Chest  ] [ > Chest  ]
+ [ moving Glue | Glue ] -> [ moving Glue | moving Glue ]

( 2. Propagate obstructions backwards )
[ > Mover  | stationary Obstacle ] -> [ stationary Mover | Obstacle ]
+ [ > Crate  ] [ stationary Crate ] -> [ stationary Crate ] [ Crate ]
+ [ > Box    ] [ stationary Box   ] -> [ stationary Box   ] [ Box   ]
+ [ > Chest  ] [ stationary Chest ] -> [ stationary Chest ] [ Chest ]
+ [ moving Glue | stationary Glue ] -> [ stationary Glue | Glue ]

( 3. remove all movement, keep a flag )
[ > Movable ] -> [ Movable wanna_move ]

( 4. propagate movement only on wanna_move things )
(    ie redo step 1 but with WANNA_MOVE added to the first line below )
[ > Mover  | Movable WANNA_MOVE ] -> [ > Mover | > Movable ]
+ [ > Box   ] [ Box   ] -> [ > Box   ] [ > Box   ]
+ [ > Crate ] [ Crate ] -> [ > Crate ] [ > Crate ]
+ [ > Chest ] [ Chest ] -> [ > Chest ] [ > Chest ]
+ [ moving Glue | Glue ] -> [ moving Glue | moving Glue ]

( 5. cleanup, remove flag )
[ wanna_move ] -> [ ]

==============
WINCONDITIONS
==============

=======     
LEVELS
=======

###################
#.................#
#.................#
#...*..g.g.#......#
#...*......#...g###
#...*...o.%%%.....#
#...+++.o.%.......#
#....+....%%%.....#
#....+.....P...g..#
#....p.gg.........#
###################


title Multiple Patterns
author increpare
homepage www.puzzlescript.net

========
OBJECTS
========

Background
lightgreen green
11111
01111
11101
11111
10111

Wall
brown darkbrown
00010
11111
01000
11111
00010

Player
black orange white blue
.000.
.111.
22222
.333.
.3.3.

Sumo
pink white
..0..
00000
.000.
.111.
.0.0.

=======
LEGEND
=======

. = Background
# = Wall
P = Player
S = Sumo

=======
SOUNDS
=======

Sumo MOVE 48878907

================
COLLISIONLAYERS
================

Background
Player, Wall, Sumo

======
RULES
======

[ > Player ] [ Sumo ] -> [ > Player ] [ > Sumo ] 

==============
WINCONDITIONS
==============

=======
LEVELS
=======

########
#......#
#......#
#.P..S.#
#......#
#......#
########


title Zen Puzzle Garden
author lexaloffle
homepage www.lexaloffle.com

(

A replication, with some really bad levels, of the rather superior Zen Puzzle Garden.  Made with permission of the unfailingly lovely Joseph White.

http://www.lexaloffle.com/zen.htm

)

========
OBJECTS
========

Background
orange brown
00100
00000
00010
10000
00000

Player
white black
.0.0.
01010
00000
.000.
11.11

Rock
grey darkgrey yellow
21002
11000
11000
11000
11101

UnbrushedSand
yellow orange
00000
01000
00000
00010
00000

HBrushedSand
yellow orange
00000
01011
00000
11010
00000

VBrushedSand
yellow orange
01000
01010
00000
01010
00010

=======
LEGEND
=======

BrushedSand = HBrushedSand or VBrushedSand
Sand = UnbrushedSand or BrushedSand
Obstacle = BrushedSand or Rock
; = Background
O = Rock
. = UnbrushedSand
P = Player

=========
SOUNDS
=========

closemessage 52854909
startgame 64192309
endlevel 16398509
endgame 62100709

================
COLLISIONLAYERS
================

Background
Sand
Player, Rock

======
RULES
======

(The h and v sand effects are cosmetic - how could this be done in a single line if there was only one type of brushed sand?)

horizontal [ UnbrushedSand > Player ] -> [ HBrushedSand > Player ] 
vertical [ UnbrushedSand > Player ] -> [ VBrushedSand > Player ] 

late [ Player BrushedSand ] -> cancel

==============
WINCONDITIONS
==============

no UnbrushedSand

=======
LEVELS
=======

message level 1 of 5

;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;......;;;
;;;......;;;
;;;......;;;
;P;..OO..;;;
;;;......;;;
;;;......;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;

message level 2 of 5

;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;......;;;
;;;....O.;;;
;;;......;;;
;P;..O...;;;
;;;......;;;
;;;......;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;

message level 3 of 5

;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;......;;;
;;;...O..;;;
;;;......;;;
;P;.O....;;;
;;;....O.;;;
;;;......;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;

message level 4 of 5

;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;..OO..;;;
;;;O....O;;;
;P;..OO..;;;
;;;O....O;;;
;;;..OO..;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;

message level 5 of 5

;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;O.....;;;
;;;..O.O.;;;
;;;O...O.;;;
;P;..O...;;;
;;;O...O.;;;
;;;..O...;;;
;;;;;;;;;;;;
;;;;;;;;;;;;
;;;;;;;;;;;;

message congratulations!


USER PROMPT:
The following PuzzleScript game code:
```plaintext
title Collect the Coins
author YourName
homepage www.example.com

========
OBJECTS
========

Background
blue

Wall
darkblue
00000
02220
02220
02220
00000

Player
green
.111.
.1.1.
.111.
...1.
.....

Coin
yellow
.....
..3..
.333.
..3..
.....

Enemy
red
.333.
3...3
3...3
3...3
.333.

=======
LEGEND
=======

. = Background
# = Wall
P = Player
C = Coin
E = Enemy

=========
SOUNDS
=========

collect 44564808
hit 78564407
win 56233809

================
COLLISIONLAYERS
================

Background
Player, Enemy, Wall, Coin

======
RULES
======

# Player collects coin
[ > Player | Coin ] -> [ > Player | ]

# Player hits enemy (temporary end game example)
[ > Player | Enemy ] -> [ Player | Enemy ] sfx2

# Enemies move automatically
up [ Enemy | Background ] -> [ | Enemy ]
(Enemies move up)

down [ Enemy ] -> [ Enemy ]
(Keep moving down if nothing is in the way)

==============
WINCONDITIONS
==============

no Coin

=======
LEVELS
=======

message Collect all the coins!

#######
#.....#
#.P.#C#
#...E.#
#C.#..#
#.....#
#######

message Level 2: More challenges!

#######
#.....#
#.P.#.#
#....C#
#C.#E.#
#.....#
#######

message Congratulations! You collected all the coins!

```
produced the following console output:
=================================
line 15 : Trying to access color number 2 from the color palette of sprite WALL, but there are only 1 defined in it.
line 16 : Trying to access color number 2 from the color palette of sprite WALL, but there are only 1 defined in it.
line 17 : Trying to access color number 2 from the color palette of sprite WALL, but there are only 1 defined in it.
line 22 : Trying to access color number 1 from the color palette of sprite PLAYER, but there are only 1 defined in it.
line 23 : Trying to access color number 1 from the color palette of sprite PLAYER, but there are only 1 defined in it.
line 24 : Trying to access color number 1 from the color palette of sprite PLAYER, but there are only 1 defined in it.
too many errors, aborting compilation
Errors detected during compilation; the game may not work correctly.
Return a repaired version of the code that addresses these errors. Return your code in full, inside a ```plaintext code block.