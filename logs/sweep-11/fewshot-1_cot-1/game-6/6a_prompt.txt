SYSTEM PROMPT:
You are a game designer, familiar with the PuzzleScript game description language. Here are some example games, for inspiration (do not reproduce these games exactly):

title cute train
author Mark Wonnacott
homepage http://twitter.com/ragzouken

flickscreen 16x10
color_palette pastel
youtube pTgEXwzk7XU

noundo
norestart

========
OBJECTS
========

Background
lightgreen green
01000
00110
10010
10100
01001

Water
blue white lightblue
20010
02002
12020
00220
02002

Water2
blue white lightblue
02000
20210
00202
01022
20200

Gerald
blue black
.000.
01010
10001
01110
.000.

Mountain
darkbrown darkbrown
..0..
.10..
.000.
0000.
11001

Forest
darkgreen brown
.000.
00000
00000
00100
.111.

Beach
yellow white
00010
01000
00001
00100
10000

Player
yellow black
.000.
01010
10001
01110
.000.

GhostVTrack
yellow
GhostHTrack
yellow
GhostURTrack
yellow
GhostULTrack
yellow
GhostDLTrack
yellow
GhostDRTrack
yellow

VTrack
grey darkbrown
0...0
0...0
01110
0...0
0...0

HTrack
grey darkbrown
00000
..1..
..1..
..1..
00000

Structs
black darkbrown
11111
10101
11111
10101
11111

URTrack
grey darkbrown
...00
..0..
.01..
0..1.
0...1

ULTrack
grey darkbrown
00...
..0..
..10.
.1..0
1...0

DLTrack
grey darkbrown
1...0
.1..0
..10.
..0..
00...

DRTrack
grey darkbrown
0...1
0..1.
.01..
..0..
...00

UTrain
red black darkred
.000.
01110
00000
00100
00000

RTrain
red black darkred
0000.
00010
01010
00010
0000.

LTrain
red black darkred
.0000
01000
01010
01000
.0000

DTrain
red black darkred
00000
00100
00000
01110
.000.

Cart
red black darkred
22222
21112
21112
21112
22222

Smoke1
white
..0..
.0.0.
0.0.0
.0.0.
..0..

Smoke2
white
.....
.0.0.
..0..
.0.0.
.....

Smoke3
white
.....
..0..
.0.0.
..0..
.....

Switch
red black
...0.
..1..
.1...
.111.
.....

=======
LEGEND
=======

. = Background
^ = Mountain
% = Forest
~ = Water
, = Beach

| = VTrack
- = HTrack
r = URTrack
¬ = ULTrack
l = DRTrack
j = DLTrack
X = VTrack and Structs
Z = HTrack and Structs
Q = ULTrack and Structs

P = Player

T = VTrack and UTrain
C = VTrack and Cart

[ = HTrack and RTrain
] = HTrack and Cart

/ = Switch

1 = GhostHTrack and URTrack
! = HTrack and GhostURTrack
2 = HTrack and GhostDRTrack
3 = HTrack and GhostULTrack
4 = GhostHTrack and DLTrack
5 = GhostVTrack and URTrack
6 = GhostVTrack and DRTrack
7 = GhostVTrack and ULTrack
8 = GhostVTrack and DLTrack

_ = Beach and HTrack

WaterR = Water or Water2

Ghost = GhostHTrack or GhostVTrack or GhostULTrack or GhostURTrack or GhostDLTrack or GhostDRTrack
Track = HTrack or VTrack or ULTrack or URTrack or DLTrack or DRTrack

Train = UTrain or DTrain or LTrain or RTrain
Vehicle = Train or Cart
Mover = Vehicle or Player

G = Gerald and Structs

=======
SOUNDS
=======

Train move 91301709
SFX1 53409305
SFX2 38557307
SFX3 99431502

================
COLLISIONLAYERS
================

Background
Beach GhostVTrack GhostHTrack GhostURTrack GhostULTrack GhostDLTrack GhostDRTrack
Structs
VTrack HTrack URTrack ULTrack DLTrack DRTrack Switch
Water Water2 Mountain Forest Player UTrain RTrain LTrain DTrain Cart Gerald
Smoke1 Smoke2 Smoke3

======
RULES
======

(animate water)
[        WaterR ] -> [ action WaterR ]
[ action WaterR ] -> [ random WaterR ]

[ action Player no Structs | Cart ] [ Train ] -> [ Player | Cart ] [ action Train ]

(move the train if we're on the impassable structs)
[ Structs Mover ] [ Train ] -> [ Structs Mover ] [ action Train ]

[ action Train ] -> [ action Train Smoke1 ]

[ action UTrain ] -> [    up UTrain ]
[ action DTrain ] -> [  down DTrain ]
[ action RTrain ] -> [ right RTrain ]
[ action LTrain ] -> [  left LTrain ]

late [ Mover Structs ] -> [ Mover Structs ] again (repeat if the train is still on structs)

(cart follows train, player follows cart)
[ Cart   | moving Train ] -> [ > Cart   | moving Train ]
[ Player | moving Cart  ] -> [ > Player | moving Cart  ]

[ > Player | Structs no Gerald no Cart ] -> [ Player | Structs ] message It's dangerous to walk along railway bridges!

(endgame message)
[ >      Player | Gerald ] -> [ Player | Gerald ] message you made it! thanks for playing.
[ action Player | Gerald ] -> [ Player | Gerald ] message you made it! thanks for playing.

(train turns when entering corners)
up    [ > UTrain | URTrack ] -> [ > RTrain | URTrack ]
up    [ > UTrain | ULTrack ] -> [ > LTrain | ULTrack ]

right [ > RTrain | ULTrack ] -> [ > DTrain | ULTrack ]
right [ > RTrain | DLTrack ] -> [ > UTrain | DLTrack ]

down  [ > DTrain | DRTrack ] -> [ > RTrain | DRTrack ]
down  [ > DTrain | DLTrack ] -> [ > LTrain | DLTrack ]

left  [ > LTrain | URTrack ] -> [ > DTrain | URTrack ]
left  [ > LTrain | DRTrack ] -> [ > UTrain | DRTrack ]

(animate smoke)
[ Smoke3 ] -> [ ]
[ Smoke2 ] -> [ Smoke3 ]
[ Smoke1 ] -> [ Smoke2 ]

[ action Player Switch ] -> [ Player action Switch ]

(switch all uncovered tracks at once)
[ action Switch ] [ Ghost Vehicle ] -> [ action Switch ] [ Ghost Vehicle ] SFX3 (play blocking sound if switch tracks are covered while switching)
[ action Switch ] [ Ghost no Vehicle ] -> [ action Switch ] [ action Ghost ] SFX2

[ action GhostHTrack URTrack no Vehicle ] -> [ HTrack GhostURTrack ]
[ HTrack action GhostURTrack no Vehicle ] -> [ GhostHTrack URTrack ]
[ action GhostHTrack DRTrack no Vehicle ] -> [ HTrack GhostDRTrack ]
[ HTrack action GhostDRTrack no Vehicle ] -> [ GhostHTrack DRTrack ]
[ action GhostHTrack ULTrack no Vehicle ] -> [ HTrack GhostULTrack ]
[ HTrack action GhostULTrack no Vehicle ] -> [ GhostHTrack ULTrack ]
[ action GhostHTrack DLTrack no Vehicle ] -> [ HTrack GhostDLTrack ]
[ HTrack action GhostDLTrack no Vehicle ] -> [ GhostHTrack DLTrack ]

[ action GhostVTrack URTrack no Vehicle ] -> [ VTrack GhostURTrack ]
[ VTrack action GhostURTrack no Vehicle ] -> [ GhostVTrack URTrack ]
[ action GhostVTrack DRTrack no Vehicle ] -> [ VTrack GhostDRTrack ]
[ VTrack action GhostDRTrack no Vehicle ] -> [ GhostVTrack DRTrack ]
[ action GhostVTrack ULTrack no Vehicle ] -> [ VTrack GhostULTrack ]
[ VTrack action GhostULTrack no Vehicle ] -> [ GhostVTrack ULTrack ]
[ action GhostVTrack DLTrack no Vehicle ] -> [ VTrack GhostDLTrack ]
[ VTrack action GhostDLTrack no Vehicle ] -> [ GhostVTrack DLTrack ]

==============
WINCONDITIONS
==============

=======
LEVELS
=======

(feel free to try making more puzzles!

editing tip: copy out a few rows of screens to edit in isolation

* use bridges (structs) to force the train over junctions before there's a chance to switch them
* use bridges to make switches unreachable until junctions have been crossed
* use the train itself and narrow passages to make switches unreachable until junctions have been crossed)

message welcome to the breezy isles!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~,,,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~,,..,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~,,,p.,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~,,....,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~,,,.....,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~,,,......,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~,,.......,,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~,,,........,,,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~,,,..........,,,,,,,,~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~,,...............,,,,,,~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~,~~,...%.........%....,,,,~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~,,,,,~..%.................,,,,~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~,,,,,,,,..~~%%%%%.r-------¬.....,,,,~~~~~~~~~~~~~~~~~~~~
,,,,,,,,,,,,,....%%~%%%%%%t.......l-¬.....,,,~~~~~~~~~~~~~~~~~~~
,,,,,,..........%%%~~%%%%%c%%.......l-¬....,,~~~~~~~~~~~~~~~~~~~
........%%%..%%%%%%%~%%%%%|%%%%%....|.l--¬..,,~~~~~~~~~~~~~~~~~~
.%%%%.%%%%%%%%%%%%%%~%%%%%|%%%%%%%..|...%l¬.,,~~~~~~~~~~~~~~~~~~
%%%%%%%%%%%%%%%%%%%%~%%%%%|%%%%%%%%.l¬..%%|.,,~~~~~~~~~~~~~~~~~~
%%%%%%%%%%%%%%%%%%%%~%%%%%|%%%%%%%%..|.%%%|.,,~~~~~~~~~~~~~~~~~~
%%%%r---------------z-¬%%%|%%%%%%....|%%%%|.,,~~~~~~~~~~~~~~~~~~
%%.rj........%%%%%%%~%l¬%.|..........|%%%rj,,,~~~~~~~~~~~~~~~~~~
%%rj.~~~~G~~~~%%%%%%~^%l--¬..........l---j.,,,~~~~~~~~~~~~~~~~~~
%.|.~~~~~x~~~~~%%%%^~^....|.....^^^........,,~~~~~~~~~~~~~~~~~~~
%.|.~~~~~~~~~~~%%^^^~^....l¬...^^^^^^......,,~~~~~~~~~~~~~~~~~~~
%.|.~~~~~~~~~~%%%^^^~^^^..^l¬^^^^^^^^^^^^^.,^^~~~~~~~~~~~~~~~~~~
%%l¬.~~~~~~~%%%^^^^^~^^^^^^^l¬^^^^^^^^^^^^^^^^~~~~~~~~~~~~~~~~~~
%%.|..~~~~%%%%^^^^^~~^^^^^^^^x~^^^^^^^^^^^^^^^^~~~~~~~~~~~~~~~~~
%%%|.%%%%%%%%^^^^^^~^^^^^^^^~x~^^^^^^^^^^^^^^^^~~~~~~~~~~~~~~~~~
%%%x%%%%%%%%%^^^^^~~^^^^^^^^~x~^^^^^^^^^^^^^^^^^^^^^^~~~~~~~~~~~
%%rj%%%%%%%%%^^^^^^~^^^^^^^~~x~%...%%^^%%^^^^^^^^^^^^^~~^~~~~~~~
%%5z---¬%%%%%^^^^^^~^^^^^^^~^l¬..%r------¬%%^^^^^^^^^^^~~~~~~~~~
%%|%%%%|%%%%^^^^^^^~~^^^^^~~^^l¬..|.%%%%%|%%%.^^^^^^^^^^^~~~~~~~
%r4z---¬%%%%^^^^^^^^~~^^^^~^^^.l--l---3--j%%..^^^^^^^^^^^^~~~~~~
%x./%r-¬%%%%^^^^^^^^^~~^^~~^^^........|%%%%%..^^^^^^^^^^^^^~~~~~
%l--zj¬j%%%%^^^^^^^^^^~~~~^^^^%%..../.|.%%...^^^^^^^^^^^^^~~~~~~
%%%%%%5z¬z¬%^^^^^^^^^^^^~~^^^^^%%%....|......^^^^^^^^^^^^^^~~~~~
%%r--¬x%lzj%^^^^^^^^^^^^~^^^^^^%%%%..~x~~~~~~~^^^^^^^^^^^^^^~^~~
%%|%%|x%%%%%%^^^^^^^^^^^~^^^^^^%%%%%~~x~~~~~~~~^^^^^^^^^^^^^~~~~
%%|%%|x%%%%%%%%^^^^^^^^^~^^^^^^%%%%%~~x~~~~~~~~^^^^^^^^^^^^^~~~~
%%r--47---¬¬---zzzzz1zzzzz¬^^^^^%%%..~x~~~~....%^^^^^^^^^^^~~~~~
%%|%%%x%.%lj%%^^^^^^x^^^~^lz¬^^^^%%...|..%...%.%%%^^^^^^,,~~~~~~
%%|%/.l¬.%%%^^^^^^^^x^^^~~^^lz¬^^%%...|.....%...........,,~~~^^~
%%|%%%lj%%%^^^^^^^^^x^^^^~^~^^x^^^%%.rl-----------r-----__zzz¬^~
%%l¬%%%%%^^^^^^^^^^^x^^^^~~^^^x^^^%%.|........%...|.....,,~~^x^~
%%lj%%%%%^^^^^^^^^^r-¬^^^~~~~^x^^^^^%|...%^^^.....l¬../.,,~~~x~~
%%%%%%%%^^^^^^^^^^^|l¬%^^~~~~~x~^^^^^|.^^^^^^^^^^..|....^^^~~x~~
%%%%%%%^^^^^^^^^^%rj%|%^^^~~^^x^^^^^rj%%^^^^^^^%%.%l¬.^^^^^^~x~~
%%%%%%^^^^^^^^^^^%|%%|%^^~^^~^x^^^%.|...%%..%.......|....,,~~x~~
%%%%^^^^^^^^^^^^^%|/.|%^~^^^^^x^^^%.|.%.............|...,,,~^x^~
%%^^^^^^^^^^^^^^^%l--8^^^^^^^rj%^^..|..r----!-------2--1___zzj^~
^^^^^^^^^^^^^^^^^%|%^x^^^^^^^x^^^^%.|.%|%%..|....%..|%.|,,,~~^~~
^^^^^^^^^^^^^^^^^^|.rlzz--3z-4¬^^^%.|.%l¬...|.......|..l¬,,~~~~~
^^^^^^^^^^^^^^^^^^x^|^^^..|^..|%^^..l¬%%l-----------j...|,,,~~~~
^^^^^^^^^^^^^^^^^^l-|---¬/|^.%|%^^%..|.%.%%.l¬%....%....|,,,,~~~
^^^^^^^^^^^^^^^^^^^%|.%%l-j---j%^^^%.l¬.....%l¬.%.....%.|,,,,~~~
^^^^^^^^^^^^^^^^^^^%|%%%%%%%%%%^^^^%%.|.%%%...l--¬......l¬,,,~~~
^^^^^^^^^^^^^^^^^^^^x^^^^%%%^^^^^^^%%.|..%..%...%l-¬%....|,,,~~~
^^^^^^^^^^^^^^^^^^^^x^^^^^^^^^^^^^^%%%|%%%%..%%....l¬....|,,,,~~
^^^^^^^^^^^^^^^^^^^^x^^^^^^^^^^^^^^^%%|%^^%%......%.l¬...|.,,,~~
^^^^^^^^^^^^^^^^^^^^x^%%%%%^^^^^^^^^^^|%%^^^^^^.%%...|...|^^^,~~
^^^^^^^^^^^^^^^^^^^%|%%....%%^^^^^^^^%|%%%^^^^^^^^^%.|.^^|^^,,~~
^^^^^^^^^^^^^^^^^^^%|%..%^..%%^^^^^%%rj%%^^^^^^^%....|...|^,,,~~
^^^^^^^^^^^^^^^^^^^%|./.^%%..%%^^^%%.|.%..%......../.6---¬^,,,~~
^^^^^^^^^^^^^^^^^^^%|..%^%....%^^^%..|%..%...%......rj...|.,,,~~
^^^^^^^^^^^^^^^^^^^%l--!z1--¬--zzz----------------!-j..%.|,,,,~~
^^^^^^^^^^^^^^^^^^^^%%%|^|..|.%^^^%..|.%.%..%..%..|...%..|,,,,~~
^^^^^^^^^^^^^^^^^^^^^^^x^|%%|%^^^^%%.|%%%.........|......|,,,,~~
^^^^^^^^^^^^^^^^^^^^^^^x^x^^x^^^^^^%%|%^^^^^^.....|...^^rj^,,~~~
^^^^^^^^^^^^^^^^^^^^^^^x^x^^x^^^^^^^^|%.^^^^^^^^%.|.^^^^|^^^^~~~
^^^^^^^^^^^^^^^^^^^^^^^x^x^^x^^^^^^^%|^^^^^^^^.%..|.....|,,^^~~~
^^^^^^^^^^^^^^^^^^^^^^^x^x^^l¬^^^^^%%|%%^^^.%.....|...%.|,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^x^lzzjx^^^^%%.|..%%........|.%...|,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^l¬^^^^x^^^^%%.l¬%......%..rj..%..|,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^^x^^^^x^^^^%%%.l¬.%......rj.....rj,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^^x^^^^x^^^^^%%%%l--------j------j,,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^^lzzzzj^^^^^^^%%%%%.%%%%...%%%%^^^,,,~~~~
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^%%%%%^^^^^^^^^^^^^^^^^~~
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^~~



title Many parallel players, unlimited rigidbodies
author increpare
homepage www.increpare.com

verbose_logging

(

This is a sample of 

- Unlimited rigid bodies
- Multiple players moving in parallel

It's made as an example for the extended rigid body tutorial here:

https://www.puzzlescript.net/Documentation/rigidbodies.html

)

========
OBJECTS
========

Background
green

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Player
Black Orange White Blue
.000.
.111.
22222
.333.
.3.3.

 Crate
Yellow orange
00000
01110
01110
01110
00000


(The directional overlays bellow establish connections between crates)

 Crate_U
orange
.000.
.....
.....
.....
.....

 Crate_D
orange
.....
.....
.....
.....
.000.

 Crate_L
orange
.....
0....
0....
0....
.....

 Crate_R
orange
.....
....0
....0
....0
.....

CanMove
red
.....
.....
..0..
.....
.....

=======
LEGEND
=======

. = Background
# = Wall
P = Player

w = Crate and Crate_U
x = Crate and Crate_D
a = Crate and Crate_L
d = Crate and Crate_R

e = Crate and Crate_U and Crate_L
z = Crate and Crate_D and Crate_L
q = Crate and Crate_U and Crate_R
c = Crate and Crate_D and Crate_R

r = Crate and Crate_L and Crate_R
t = Crate and Crate_D and Crate_U

1 = Crate and Crate_D and Crate_L and Crate_R
2 = Crate and Crate_U and Crate_L and Crate_R
3 = Crate and Crate_U and Crate_D and Crate_L
4 = Crate and Crate_U and Crate_D and Crate_R

0 = Crate and Crate_U and Crate_D and Crate_L and Crate_R

5 = Crate

 Crate_Connection = Crate_U or Crate_D or Crate_L or Crate_R

Pusher = Player or Crate
Pushable = Crate 
Solid = Crate or Player

=======
SOUNDS
=======

 Crate MOVE 36772507

================
COLLISIONLAYERS
================

Background
Player, Wall, Crate
 Crate_U
 Crate_D
 Crate_L
 Crate_R
CanMove

======
RULES
======

(For making maps easily: uncomment out the next few lines + press action to discard all boundaries and recreate them)

( [ action player ] [ Crate_connection ] -> [ action player ] [ ] )
( up [ action player ] [ Crate | Crate ] -> [ action player ] [ Crate Crate_u | Crate Crate_d ] )
( right [ action player ] [ Crate | Crate ] -> [ action player ] [ Crate Crate_r | Crate Crate_l ] )


(Step 1: propagate motions forward)
[ > Pusher | Pushable ] -> [ > Pusher | > Pushable ]
+ up [ moving Crate Crate_U | Crate ] -> [ moving Crate Crate_U | moving Crate ]
+ down [ moving Crate Crate_D | Crate ] -> [ moving Crate Crate_D | moving Crate ]
+ left [ moving Crate Crate_L | Crate ] -> [ moving Crate Crate_L | moving Crate ]
+ right [ moving Crate Crate_R | Crate ] -> [ moving Crate Crate_R | moving Crate ]


(Step 1: If a crate can't move, we have to back-propagate the can't-move-ness, including possibly through players)
[ > Solid | wall ] -> [ Solid | wall ]

[ > Solid | stationary Solid ] -> [ Solid | Solid ]
+ up [ moving Crate Crate_U | stationary Crate ] -> [ Crate Crate_U | Crate ]
+ down [ moving Crate Crate_D | stationary Crate ] -> [ Crate Crate_D | Crate ]
+ left [ moving Crate Crate_L | stationary Crate ] -> [ Crate Crate_L | Crate ]
+ right [ moving Crate Crate_R | stationary Crate ] -> [ Crate Crate_R | Crate ]


(Step 3: Mark all crates that are still moving as possibly being able to move)
[ moving Pushable ] -> [ Pushable CanMove ]

(Step 4: redo Step 1, but only through things that are marked as being possibly able to move)
[ > Pusher | CanMove Pushable ] -> [ > Pusher | CanMove > Pushable ]
+ up [ moving Crate Crate_U | CanMove Crate ] -> [ moving Crate Crate_U | CanMove moving Crate ]
+ down [ moving Crate Crate_D | CanMove Crate ] -> [ moving Crate Crate_D | CanMove moving Crate ]
+ left [ moving Crate Crate_L | CanMove Crate ] -> [ moving Crate Crate_L | CanMove moving Crate ]
+ right [ moving Crate Crate_R | CanMove Crate ] -> [ moving Crate Crate_R | CanMove moving Crate ]

(Step 5: remove all the CanMove tags)
[ CanMove ] -> [ ]

(Step 6: move connections along with the crates themselves)
[ moving Crate stationary Crate_connection ] -> [ moving Crate moving Crate_connection ]


==============
WINCONDITIONS
==============

=======
LEVELS
=======

###############
#..ca.........#
#.ce....ca....#
#.t...d1e.....#
#.w....w......#
#....d1ap5.dz.#
#....pw...5.w5#
#......dz.....#
#.......t..dz.#
#..x..cre...w.#
#..w..w...5...#
#.............#
###############


title Slidings
author Alain Brobecker
homepage abrobecker.free.fr

========
OBJECTS
========

Background
#d8a96c #e5b679
11111
10101
11111
10101
11111

Target
DarkBlue
.....
.000.
.0.0.
.000.
.....

Wall
#88bbbb #448888
11111
01111
11101
11111
10111

OverWall
#88bbbb #448888
11111
01111
11101
11111
10111

Count
#88bbbb #448888 White
11111
02221
12221
12221
10111

CountEnd
#88bbbb #448888
11111
01111
11101
11111
10111

Player
#88ff22 #44ff00 #11cc00
.112.
10012
10012
21122
.222.

PlayerHasMoved
#ffe02c #ffc700 #c87700
.112.
10012
10012
21122
.222.

DeadPlayer
#ffe02c #ffc700 #c87700
.112.
10012
10012
21122
.222.

BallA
#999999 #777777 #444444
.112.
10012
10012
21122
.222.

BallB
#999999 #777777 #444444
.112.
10012
10012
21122
.222.

BallC
#999999 #777777 #444444
.112.
10012
10012
21122
.222.


=======
LEGEND
=======

. = Background
# = Wall
A = BallA
B = BallB
C = BallC
D = BallB and OverWall
E = BallC and OverWall
P = Player
O = Target
m = Count
n = CountEnd

Item = Player or Wall or BallA or BallB or BallC or Count or CountEnd

=======
SOUNDS
=======

sfx0 5160507 (move)
sfx1 83704102 (wrong move)
sfx2 16709508
EndLevel 123413 (win)
EndGame 10475908

================
COLLISIONLAYERS
================

Background
Target
Player, Wall, BallA, BallB, BallC, Count, CountEnd, DeadPlayer, PlayerHasMoved
OverWall

======
RULES
======

(Player movements)
[> Player | Item] -> [ Player | Item] sfx1
[> Player | No Item] -> [ | > Player] again sfx0
[> Player] -> [ PlayerHasMoved ]

(swap between balls)
[Action Player] [BallA] [BallB] [BallC] -> [BallC] [Player] [BallA] [BallB]
[ Player OverWall ] [BallA] [BallB] [BallC] -> [BallC OverWall ] [Player] [BallA] [BallB] again

(count remaining moves)
[ PlayerHasMoved ] [ Wall | CountEnd | Wall ] ->  [ DeadPlayer ] [Wall | Wall | Wall]
[ DeadPlayer ] -> [ DeadPlayer ] sfx2
[ DeadPlayer ] -> restart
[ PlayerHasMoved ] [ Count | CountEnd ] -> [Player] [CountEnd | Wall ]
[ PlayerHasMoved ] -> [ Player ]

==============
WINCONDITIONS
==============

All Player on Target

=======
LEVELS
=======

(you must always have a # before the first counter)

message Bring a ball on the spot.         X to control next sliding ball.                                                                          level 1: 3 moves
#mmmn#
#PA..#
#..O.#
D####E

message level 2: 4 moves
#mmmmn
#.O..#
#P####
#A####
D####E

message level 3: 4 moves
#mmmmn#
#PAO..#
##....#
D#####E

message level 4: 5 moves
#mmmmmn
#.....#
#..O..#
#PA####
D#####E

message level 5: 7 moves
##mmmmmmmn
##..O..P##
#.......A#
D########E

message level 6: 7 moves
#mmmmmmmn
#P.A....#
#.......#
#.......#
#..O#...#
#.......#
#.......#
#B......#
########E

message level 7: 8 moves
#mmmmmmm
#.O.#P.m
#...#ABn
#......#
#...#..#
#...#..#
#######E

message level 8: 5 moves
#mmmmmn
#....P#
#A.O..#
#B....#
#.C...#
#######

message level 9: 9 moves
#mmmmmmm
##..P..m
##.....m
##..O..n
##A....#
##....B#
#######E

message level 10: 9 moves
#mmmmmmm
###..##m
##...P#m
#..O...n
#......#
##.A..##
###..###
D######E

message level 11: 13 moves
mmmmmmmm
m.P....m
m...O..m
#A....nm
D######E



title Broken Rigid Body example
author Anonymous
homepage www.puzzlescript.net

verbose_logging

(

Example for
https://www.puzzlescript.net/Documentation/rigidbodies.html#many_many

)

========
OBJECTS
========

Background 
white  

Target 
DarkBlue    

Wall 
DarkGrey

Player
Blue
..0..
..0.0
00000
.000.
.0.0.

Shadow
Black
..0..
0.0..
00000
.000.
.0.0.

( three multi-cells blocks )
Crate 
orange

Chest
green

Box
red

( 1-cell small block )
Small
darkred
.....
.000.
.000.
.000.
.....

( sticky, multicellular block when in contact )
Glue
pink
.000.
00000
00000
00000
.000.

( a flag to know what is allowed move )
Wanna_Move
#ff00ff
.....
.....
..0..
.....
.....

=======
LEGEND
=======

. = Background
# = Wall
P = Player
S = Shadow
* = Crate
+ = Box
% = Chest
o = Small
g = Glue

( blocks that can be moved by the player )
Movable = Crate or Box or Chest or Small or Glue

( all things that can move and push blocks )
Mover = Player or Shadow or Movable 

( things that can stop a movement if they are stationary )
Obstacle = Wall or Mover

=======
SOUNDS
=======

================
COLLISIONLAYERS
================

Background
Target
Obstacle
Wanna_Move

======
RULES     
======     

[ > player ] [ stationary shadow ] -> [ > player ] [ < shadow ]

( 1. Propagate movements forward )
[ > Mover | stationary Movable ] -> [ > Mover | > Movable  ]
+ [ > Box    ] [ stationary Box   ] -> [ > Box    ] [ > Box    ]
+ [ > Crate  ] [ stationary Crate ] -> [ > Crate  ] [ > Crate  ]
+ [ > Chest  ] [ stationary Chest ] -> [ > Chest  ] [ > Chest  ]
+ [ moving Glue | stationary Glue ] -> [ moving Glue | moving Glue ]

( 2. Propagate obstructions backwards )
[ > Mover  | stationary Obstacle ] -> [ stationary Mover | Obstacle ]
+ [ > Crate  ] [ stationary Crate ] -> [ stationary Crate ] [ Crate ]
+ [ > Box    ] [ stationary Box   ] -> [ stationary Box   ] [ Box   ]
+ [ > Chest  ] [ stationary Chest ] -> [ stationary Chest ] [ Chest ]
+ [ moving Glue | stationary Glue ] -> [ stationary Glue | Glue ]

( 3. remove all movement, keep a flag )
[ > Movable ] -> [ Movable wanna_move ]

( 4. propagate movement only on wanna_move things )
(    ie redo step 1 but with WANNA_MOVE added to the first line below )
[ > Mover  | stationary Movable WANNA_MOVE ] -> [ > Mover | > Movable ]
+ [ > Box   ] [ stationary Box   ] -> [ > Box   ] [ > Box   ]
+ [ > Crate ] [ stationary Crate ] -> [ > Crate ] [ > Crate ]
+ [ > Chest ] [ stationary Chest ] -> [ > Chest ] [ > Chest ]
+ [ moving Glue | stationary Glue ] -> [ moving Glue | moving Glue ]

( 5. cleanup, remove flag )
[ wanna_move ] -> [ ]

==============
WINCONDITIONS
==============

=======     
LEVELS
=======

###################
#.................#
#............s....#
#...*..g.g.#......#
#...*......#...g###
#...*...o.%%%.....#
#...+++.o.%.......#
#....+....%%%.....#
#....+.........g..#
#....p.gg.........#
###################

#########
#.......#
#.p.+...#
#...+...#
#...+.s.#
#.......#
#########


USER PROMPT:
The following PuzzleScript game code:
```plaintext
title Sokoban Junior
author Your Name

========
OBJECTS
========

Background
#000000
.....
.....
.....
.....
.....

Player
White
.....
..0..
.000.
..0..
.....

Wall
Blue
.....
11111
11111
11111
.....

Crate
Brown
.....
00000
00000
00000
.....

Target
Red
.....
.0.0.
.000.
.0.0.
.....

CrateOnTarget
Green Brown
.....
.000.
.011.
.011.
.....

=======
LEGEND
=======
. = Background
P = Player
# = Wall
B = Crate
T = Target
X = CrateOnTarget

=======
SOUNDS
=======

================
COLLISIONLAYERS
================
Background
Target
Player
Wall
Crate

======
RULES
======
[right]
[ > P | B | No B ] -> [ > P | > B | ]

[up]
[ Up P | B | No B ] -> [ Up P | Up B | ]

[down]
[ Down P | B | No B ] -> [ Down P | Down B | ]

[left]
[ Left P | B | No B ] -> [ Left P | Left B | ]

[on target]
[ B | T ] -> [ X ]

(on target move off)
[ X | No T ] -> [ B ]

==============
WINCONDITIONS
==============
All CrateOnTarget

=======
LEVELS
=======
#.#.#.#.#.#.#.#.#.#
#.P....#....B..#..T#
#.#.#.#.#..###.#.#.#
#.....B...........T#
#.#.#..#.#.#.#....#.#
#...#....T..B.......#
#.#.#.#.#.#.###.#.#.#


```
produced the following console output:
=================================
line 27 : Trying to access color number 1 from the color palette of sprite WALL, but there are only 1 defined in it.
line 28 : Trying to access color number 1 from the color palette of sprite WALL, but there are only 1 defined in it.
line 29 : Trying to access color number 1 from the color palette of sprite WALL, but there are only 1 defined in it.
line 94 : Name "on", referred to in a rule, does not exist.
line 109 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 110 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 111 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 112 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 113 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 114 : Maps must be rectangular, yo (In a level, the length of each row must be the same).
line 82 : A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird
line 82 : In a rule, if you specify a movement, it has to act on an object.
line 82 : Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right
line 85 : A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird
line 85 : In a rule, if you specify a movement, it has to act on an object.
line 85 : Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right
line 88 : A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird
line 88 : In a rule, if you specify a movement, it has to act on an object.
line 88 : Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right
line 91 : A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird
line 91 : In a rule, if you specify a movement, it has to act on an object.
line 91 : Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right
line 94 : A rule has to have an arrow in it.  There's no arrow here! Consider reading up about rules - you're clearly doing something weird
line 94 : Error, malformed cell rule - was looking for cell contents, but found "on".  What am I supposed to do with this, eh, please tell me that.
line 94 : Error, when specifying a rule, the number of matches (square bracketed bits) on the left hand side of the arrow must equal the number on the right
line 95 : In a rule, each pattern to match on the left must have a corresponding pattern on the right of equal length (number of cells).
line 98 : In a rule, each pattern to match on the left must have a corresponding pattern on the right of equal length (number of cells).
Errors detected during compilation; the game may not work correctly.
Return a repaired version of the code that addresses these errors. First, reason about your task and determine the best plan of action. Then, write your code. Return your code in full, inside a ```plaintext code block.