title Dungeon Walk II: Stephen's Delight
author guilherme tows
homepage zarat.us
debug
flickscreen 11x11
run_rules_on_level_start
(this interval is not actually 0.001)
again_interval 0.001

========
OBJECTS
========

Background
Black

(Renderables / Wall pieces)

WallUL b
Red
0....
00...
000..
0000.
00000

WallUR d
Red
....0
...00
..000
.0000
00000

WallDL p
Red
00000
0000.
000..
00...
0....

WallDR q
Red
00000
.0000
..000
...00
....0

(eight tiles for two map sections. so painful but it looks so terrible otherwise.)

Wall4UL 1
Red
00...
0000.
00000
00000
00000

Wall2UL 2
Red
.....
.....
0....
000..
00000

Wall2UR 3
Red
.....
.....
....0
..000
00000


Wall4UR 4
Red
...00
.0000
00000
00000
00000

Wall4DL 5
Red
00000
00000
00000
0000.
00...

Wall2DL 6
Red
00000
000..
0....
.....
.....

Wall2DR 7
Red
00000
..000
....0
.....
.....


Wall4DR 8
Red
00000
00000
00000
.0000
...00


WallX X
Red

WallDark O
DarkRed

(Background)

Sky !
DarkBlue

Floor _
DarkGray

Horizon =
DarkBlue DarkGray
00000
00000
.....
11111
11111



(Map wall)
Wall #
Red

Player 
Black

(various internal objects)

Renderer *
Pink

Limit /
Black

Walker A
Blue

Eye ,
White
..0..
..0..
00000
..0..
..0..

First
Black

Testing 
Black
0...0
.0.0.
..0..
.0.0.
0...0

Sweeper '
Black

=======
LEGEND
=======

. = Background
@ = Player 
& = Renderer and First
Renderable = WallUL or WallUR or WallDL or WallDR or Wall4UR or Wall4DR or Wall2UR or Wall2DR or Wall4UL or Wall4DL or Wall2UL or Wall2DL or WallX or WallDark 

BG = Sky or Floor or Horizon

=======
SOUNDS
=======



================
COLLISIONLAYERS
================

Background
BG
Player, Renderer, Wall, Limit, Walker
Eye, Renderable, First
Testing, Sweeper


======
RULES     
======

(erase everything and prepare to re-render)
[ Renderable BG ] -> [ BG ] 

(START map walking controls)

(the eye object is used to store the map walker's orientation)

[ Walker | Eye ] -> [ > Walker | ]

[ right Player ] [ > Walker ] -> [ action Player ] [ v Walker ]
[ left  Player ] [ > Walker ] -> [ action Player ] [ ^ Walker ]
[ up Player ] [ > Walker | no Wall ] -> [ action Player ] [ | > Walker ]
[ down Player ] [ no Wall | > Walker ] -> [ action Player ] [ > Walker | ]

[ up Player ] -> cancel
[ down Player ] -> cancel

(END map walking controls)

(START map 'raytracing')

[ > Walker no Eye ] -> [ > Walker > Eye ]

(assign Testing objects to the first row of renderers)
right [ First no Testing Renderer | ... | no Testing Renderer ] -> [ First left Testing Renderer | ... | right Testing Renderer  ] 
+ right [ right Testing Renderer | ... | no Testing Renderer ] -> [ right Testing Renderer | ... | action Testing Renderer  ]
+ left [ First left Testing Renderer | ... | no Testing Renderer ]  -> [ First left Testing Renderer | ... | up Testing Renderer  ]
+ left [ up Testing Renderer | ... | no Testing Renderer ] -> [ up Testing Renderer | ... | down Testing Renderer  ]
( if there's an object two tiles to the < of ^ Eye, renderer with down Testing is active )
+ [ Wall    | | ^ Eye ] [ down Testing stationary Renderer ] -> [ Wall | | ^ Eye ] [ stationary Testing action Renderer ]
+ [ no Wall | | ^ Eye ] [ down Testing stationary Renderer ] -> [ | | ^ Eye ] [ stationary Testing stationary Renderer ]
( if there's an object two tiles to the > of ^ Eye, renderer with up Testing is active )
+ [ ^ Eye | | Wall ] [ up Testing stationary Renderer ] -> [ ^ Eye | | Wall ] [ stationary Testing action Renderer ]
+ [ ^ Eye | | no Wall ] [ up Testing stationary Renderer ] -> [ ^ Eye | | ] [ stationary Testing stationary Renderer ]
( if there's an object directly to the < of ^ Eye, renderer with left Testing is active )
+ [ Wall    | ^ Eye ] [ left Testing stationary Renderer ] -> [ Wall | ^ Eye ] [ stationary Testing action Renderer ]
+ [ no Wall | ^ Eye ] [ left Testing stationary Renderer ] -> [ | ^ Eye ] [ stationary Testing stationary Renderer ]
( if there's an object directly to the > of ^ Eye, renderer with right Testing is active )
+ [ ^ Eye | Wall ] [ right Testing stationary Renderer ] -> [ ^ Eye | Wall ] [ stationary Testing action Renderer ]
+ [ ^ Eye | no Wall ] [ right Testing stationary Renderer ] -> [ ^ Eye | ] [ stationary Testing stationary Renderer ]
( if there's an object right below Eye, renderer with action Testing is active... )
+ [ ^ Eye Wall ] [ action Testing stationary Renderer ] -> [ ^ Eye Wall ] [ stationary Testing action Renderer ]
+ [ ^ Eye no Wall ] [ action Testing stationary Renderer ] -> [ ^ Eye ] [ stationary Testing stationary Renderer ]
( move Eye one tile upwards. )
+ [ stationary First stationary Testing ] [ > Eye | ] -> [ action First stationary Testing ] [ | > Eye ]
( move First up to next Renderer)
+ up [ action First | ... | no First Renderer ] -> [ First | ... | First Renderer ]
( and do the loop again, this time on the new row of Renderers.)

(btw the rules above could have used an object like Eye instead of Testing)
(i just didn't want to confuse you)
(am i not thoughtful)

(END map 'raytracing')

(START renderer) 

[ moving Player ] -> [ stationary Player ]

(Each active Sweeper makes a line of r-Sweepers below them)

down [ action Renderer  no Sweeper no Limit ] -> [ action Renderer right Sweeper ]
down [ stationary Sweeper | no Sweeper no Limit ] -> [ stationary Sweeper | left Sweeper ]
down [ right Sweeper | no Sweeper no Limit ] -> [ right Sweeper | right Sweeper ]
down [ left Sweeper  | no Sweeper no Limit ] -> [ left Sweeper  | left Sweeper  ]

(everyone sweeps right, copying to the left column as they go)
(this can be simpler than the code below because, at the same depth, there's a strict
rendering order between various wall sections - flat wall always goes on top of diagonal
wall, for instance)

right [ left Sweeper | ... | right Sweeper Renderable | ] -> [ left Sweeper Renderable | ... | Renderable | action Sweeper ]
+ right [ left Sweeper | ... | right Sweeper | ] -> [ left Sweeper | ... | | action Sweeper ]
+ [ action Sweeper ] -> [ right Sweeper ]
( hit the limit, stop)
+ right [ left Sweeper | no Limit ] -> [ | action Sweeper ]
+ right [ left Sweeper | Limit ] -> [ | Limit ]
+ [ action Sweeper ] -> [ left Sweeper ]

(cleanup)

[ moving Sweeper ] -> [ ]

(same code as above, but now switching right and down and merging the various depths)

down [ stationary Sweeper | ] -> [ | down Sweeper ]

right [ Player | no Sweeper no Limit ] -> [ Player | left Sweeper ]
right [ down Sweeper | no Sweeper no Limit ] -> [ down Sweeper | right Sweeper ]
right [ right Sweeper | no Sweeper no Limit ] -> [ right Sweeper | right Sweeper ]
right [ left Sweeper  | no Sweeper no Limit ] -> [ left Sweeper  | left Sweeper  ]

down [ | down Sweeper ] -> [ stationary Sweeper | ]



(Puzzlescript's rule breakup is the death of this. Renderable breaks the rule into 10+ different rules so
one Renderable takes precedence over the smaller-longer rule, making a huge mess.)
(i am not proud of this hack)

down [ right Sweeper | ... | right Sweeper ] -> [ right Sweeper | ... | up Sweeper ]

down [ left Sweeper | ... | right Sweeper Renderable | ] -> [ left Sweeper Renderable | ... | Renderable | action Sweeper ]
+ down [ left Sweeper | ... | right Sweeper | ] -> [ left Sweeper | ... | | action Sweeper ]
+ down [ action Sweeper | ... | up Sweeper ] -> [ down Sweeper | ... | right Sweeper ]
+ down [ left Sweeper | ... | right Sweeper Renderable | ] -> [ left Sweeper Renderable | ... | Renderable | action Sweeper ]
+ down [ left Sweeper | ... | right Sweeper | ] -> [ left Sweeper | ... | | action Sweeper ]
+ down [ action Sweeper | ... | up Sweeper ] -> [ down Sweeper | ... | right Sweeper ]
+ down [ left Sweeper | ... | right Sweeper Renderable | ] -> [ left Sweeper Renderable | ... | Renderable | action Sweeper ]
+ down [ left Sweeper | ... | right Sweeper | ] -> [ left Sweeper | ... | | action Sweeper ]
+ down [ action Sweeper | ... | up Sweeper ] -> [ down Sweeper | ... | right Sweeper ]
+ down [ left Sweeper | ... | right Sweeper Renderable | ] -> [ left Sweeper Renderable | ... | Renderable | action Sweeper ]
+ down [ left Sweeper | ... | right Sweeper | ] -> [ left Sweeper | ... | | action Sweeper ]
+ [ down Sweeper ] -> [ right Sweeper ]
+ [ action Sweeper ] -> [ right Sweeper ]
+ down [ right Sweeper | ... | right Sweeper ] -> [ right Sweeper | ... | up Sweeper ]
+ down [ left Sweeper | no Limit ] -> [ | action Sweeper ]
+ down [ left Sweeper | Limit ] -> [ | Limit ]
+ [ action Sweeper ] -> [ left Sweeper ]
[ moving Sweeper ] -> [ ]



(END renderer)

(cleanup)

down [ First | ... | First ] -> [ | ... | First ]
[ Eye ] -> [ ]
[ Testing ] -> [ ]

(the eye object is used to store the map walker's orientation)

[ > Walker | no Eye ] -> [ Walker | Eye ]

==============
WINCONDITIONS
==============

=======     
LEVELS
=======

(map sections have to be ordered this way because the way rules pick objects)
(so, topmost, leftmost map sections get rendered first)

///////////.......................................................
@!!!!!!!!!/.#########.............................................
.!!!!!!!!!..##......#.............................................
.!!!!!!!!!..#..###.##.............................................
.!!!!!!!!!..#.###...#.............................................
.=========..#.###...#.............................................
._________..#...#...#.............................................
._________..###,#.#.#.............................................
._________..###A#...#.............................................
._________..#########.............................................
'//////////.......................................................
._________/*........./*........./*........./*........./*........./
._________/.......................................................
._________/.......................................................
._________/.......................................................
._________/...o..............o.......o............o.........o.....
._________/.......................................................
._________/.......................................................
._________/.......................................................
._________/.......................................................
'/////////////////////////////////////////////////////////////////
._________/*........./*........./*........./*........./*........./
._________/.......................................................
._________/.......................................................
._________/.o12..............34o...oob............doo......ooo....
._________/.oxx..............xxo...oox............xoo......ooo....
._________/.o56..............78o...oop............qoo......ooo....
._________/.......................................................
._________/.......................................................
._________/.......................................................
'/////////////////////////////////////////////////////////////////
._________/*........./*........./*........./*........./*........./
._________/.......................ob................do...ooooooo..
._________/.2..................3..oxb..............dxo...ooooooo..
._________/.x..................x..oxx..............xxo...ooooooo..
._________/.x..................x..oxx..............xxo...ooooooo..
._________/.x..................x..oxx..............xxo...ooooooo..
._________/.6..................7..oxp..............qxo...ooooooo..
._________/.......................op................qo...ooooooo..
._________/.......................................................
'/////////////////////////////////////////////////////////////////
._________/......................&b......../*........d/*ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................x..................x..ooooooooo.
._________/.......................p..................q..ooooooooo.
//////////////////////////////////////////////////////////////////







