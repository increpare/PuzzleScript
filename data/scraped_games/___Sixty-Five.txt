title    Sixty-Five
author   Chris Pickel
homepage www.sfiera.net
run_rules_on_level_start
noundo
norepeat_action
again_interval 0.5

========
OBJECTS
========

Map
Blue

Stone
Gray DarkGray
01000
00001
00000
00100
00000

StoneFog
DarkGray Black
01000
00001
00000
00100
00000

WallFog
DarkBrown Black
00010
11111
01000
11111
00010

Stairs
lightgray gray darkgray black black
44444
04444
01444
01244
01234

StairsFog
darkgray darkgray darkgray black black
44444
04444
01444
01244
01234

Wall
BROWN DARKBROWN
00010
11111
01000
11111
00010

Start
Black
.000.
.000.
00000
.000.
.0.0.

HumanMan
Black DarkBrown LightGreen
.000.
.111.
11111
.222.
.1.1.

OrcMan
Black Orange White
.000.
.111.
11111
.222.
.1.1.

GoblinMan
DarkBrown Green LightBlue
.000.
.111.
11111
.222.
.1.1.

HumanWoman
Black DarkBrown LightGreen
.000.
.010.
12121
.222.
.1.1.

OrcWoman
Black Orange White
.000.
.010.
12121
.222.
.1.1.

GoblinWoman
DarkBrown Green LightBlue
.000.
.010.
12121
.222.
.1.1.

Dying
Red

Corpse
Red
.000.
.000.
00000
.000.
.0.0.

IthMan
Pink White LightBlue
.000.
.111.
11111
.222.
.1.1.

IthWoman
Pink White LightBlue
.000.
.010.
12221
.222.
.1.1.

OthMan
Blue Black DarkGray
.000.
.111.
11111
.222.
.1.1.

OthWoman
Blue Black DarkGray
.000.
.010.
12221
.222.
.1.1.

UthMan
DarkGreen Blue White
.000.
.111.
11111
.222.
.1.1.

UthWoman
DarkGreen Blue White
.000.
.010.
12221
.222.
.1.1.

YthMan
Yellow Red Orange
.000.
.111.
11111
.222.
.1.1.

YthWoman
Yellow Red Orange
.000.
.010.
12221
.222.
.1.1.

RandomHumanoid
Transparent

Snake
Green Red
.000.
00000
00.01
.0.10
0....

Spider
Black Red
.0.0.
00000
.000.
01010
.0.0.

LeatherArmor
Brown DarkGray
.....
.....
.010.
.000.
.1.1.

ChainArmor
DarkGray Black
.....
.....
01010
.010.
.1.1.

PlateArmor
LightGray White
.....
.....
10001
.000.
.1.1.

Dagger
White Black
.....
....0
....1
.....
.....

Sword
White Black
....0
....0
....1
.....
.....

Spear
White DarkBrown
....0
....1
....1
....1
.....

Axe
White DarkBrown
...00
...01
....1
.....
.....

HealthPotion
White Red
.000.
..0..
.0.0.
01110
.000.

Pie
Red LightBrown #b85
..111
.1111
11002
00002
2222.

BlueScroll
LightBrown Yellow #ff9 Blue
2222.
0131.
.333.
.111.
.0000

RedScroll
LightBrown Yellow #ff9 Red
2222.
0111.
.333.
.131.
.0000

GreenScroll
LightBrown Yellow #ff9 Green
2222.
0131.
.313.
.131.
.0000

Book
Brown DarkBrown White LightGray
12.20
13230
12320
.120.
..1..

LightningH
Blue White
.....
.0...
11011
...0.
.....

LightningV
Blue White
..1..
..10.
..0..
.01..
..1..

Fireball1
Orange Red Yellow
00210
20002
01000
00001
10020

Fireball2
Orange
0.0.0
.0.0.
0.0.0
.0.0.
0.0.0

Fireball3
Yellow
.0.0.
0.0.0
.0.0.
0.0.0
.0.0.

Teleport
transparent

Crate
Orange Yellow
00000
0...0
0...0
0...0
00000

Move
transparent

Moved
transparent

Attack
transparent

Damage1
transparent

Damage2
transparent

Damage3
transparent

Damage4
transparent

Health2
DarkRed
.....
.....
.....
0....
0....

Health3
DarkRed
.....
.....
0....
0....
0....

Health4
DarkRed
.....
0....
0....
0....
0....

Health5
DarkRed
0....
0....
0....
0....
0....

Wounded1
Red
.....
.....
.....
.....
0....

Wounded2
Red
.....
.....
.....
0....
0....

Wounded3
Red
.....
.....
0....
0....
0....

Wounded4
Red
.....
0....
0....
0....
0....

Doorway
transparent

RoomCenter
transparent

RoomSpace
transparent

UpVisible
Transparent (Red
..1..
.....
.....
.....
.....)

DownVisible
Transparent (Red
.....
.....
.....
.....
..1..)

LeftVisible
Transparent (Red
.....
.....
1....
.....
.....)

RightVisible
Transparent (Red
.....
.....
....1
.....
.....)

Directly
Transparent (Red
.....
.....
..1..
.....
.....)

Hidden
black

HiddenCorner
transparent

Explored
transparent

Reachable
transparent

GenerateDungeon
transparent

NormalRoom
transparent

EquipmentRoom
transparent

ColumnRoom
transparent

Interface
Black

Heart
Red Pink
.0.0.
01100
01000
.000.
..0..

HeartSlot
DarkGray
.0.0.
00000
00000
.000.
..0..

ItemSlot
DarkGray
.....
.000.
.000.
.000.
.....

ItemRecharge
DarkGray
.....
.....
..0..
.....
.....

Level1
Red
.000.
.....
.....
.....
.....

Level2
Red
.....
.000.
.....
.....
.....

Level3
Red
.....
.....
.000.
.....
.....

Level4
Red
.....
.....
.....
.000.
.....

Level5
Red
.....
.....
.....
.....
.000.

Pause
Transparent

C1 Cloister
Transparent
C2 Castle
Transparent
C3 Citadel
Transparent
C4 Cellar
Transparent
C5 Crypt
Transparent
C6 Catacomb
Transparent
C7 Cavern
Transparent
C8 Crevasse
Transparent
C9 Chasm
Transparent
C10 Cacaphony
Transparent
C11 Conflagration
Transparent
C12 Condemnation
Transparent
C13 Coronation
Transparent

=======
LEGEND
=======

X = Map and Stone and RoomCenter
. = Map and Stone and RoomSpace
# = Map and Stone and Wall
O = Map and Stone and Wall
/ = Map and Stone and Doorway

- = Interface
* = Interface and HeartSlot and Heart
? = Interface and ItemSlot
! = Interface and ItemRecharge

1 = Interface and C1 and Start
2 = Interface and C2
3 = Interface and C3
4 = Interface and C4
5 = Interface and C5
6 = Interface and C6
7 = Interface and C7
8 = Interface and C8
9 = Interface and C9
A = Interface and C10
B = Interface and C11
C = Interface and C12
$ = Interface and C13

% = GenerateDungeon

Background = Map or Interface
Level      = Level1 or Level2 or Level3 or Level4 or Level5

Room       = RoomCenter or RoomSpace
RoomType   = NormalRoom or EquipmentRoom or ColumnRoom
Floor      = Stone or Stairs

Man        = HumanMan   or OrcMan   or GoblinMan
Woman      = HumanWoman or OrcWoman or GoblinWoman
Player     = Man or Woman

Ith        = IthMan or IthWoman  (pronounced "ɪþ")
Oth        = OthMan or OthWoman  (pronounced "ɔþ")
Uth        = UthMan or UthWoman  (pronounced "ʌþ")
Yth        = YthMan or YthWoman  (pronounced "yþ")
NonPlayer  = Ith or Oth or Uth or Yth
Humanoid   = Player or NonPlayer
Beast      = Spider or Snake
Monster    = Beast or NonPlayer
Spawn      = Beast or RandomHumanoid

HealthMax1 = IthMan or IthWoman (Health1)
HealthMax2 = HealthMax1 or Oth or Spider
HealthMax3 = HealthMax2 or Uth or Snake
HealthMax4 = HealthMax3 or Yth

Armor      = LeatherArmor or ChainArmor or PlateArmor
Weapon     = Dagger or Sword or Axe or Spear
Potion     = HealthPotion or Pie
Scroll     = RedScroll or BlueScroll or GreenScroll
Equipment  = Armor or Weapon or Scroll  (equipment needs to be avoidable)
Consumable = Potion or Book  (consumables can block paths)
Item       = Equipment or Consumable

Lightning  = LightningH or LightningV
Fireball   = Fireball1 or Fireball2 or Fireball3
Spell      = Lightning or Fireball

Static     = Wall
Solid      = Player or Monster or Static

Damage     = Damage1 or Damage2 or Damage3 or Damage4
Health     = Health2 or Health3 or Health4 or Health5
Wounded    = Wounded1 or Wounded2 or Wounded3 or Wounded4
Protect1   = LeatherArmor
Protect2   = ChainArmor
Protect3   = PlateArmor

Opaque     = Wall
Visible    = UpVisible or DownVisible or LeftVisible or RightVisible
Fog        = WallFog or StoneFog or StairsFog

S1         = Cloister or Castle or Citadel (Surface)
S2         = Cellar or Crypt or Catacomb (Subterra)
S3         = Cavern or Crevasse or Chasm (Shaft)
S4         = Cacaphony or Conflagration or Condemnation (Styx)
Circle     = S1 or S2 or S3 or S4 or C13

=======
SOUNDS
=======

Start     destroy 53867108 (40768500)
Crate     move    36772507
Stairs    destroy 22
Attack    create  20558504
Lightning create  64987308
Fireball  create  72707502
Teleport  create  66240305
Corpse    create  67461302
Sfx0              43467307 (player move)
Sfx1              9462300  (item pickup)

================
COLLISIONLAYERS
================

Background

(interface subsystem)
HeartSlot, ItemSlot, ItemRecharge
Level, Heart
Circle

(map)
Floor
Player, Monster, Wall, Crate

(item subsystem)
Armor
Weapon
Potion, Book, Scroll
Lightning, Fireball, Teleport

(movement subsystem)
Move, Moved
Attack
Damage
Health
Wounded
Dying
Pause

(visibility subsystem)
Explored
Directly
UpVisible
DownVisible
LeftVisible
RightVisible
Hidden, Fog
HiddenCorner

(dungeon generation subsystem)
Start
Room
Doorway
RoomType
Reachable
GenerateDungeon
RandomHumanoid

(corpse is always on top)
Corpse

======
RULES
======

[Corpse] -> restart

[Lightning] -> []
[Fireball] -> []
[Pause] -> []

(---------------
 Item subsystem
---------------)

( Health potion: add one heart slot if possible and heal for full. )
late down [Player HealthPotion] [| no HeartSlot | HeartSlot] -> [Player] [| HeartSlot Heart | HeartSlot]
late down [Player HealthPotion] [  no HeartSlot | HeartSlot] -> [Player] [| HeartSlot Heart]
late down [HeartSlot Heart | HeartSlot no Heart] -> [HeartSlot Heart | HeartSlot Heart]

( Pie: add one heart if there's a slot. )
late down [Player Pie] [HeartSlot no Heart | Heart] -> [Player] [HeartSlot Heart | Heart]
late      [Player Pie] -> [Player]

( Scroll: first try picking it up as the first item, then as the rightmost item,
| then try swapping the first item in its place and moving everything left. )
late left [Player Scroll] [ItemSlot no Item | no ItemSlot] -> [Player] [ItemSlot Scroll |]
late left [Player Scroll] [ItemSlot no Item | Item] -> [Player] [ItemSlot Scroll | Item]
late left [Player Scroll] [ItemSlot Equipment | no Item] [no Item | ItemSlot Item] -> [Player Equipment] [ItemSlot |] [Scroll | ItemSlot Item]
late left [Item | ItemSlot no Item] -> [| ItemSlot Item]

late      [Player Book] -> [Player] (message Book!)


left [Action Player] [ItemSlot Item | no ItemSlot] -> [Player Pause] [ItemSlot Action Item |] again

vertical [Action BlueScroll] [Player | no Static] -> [Action BlueScroll] [Player | > LightningV]
horizontal [Action BlueScroll] [Player | no Static] -> [Action BlueScroll] [Player | > LightningH]
[> Lightning | no Static] -> [> Lightning | > Lightning]
[> Lightning] -> [Lightning Damage3]

[Action RedScroll] [Player | no Static] -> [Action RedScroll] [Player | Fireball1]
[Fireball1 | no Static no Player no Fireball] -> [Fireball1 | Fireball2]
[Fireball2 | no Static no Player no Fireball] -> [Fireball2 | Fireball3]
[Fireball] -> [Fireball Damage3]

random [Action GreenScroll] [Room no Static] -> [Action GreenScroll] [Teleport]
[Player Equipment] [Teleport] -> [Player] [Teleport Equipment]
[Player] [Teleport] -> [] [Player]

[Action Scroll] -> []
left [Item | ItemSlot no Item] -> [| ItemSlot Item]

(-------------------
 Movement subsystem
-------------------)

( Before we move the player, if there is an adjacent monster and the player moves other
| than towards the monster, copy the motion. If the player runs away, the monster will
| give chase. If the player moves perpendicularly, it will prevent the player from
| escaping by running in a circle. )
[Monster | perpendicular Player] -> [perpendicular Monster | perpendicular Player]
[Monster | > Player] -> [> Monster | > Player]

( Resolve the player's movement. )
[> Player        | Monster  ] -> [Player > Attack | Monster]
[> Player        | Solid    ] -> [Player          | Solid]
[> Player        | Item     ] -> [> Player        | Item Sfx1]
[> Player Armor  | no Armor ] -> [> Player        | Armor]
[> Player Weapon | no Weapon] -> [> Player        | Weapon]
[> Player        |          ] -> [                | Player Sfx0]

startloop

( Resolve attacks. The first time through the loop, this will resolve the player's attack.
| Subsequent iterations will resolve the attacks of the monster that last moved. )
[Humanoid no Weapon > Attack |   ] -> [Humanoid            | Damage1]
[Humanoid Dagger    > Attack |   ] -> [Humanoid Dagger     | Damage2]
[Humanoid Sword     > Attack |   ] -> [Humanoid Sword      | Damage3]
[Humanoid Axe         Attack |   ] -> [Humanoid Attack Axe | Damage2]
[Humanoid Spear     > Attack | | ] -> [Humanoid Spear      | Damage2 | Damage2]
[Beast              > Attack |   ] -> [Beast               | Damage1]
[Attack] -> []

[Humanoid Protect1 Damage2] -> [Humanoid Protect1 Damage1]
[Humanoid Protect1 Damage3] -> [Humanoid Protect1 Damage2]
[Humanoid Protect1 Damage4] -> [Humanoid Protect1 Damage3]
[Humanoid Protect2 Damage2] -> [Humanoid Protect2 Damage1]
[Humanoid Protect2 Damage3] -> [Humanoid Protect2 Damage1]
[Humanoid Protect2 Damage4] -> [Humanoid Protect2 Damage2]
[Humanoid Protect3 Damage2] -> [Humanoid Protect3 Damage1]
[Humanoid Protect3 Damage3] -> [Humanoid Protect3 Damage1]
[Humanoid Protect3 Damage4] -> [Humanoid Protect3 Damage1]

down [Player Damage4] [no Heart | Heart] -> [Player Damage3] [|]
down [Player Damage3] [no Heart | Heart] -> [Player Damage2] [|]
down [Player Damage2] [no Heart | Heart] -> [Player Damage1] [|]
down [Player Damage1] [no Heart | Heart] -> [Player        ] [|]

[Damage no Monster] -> []

[Damage HealthMax1          ] -> []
[Damage HealthMax2 no Health] -> [Damage HealthMax2 Health2 Wounded2]
[Damage HealthMax3 no Health] -> [Damage HealthMax3 Health3 Wounded3]
[Damage HealthMax4 no Health] -> [Damage HealthMax4 Health4 Wounded4]
([Damage HealthMax5 no Health] -> [Damage HealthMax2 Health5 Wounded5])

[Monster Health Damage1 Wounded1] -> []
[Monster Health Damage2 Wounded1] -> []
[Monster Health Damage3 Wounded1] -> []
[Monster Health Damage4 Wounded1] -> []
[Monster Health Damage1 Wounded2] -> [Monster Health Wounded1]
[Monster Health Damage2 Wounded2] -> []
[Monster Health Damage3 Wounded2] -> []
[Monster Health Damage4 Wounded2] -> []
[Monster Health Damage1 Wounded3] -> [Monster Health Wounded2]
[Monster Health Damage2 Wounded3] -> [Monster Health Wounded1]
[Monster Health Damage3 Wounded3] -> []
[Monster Health Damage4 Wounded3] -> []
[Monster Health Damage1 Wounded4] -> [Monster Health Wounded3]
[Monster Health Damage2 Wounded4] -> [Monster Health Wounded2]
[Monster Health Damage3 Wounded4] -> [Monster Health Wounded1]
[Monster Health Damage4 Wounded4] -> []

[Damage] -> []

( Pick a random monster to move next. Only consider monsters that have a valid move
| available to them. )
random [Player no Pause] [Monster no Moved | no Monster no Static] -> [Player] [Monster Move |]

( Apply an appropriate movement pattern. Monsters next to the player always attack.
| Monsters that have a pre-existing movement preference try that first. )
[Monster Move | Player] -> [> Monster Moved | Player]
[> Monster Move ] -> [> Monster Moved]

( Beasts move at random, unless overridden by the above rules. )
[Beast Move] -> [randomDir Beast Moved]

( Visible humanoids move towards the player. )
up    [DownVisible  Humanoid Move | no Solid] -> [DownVisible  > Humanoid Moved |]
down  [UpVisible    Humanoid Move | no Solid] -> [UpVisible    > Humanoid Moved |]
left  [RightVisible Humanoid Move | no Solid] -> [RightVisible > Humanoid Moved |]
right [LeftVisible  Humanoid Move | no Solid] -> [LeftVisible  > Humanoid Moved |]
[Humanoid Move | no Solid Directly Visible] -> [> Humanoid Moved | Directly Visible]
[Humanoid Move | no Solid | ... | Directly Visible] -> [> Humanoid Moved || ... | Directly Visible]
[Humanoid Move] -> [randomDir Humanoid Moved]

( If none of the above rules could be applied, the monster doesn't move. )
[Monster  Move                ] -> [Monster Moved]

[> Monster  Moved         | Player   ] -> [Monster Moved > Attack | Player       ]
[> Monster  Moved         | Solid    ] -> [Monster                | Solid        ]
[> Humanoid Moved Armor   | no Armor ] -> [> Humanoid Moved       | Armor        ]
[> Humanoid Moved Weapon  | no Weapon] -> [> Humanoid Moved       | Weapon       ]
[> Monster  Moved Health  |          ] -> [> Monster Moved        | Health       ]
[> Monster  Moved Wounded |          ] -> [> Monster Moved        | Wounded      ]
[> Monster  Moved         |          ] -> [                       | Monster Moved]

endloop

[Moved] -> []

( Kill the player unless they have a heart remaining. )
late [Player] -> [Dying Player]
late [Dying Player] [HeartSlot Heart] -> [Player] [HeartSlot Heart]
late [Dying Player] -> [Corpse]

(-----------------------------
 Dungeon generation subsystem
-----------------------------)

( If we're starting the game, put a random player in a random room, then generate the
| first level of the dungeon. )
late random [Start] [RoomCenter] -> [Start] [% RoomCenter random Player Reachable]

( Remove the stairs and start dungeon generation. GenerateDungeon (%) is used to ensure
| that these rules are applied only once, and not at every tick. )
late [Player Stairs] -> [% Player Reachable Stone]

( Heal for one slot. "random" ensures the rule is applied only once. )
late random down [%] [HeartSlot no Heart | Heart] -> [%] [HeartSlot Heart | Heart]

( Clear out all explored spaces. )
late [%] [Explored] -> [%] []
late [%] [Monster ] -> [%] []
late [%] [Map Item no Player] -> [%] [Map]
late [%] [RoomType] -> [%] []

( Clear all rooms and fill all doorways with walls. Remove doorway walls at random until
| all squares are reachable from the player's current space. )
late [%] [Room Wall   ] -> [%] [Room]
late [%] [Room Doorway] -> [%] [Room]
late [%] [Doorway no Wall] -> [%] [Doorway Wall]
startloop
late random [%] [Map no Reachable no Wall] [Doorway Wall] -> [%] [Map] [Doorway]
late [%] [Reachable | Map no Reachable no Wall] -> [%] [Reachable | Map Reachable]
endloop
late [Reachable] -> []

( Fill rooms. )
late random [%] [RoomCenter no Player] -> [%] [RoomCenter Stairs]
late [%] [RoomCenter no Player no Stairs no RoomType] -> [%] [RoomCenter random RoomType]

late [%] [EquipmentRoom no Item] -> [%] [EquipmentRoom random Equipment]
late [%] [| ColumnRoom |] -> [%] [Doorway | ColumnRoom Wall | Doorway]

( Spawn five random monsters (temporary). )
late random [%] [Map no Solid no Spawn] -> [%] [Map random Spawn]
late random [%] [Map no Solid no Spawn] -> [%] [Map random Spawn]
late random [%] [Map no Solid no Spawn] -> [%] [Map random Spawn]
late random [%] [Map no Solid no Spawn] -> [%] [Map random Spawn]
late random [%] [Map no Solid no Spawn] -> [%] [Map random Spawn]
late [RandomHumanoid no Item] -> [RandomHumanoid random Armor random Weapon]
late [RandomHumanoid] [Level S1] -> [random Ith] [Level S1]
late [RandomHumanoid] [Level S2] -> [random Oth] [Level S2]
late [RandomHumanoid] [Level S3] -> [random Uth] [Level S3]
late [RandomHumanoid] [Level S4] -> [random Yth] [Level S4]

( Spawn three random consumables. )
late random [%] [Map no Solid no Item] -> [%] [Map random Consumable]
late random [%] [Map no Solid no Item] -> [%] [Map random Consumable]
late random [%] [Map no Solid no Item] -> [%] [Map random Consumable]

( Remove GenerateDungeon and increment the level. )
late down [%] [Level1]   -> [] [Level2]
late down [%] [Level2]   -> [] [Level3]
late down [%] [Level3]   -> [] [Level4]
late down [%] [Level4]   -> [] [Level5]
late down [%] [Level5 |] -> [] [| Level1]
late [%] [Start] -> [] [Level1]

(-------------------
 Lighting subsystem
-------------------)

( First, make all squares visible. )
late [Visible] -> []
late [Directly] -> []
late [Fog] -> []
late [Hidden] -> []
late [HiddenCorner] -> []

( The player has left-visibility into the cell to their left, right visibility into the
| cell to their right, and so on. If any of those squares are opaque, then they don't have
| visibility there. )
late down  [| Player |] -> [UpVisible   | Player | DownVisible]
late right [| Player |] -> [LeftVisible | Player | RightVisible]
late [Opaque Visible] -> [Opaque]

( Flood-fill each kind of visibility within rooms and doorways; if a player has
| left-visibility in a room or doorway, they have left-visibility from every cell in
| that room or doorway. )
late [no Doorway Visible | no Doorway no Opaque] -> [Visible | Visible]
late [Doorway Visible    | Doorway no Opaque]    -> [Doorway Visible | Doorway Visible]

( Cast rays out for each kind of visibility, until an opaque cell is reached. )
late up    [UpVisible    | no Opaque] -> [UpVisible    | UpVisible]
late down  [DownVisible  | no Opaque] -> [DownVisible  | DownVisible]
late left  [LeftVisible  | no Opaque] -> [LeftVisible  | LeftVisible]
late right [RightVisible | no Opaque] -> [RightVisible | RightVisible]

( Prune visibility. Visibility is used as part of the monster's movement logic, and it
| confuses them when they're visible from multiple directions in the same space. First,
| cull the four straight cardinal directions from the player... )
late [Player Visible ] -> [Player]
late down  [Player | ... | Visible] -> [Player | ... | Directly DownVisible ]
late up    [Player | ... | Visible] -> [Player | ... | Directly UpVisible   ]
late left  [Player | ... | Visible] -> [Player | ... | Directly LeftVisible ]
late right [Player | ... | Visible] -> [Player | ... | Directly RightVisible]

( ...then, resolve opposing visibilities according to the side of the player... )
late horizontal [Directly UpVisible    | ... | DownVisible ] -> [Directly UpVisible    | ... |]
late horizontal [Directly DownVisible  | ... | UpVisible   ] -> [Directly DownVisible  | ... |]
late vertical   [Directly LeftVisible  | ... | RightVisible] -> [Directly LeftVisible  | ... |]
late vertical   [Directly RightVisible | ... | LeftVisible ] -> [Directly RightVisible | ... |]

( Hide cells where we don't have visibility, except for opaque cells next to visible cells
| and opaque cells next to two non-hidden cells. We do it this way instead of granting
| visibility to the opaque cells because we don't want to recurse and reveal opaque cells
| next to single un-hidden opaque cells.)
late [no Player no Visible Map] -> [Hidden Map]
late [Hidden Opaque | Visible] -> [Opaque | Visible]
late horizontal [Opaque Hidden              | no Hidden Map] -> [Opaque Hidden HiddenCorner | Map]
late vertical   [Opaque Hidden HiddenCorner | no Hidden Map] -> [Opaque                     | Map]

( Fog support. Anything that isn't hidden is now "Explored". For previously-explored cells
| where we have a fog variant, use that instead of the generic "Hidden" block)
late [no Hidden Map] -> [Explored Map]
late [Explored Hidden Wall  ] -> [Explored WallFog   Wall]
late [Explored Hidden Stairs] -> [Explored StairsFog Stairs]
late [Explored Hidden Stone ] -> [Explored StoneFog  Stone]

==============
WINCONDITIONS
==============

All Level on Coronation

=======
LEVELS
=======

-????--------!-
-#############1
-#.../.../...#2
-#.X./.X./.X.#3
-#.../.../...#4
-#///O///O///#5
-#.../.../...#6
-#.X./.X./.X.#7
-#.../.../...#8
-#///O///O///#9
*#.../.../...#A
*#.X./.X./.X.#B
*#.../.../...#C
*#############$
---------------

message Victory!