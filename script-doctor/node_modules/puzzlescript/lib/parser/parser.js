"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationLevel = void 0;
const nearley = __importStar(require("nearley"));
const astBuilder_1 = require("./astBuilder");
const grammar_1 = __importDefault(require("./grammar"));
var ValidationLevel;
(function (ValidationLevel) {
    ValidationLevel[ValidationLevel["ERROR"] = 0] = "ERROR";
    ValidationLevel[ValidationLevel["WARNING"] = 1] = "WARNING";
    ValidationLevel[ValidationLevel["INFO"] = 2] = "INFO";
})(ValidationLevel = exports.ValidationLevel || (exports.ValidationLevel = {}));
class Parser {
    constructor() {
        this.grammar = nearley.Grammar.fromCompiled(grammar_1.default);
    }
    parseToAST(code) {
        const parser = new nearley.Parser(this.grammar);
        parser.feed(code);
        parser.feed('\n');
        parser.finish();
        const results = parser.results;
        if (results.length === 1) {
            return results[0];
        }
        else if (results.length === 0) {
            throw new Error(`ERROR: Could not parse`);
        }
        else {
            throw new Error(`AMBIGUOUS: has ${results.length} results`);
        }
    }
    parse(code) {
        const node = this.parseToAST(code);
        const builder = new astBuilder_1.AstBuilder(code);
        const gameData = builder.build(node);
        return { data: gameData };
    }
}
exports.default = new Parser();
//# sourceMappingURL=parser.js.map