import { Cell } from '../engine';
import { BaseForLines, IGameCode } from './BaseForLines';
import { IGameTile } from './tile';
export declare enum WIN_QUALIFIER {
    NO = "NO",
    ALL = "ALL",
    ANY = "ANY",
    SOME = "SOME"
}
export declare class WinConditionSimple extends BaseForLines {
    readonly qualifier: WIN_QUALIFIER;
    readonly tile: IGameTile;
    constructor(source: IGameCode, qualifierEnum: WIN_QUALIFIER, tile: IGameTile);
    cellsThatMatchTile(cells: Iterable<Cell>, tile: IGameTile): Cell[];
    isSatisfied(cells: Iterable<Cell>): boolean;
    a11yGetTiles(): IGameTile[];
    protected _isSatisfied(cells: Iterable<Cell>): boolean;
}
export declare class WinConditionOn extends WinConditionSimple {
    readonly onTile: IGameTile;
    constructor(source: IGameCode, qualifierEnum: WIN_QUALIFIER, tile: IGameTile, onTile: IGameTile);
    a11yGetTiles(): IGameTile[];
    protected _isSatisfied(cells: Iterable<Cell>): boolean;
}
