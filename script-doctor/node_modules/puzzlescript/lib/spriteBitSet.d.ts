import { BitSet } from 'bitset';
import { GameData } from './models/game';
import { GameSprite } from './models/tile';
declare abstract class CustomBitSet<T> {
    protected readonly bitSet: BitSet;
    constructor(items?: Iterable<T>, bitSet?: BitSet);
    isEmpty(): boolean;
    addAll(items: Iterable<T>): void;
    add(item: T): void;
    remove(item: T): void;
    has(item: T): boolean;
    containsAll(other: CustomBitSet<T>): boolean;
    containsAny(other: CustomBitSet<T>): boolean;
    containsNone(other: CustomBitSet<T>): boolean;
    protected abstract indexOf(item: T): number;
    private _indexOf;
}
export declare class SpriteBitSet extends CustomBitSet<GameSprite> {
    indexOf(item: GameSprite): number;
    union(bitSets: Iterable<SpriteBitSet>): SpriteBitSet;
    protected toString(gameData: GameData): string;
    private getSprites;
    private or;
}
export {};
